<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2019-03-11T19:48:59-04:00</updated><id>/blog/</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">JavaLand 2019 Conference Picks</title><link href="/blog/2019/03/11/javaland-2019-picks.html" rel="alternate" type="text/html" title="JavaLand 2019 Conference Picks" /><published>2019-03-11T17:30:00-04:00</published><updated>2019-03-11T17:30:00-04:00</updated><id>/blog/2019/03/11/javaland-2019-picks</id><content type="html" xml:base="/blog/2019/03/11/javaland-2019-picks.html">&lt;p&gt;&lt;img src=&quot;/blog/assets/JavaLand-2019-Banner-800x643-Twitter-Schulungspartner-ENG.jpg&quot; alt=&quot;I'm teaching at JavaLand 2019&quot; title=&quot;I'm teaching at JavaLand 2019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s time for my favorite of the year: JavaLand!  This year I have the
great blessing to be &lt;a href=&quot;https://www.heise.de/developer/artikel/Ed-Burns-Container-waren-zur-rechten-Zeit-am-rechten-Ort-4303141.html&quot;&gt;giving the Tuesday
keynote&lt;/a&gt;.
I consider it a great honor to be in such esteemed company as Martin
Thompson, Holly Cummins, Adam Gowdiak (though I shan’t be dissing on
anyone’s &lt;a href=&quot;http://www.security-explorations.com/materials/se-javaland.pdf&quot;&gt;security
practices&lt;/a&gt;),
and other past keynote speakers.  I hope I’m up to the task.  I’ve been
&lt;a href=&quot;/blog/2019/01/29/ojug-2019-02-27.html&quot;&gt;practicing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also am very happy to be teaching a class with my long time training
partner Oliver Szymanski.  This year we are teaching about &lt;a href=&quot;https://programm.javaland.eu/2019/#/scheduledEvent/569084&quot;&gt;Docker and
Kubernetes&lt;/a&gt;.
The title of the workshop is “Cloud Perspective: Kubernetes is like an
App Server, but more Cloudy”, but I saw a funny tweet last week that
sums it up more humorously: &lt;a href=&quot;https://twitter.com/spezam/status/1104293618720878595&quot;&gt;Kubernetes is the Websphere of the
millenials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post lists my conference session picks.  I hope to attend as many
of these as possible, but there is so much going on that I may not be
able to make it.  There were many times when multiple sessions that I
want to attend were scheduled at the same time, apologies to the
speakers of the one’s not chosen.  Take a look at &lt;a href=&quot;https://programm.javaland.eu/2019/#/schedule&quot;&gt;program
yourself&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;

&lt;h4 id=&quot;0830-wintergarden---test-driven-architecture---peter-gafert&quot;&gt;08:30 Wintergarden - Test Driven Architecture - &lt;a href=&quot;https://twitter.com/codecholeric&quot;&gt;Peter Gafert&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This talk promises to take what we all love about TDD and apply it to
microservices based architectures.  This seems a tall order, so I’m keen
to see what it’s about.&lt;/p&gt;

&lt;h4 id=&quot;1100-wintergarden---community-controlled-jakarta-ee-with-jax-rs-and-mvc---christan-kaltepoth-and-friends&quot;&gt;11:00 Wintergarden - Community-Controlled Jakarta EE with JAX-RS and MVC - &lt;a href=&quot;https://twitter.com/chkal&quot;&gt;Christan Kaltepoth and friends&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It’s been more than two years since Jakarta EE was announced and things
are really rolling now.  MVC is a great example of what can be done in
this new approach to developing the standard for enterprise Java.&lt;/p&gt;

&lt;h4 id=&quot;1200-rotunde---master-your-java-applications-in-kubernetes---andy-moncsek&quot;&gt;12:00 Rotunde - Master your Java Applications in Kubernetes - &lt;a href=&quot;https://twitter.com/AndyAHCP&quot;&gt;Andy Moncsek&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ever since seeing Ray Tsang’s talk about &lt;a href=&quot;/blog/2017/02/23/ray-tsang-docker-tips-notes.html&quot;&gt;Docker Tips and Tricks&lt;/a&gt; at
DevNexus 2017, people have been trying to avoid pitfall when combining
Java and Docker.  I think the same things need to be said about Java and
Kubernetes, and I expect Andy will say them.&lt;/p&gt;

&lt;h4 id=&quot;1300-stocks---jenkins-x-continuously-driving-the-kloud---gerd-aschemann&quot;&gt;13:00 STOCKs - Jenkins X Continuously Driving the Kloud - &lt;a href=&quot;https://twitter.com/GerdAschemann&quot;&gt;Gerd Aschemann&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I vividly remember the first time Kohsuke showed my Hudson, back in 2005
or so.  Even back then, it was clear that CI was going to be the way
things work in the future.  Nowadays, the CI space is more crowded than
ever: TravisCI, GitLab, CircleCI, and many many more.  I’d like to see
what Gerd has to say about the state of Jenkins and the new Jenkins X.&lt;/p&gt;

&lt;h4 id=&quot;1400-tie&quot;&gt;14:00 TIE:&lt;/h4&gt;

&lt;p&gt;I can’t let a JavaLand go by without seeing a talk by &lt;a href=&quot;https://twitter.com/dasniko&quot;&gt;Das
Niko&lt;/a&gt;, but on the other hand, &lt;a href=&quot;https://twitter.com/svenpet&quot;&gt;Sven
Peters&lt;/a&gt; is also a very excellent speaker,
with a compelling topic.  So I’ll list both and see which one I can
make.&lt;/p&gt;

&lt;h5 id=&quot;1400-silverado-theater---das-geheimnis-erfolgreicher-teams---sven-peters&quot;&gt;14:00 Silverado Theater - Das Geheimnis erfolgreicher Teams - &lt;a href=&quot;https://twitter.com/svenpet&quot;&gt;Sven Peters&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Having written and thought extensively about so-called Rockstar
Programmers, and in particular their role in successful teams, I want to
hear what Sven has to say about the whole thing.&lt;/p&gt;

&lt;h5 id=&quot;1400-schauspielhaus---container-vs-serverless---the-good-the-bad--the-ugly---das-niko&quot;&gt;14:00 Schauspielhaus - Container vs. Serverless - the Good, the Bad &amp;amp; the Ugly - &lt;a href=&quot;https://twitter.com/dasniko&quot;&gt;Das Niko&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;I love Niko’s talks because he sticks straight to the technical, and
he’s not afraid to challenge conventional wisdom.  That always makes for
a good talk.&lt;/p&gt;

&lt;h4 id=&quot;1500-quantum-12---visual-studio-code-for-java-and-spring-devs---bruno-borges&quot;&gt;15:00 Quantum 1+2 - Visual Studio Code for Java and Spring Devs - &lt;a href=&quot;https://twitter.com/brunoborges&quot;&gt;Bruno Borges&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This quote alone from the abstract is striking for its honesty and
candor: “Installing the right extensions in VS Code results in a
powerful yet lightweight code editing experience that comes close to the
feature richness of existing Java IDEs.”  Having been experienced with
NetBeans and, to a lesser extent IntelliJ idea, I am certainly willing
to try other tools.  Let’s see what VS Code for Java has to show.&lt;/p&gt;

&lt;h4 id=&quot;1600-lecture-tent---datenflut-ertrinken-oder-auf-der-welle-reiten-tanja-schmidt&quot;&gt;16:00 Lecture Tent - Datenflut: Ertrinken oder auf der Welle reiten? &lt;a href=&quot;https://programm.javaland.eu/2019/#/speaker/382558&quot;&gt;Tanja Schmidt&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’m excited to understand how to go fishing in a Data Lake.  I expect
Tanja will explain it all and more.&lt;/p&gt;

&lt;h4 id=&quot;1700-wintergarden---panel-zukunft-java&quot;&gt;17:00 Wintergarden - Panel: Zukunft Java&lt;/h4&gt;

&lt;p&gt;There is a lot to talk about here. Knowing
&lt;a href=&quot;https://twitter.com/hendrikEbbers&quot;&gt;Hendrik&lt;/a&gt; it will be entertaining and
informative.&lt;/p&gt;

&lt;h4 id=&quot;1800-quantum-12---the-future-of-java-and-you---heather-vancura&quot;&gt;18:00 Quantum 1+2 - The Future of Java and You - &lt;a href=&quot;https://twitter.com/heathervc&quot;&gt;Heather Vancura&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you’ve wondered about the continuing role of the JCP in a world where
plain-ole-Open Source (PooS) and the Jakarta Project are also valid
governance choices, this talk should answer your questions.&lt;/p&gt;

&lt;h4 id=&quot;1900-wintergarden---revisiting-effective-java-in-2019-edson-yanaga&quot;&gt;19:00 Wintergarden - Revisiting Effective Java in 2019 &lt;a href=&quot;https://twitter.com/yanaga&quot;&gt;Edson Yanaga&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’ve long felt that Java’s biggest education problem is the challenge of
teaching only the good stuff.  The classic book on which this talk is
based does that very well.  I look forward to hearing Edson’s
perspective on Josh Bloch’s java gem.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;

&lt;h4 id=&quot;0900-rotunde---welcome-failure-leichter-gesagt-als-getan-sabine-wojcieszak&quot;&gt;09:00 Rotunde - Welcome Failure Leichter gesagt als getan! &lt;a href=&quot;https://twitter.com/SabineBendixen&quot;&gt;Sabine Wojcieszak&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’ve never seen a session from this speaker, but she seems like an
excellent speaker and the talk promises to tease apart blame from
responsibility.  It’s an ambitious agenda for 40 minutes, but a great
chance to meet and talk about this important topic more, perhaps over an
ice cream across the way from Quantum 1+2.&lt;/p&gt;

&lt;h4 id=&quot;1000-schauspielhaus---wie-fit-ist-java-für-die-cloud---roland-huß&quot;&gt;10:00 Schauspielhaus - Wie fit ist Java für die Cloud? - &lt;a href=&quot;https://www.twitter.com/ro14nd&quot;&gt;Roland Huß&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’m choosing this talk just based on the experience of the speaker and
the topic.  Roland is the man behing the Docker Maven Plugin.  I expect
to see a critical assesment of Java and the cloud.&lt;/p&gt;

&lt;h4 id=&quot;1100-silverado---community-keynote-kampf-der-giganten&quot;&gt;11:00 Silverado - Community-Keynote: Kampf der Giganten&lt;/h4&gt;

&lt;p&gt;The community keynote at JavaOne is often a humorous and informative
look at what’s has happened in the Java community in the past year.  I
expect this will be similar.  I’ve been invited to participate!&lt;/p&gt;

&lt;h4 id=&quot;1200-stocks---kubernetes-runtime-security-when-contaniers-go-bad---jen-tong&quot;&gt;12:00 STOCKs - Kubernetes Runtime Security: When Contaniers Go Bad - &lt;a href=&quot;https://twitter.com/MimmingCodes&quot;&gt;Jen Tong&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Knowing how many people allow their Docker &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; to run as root,
I’m curious to see what Jen has to say about security in containers.&lt;/p&gt;

&lt;h4 id=&quot;1300-quantum-12---java-webstart-ist-tot---wie-geht-es-nun-weiter---hendrik-ebbers&quot;&gt;13:00 Quantum 1+2 - Java WebStart ist tot - Wie geht es nun weiter? - &lt;a href=&quot;https://twitter.com/hendrikEbbers&quot;&gt;Hendrik Ebbers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I have nothing to do with client side Java any more, but I remember
really loving Java WebStart back in the day.  I wonder where it will go
now?&lt;/p&gt;

&lt;h4 id=&quot;1400-stocks---when-technology-and-humanly-collides---marieme-jamme&quot;&gt;14:00 STOCKs - When Technology and humanly collides - &lt;a href=&quot;https://twitter.com/mjamme&quot;&gt;Marieme Jamme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;We need more talks like this about the societal impact of what we do as
programmers.  I can’t wait to see this one.  Even though the abstract is
very sparse, I’m sure it’s worth attending.&lt;/p&gt;

&lt;h4 id=&quot;1500-schauspielhaus---java-hacker-und-zwillingsmama---martina-baumer&quot;&gt;15:00 Schauspielhaus - Java-Hacker und Zwillingsmama - &lt;a href=&quot;https://programm.javaland.eu/2019/#/speaker/381980&quot;&gt;Martina Baumer&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Work and life balance was a theme I explored in the Rockstar Programmer
book.  Unfortunately, all the people I interviewed were men.  I can’t
wait to see Martina’s female perspectives on this important topic.&lt;/p&gt;

&lt;h4 id=&quot;1600-quantum-34---testing-java-microservices---andy-gumbrecht&quot;&gt;16:00 Quantum 3+4 - Testing Java Microservices - &lt;a href=&quot;https://twitter.com/AndyGeeDe&quot;&gt;Andy Gumbrecht&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy has written an excellent book from which he is extracting this
talk.  I’ve seen it before and it’s great.  You should see it too.&lt;/p&gt;

&lt;h4 id=&quot;1700-wintergarden---the-dark-side-of-java-8---grzegorz-piwowarek&quot;&gt;17:00 Wintergarden - The Dark Side of Java 8 - &lt;a href=&quot;https://twitter.com/pivovarit&quot;&gt;Grzegorz Piwowarek&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I love to get outside perspectives on the success or failure of our Java
releases.  I’m wondering what he thinks is wrong with the Stream API?
We’ll see!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">I’m Speaking at Orlando JUG on Thursday 7 March</title><link href="/blog/2019/01/29/ojug-2019-02-27.html" rel="alternate" type="text/html" title="I'm Speaking at Orlando JUG on Thursday 7 March" /><published>2019-01-29T18:00:00-05:00</published><updated>2019-01-29T18:00:00-05:00</updated><id>/blog/2019/01/29/ojug-2019-02-27</id><content type="html" xml:base="/blog/2019/01/29/ojug-2019-02-27.html">&lt;p&gt;My local Java User’s Group is getting off to a great start in 2019.  As
was mentioned on
&lt;a href=&quot;https://twitter.com/mgrygles/status/1088190088100700185&quot;&gt;twitter&lt;/a&gt;, we
had &lt;a href=&quot;https://twitter.com/cjug&quot;&gt;Chicago JUG&lt;/a&gt;’s own
&lt;a href=&quot;https://twitter.com/mgrygles&quot;&gt;Mary Grygleski&lt;/a&gt; in January, I’ll be
speaking in March, and shortly thereafter we’ll have my colleage
Santiago Pericas-Geertsen in April.&lt;/p&gt;

&lt;p&gt;My talk is chance to see what I’ll be presenting as a keynote at
&lt;a href=&quot;https://javaland.eu&quot;&gt;JavaLand&lt;/a&gt; this year.  You can read more about it
at the following places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.meetup.com/OrlandoJUG/events/258490920/&quot;&gt;MeetUp&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://codetown.com/events/orlandojug-programming-platform-growth-table-stakes-or-deal-makes&quot;&gt;CodeTown&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But briefly, my talk draws from my 25 years of professional programming
experience, spanning many languages, operating systems, and platforms,
to survey what it takes to make a programming language platform
successful in terms of widespread use. I’ll look at Java, Python,
Node, Go, and Swift and evaluate the ingredients that brought each one
its own form of success. Finally, I’ll draw some lessons that apply
to anyone trying to grow their computing platform, because, at some
level, we are all in the platform business.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thursday 7 March 2019&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;6pm - 8pm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starter Studio Orlando&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.google.com/maps/search/?api=1&amp;amp;query=28.540941%2C-81.381256&quot;&gt;101 South Garland Avenue Suite 108, Orlando, FL&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll have some copies of
&lt;a href=&quot;http://ridingthecrest.com/&quot;&gt;Secrets of the Rockstar Programmers&lt;/a&gt; on
hand for sale for USD $15 each.&lt;/p&gt;

&lt;h2 id=&quot;coming-in-april-project-helidon&quot;&gt;Coming In April: Project Helidon&lt;/h2&gt;

&lt;p&gt;My colleague, and former JAX-RS spec lead, Santiago Pericas-Geertsen
will be presenting the new and exciting
&lt;a href=&quot;https://helidon.io/#/&quot;&gt;Oracle Project Helidon&lt;/a&gt;.  Helidon is a
Microprofile friendly Java powered collection of cohesive libraries for
writing software for the microservices style.  You may also know
Santiago as the man behind the innovative
&lt;a href=&quot;https://www.n-k.de/2014/05/project-avatar-twitterwall-demo.html&quot;&gt;Oracle Project Avatar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Santiago’s talk will be at the same place as my 7 March talk.&lt;/p&gt;</content><author><name></name></author><summary type="html">My local Java User’s Group is getting off to a great start in 2019. As was mentioned on twitter, we had Chicago JUG’s own Mary Grygleski in January, I’ll be speaking in March, and shortly thereafter we’ll have my colleage Santiago Pericas-Geertsen in April.</summary></entry><entry><title type="html">Stacktraces and deinitializers in Swift</title><link href="/blog/2019/01/17/swift-callstack.html" rel="alternate" type="text/html" title="Stacktraces and deinitializers in Swift" /><published>2019-01-17T13:00:00-05:00</published><updated>2019-01-17T13:00:00-05:00</updated><id>/blog/2019/01/17/swift-callstack</id><content type="html" xml:base="/blog/2019/01/17/swift-callstack.html">&lt;p&gt;While continuing to make my way through
&lt;a href=&quot;https://docs.swift.org/swift-book/&quot;&gt;the Swift Book&lt;/a&gt;, I finally reached
the definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Deinitialization&lt;/code&gt;.  The authors wait until almost
halfway through the pagecount before introducing this concept.  Since
this is the first time in the book a code sample has code that is called
by the runtime rather than the reader, I wanted to print a stack trace
in the deinitializer and see what it looked like.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Deinitialization&lt;/code&gt; example from the Swift Book with my call
to print the stack trace on line 25.  I had to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;import
Foundation&lt;/code&gt; to make it compile with that line in there.&lt;/p&gt;

&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #006699;&quot;&gt;Foundation&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Bank &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; var coinsInBank &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; 10_000&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; func distribute&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins numberOfCoinsRequested&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;-&amp;gt;&lt;/span&gt; Int &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; let numberOfCoinsToVend &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; min&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;numberOfCoinsRequested, coinsInBank&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInBank &lt;span style=&quot;color: #339933;&quot;&gt;-=&lt;/span&gt; numberOfCoinsToVend&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; numberOfCoinsToVend&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; func receive&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInBank &lt;span style=&quot;color: #339933;&quot;&gt;+=&lt;/span&gt; coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Player &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; var coinsInPurse&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; init&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInPurse &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; Bank.&lt;span style=&quot;color: #006633;&quot;&gt;distribute&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; coins&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; func win&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInPurse &lt;span style=&quot;color: #339933;&quot;&gt;+=&lt;/span&gt; Bank.&lt;span style=&quot;color: #006633;&quot;&gt;distribute&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; coins&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; deinit &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; debugPrint&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;PlayerOne has left the game&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Athread+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Thread&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;callStackSymbols&lt;/span&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;$&lt;span style=&quot;color: #cc66cc;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Bank.&lt;span style=&quot;color: #006633;&quot;&gt;receive&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; coinsInPurse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;var playerOne&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Player&lt;span style=&quot;color: #339933;&quot;&gt;?&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; Player&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;A new player has joined the game with &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;playerOne!.coinsInPurse) coins&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;A new player has joined the game with 100 coins&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;There are now &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;Bank.coinsInBank) coins left in the bank&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;There are now 9900 coins left in the bank&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;playerOne&lt;span style=&quot;color: #339933;&quot;&gt;!&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;win&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;2&lt;/span&gt;_000&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;PlayerOne won 2000 coins &amp;amp; now has &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;playerOne!.coinsInPurse) coins&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;PlayerOne won 2000 coins &amp;amp; now has 2100 coins&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;The bank now only has &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;Bank.coinsInBank) coins left&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;The bank now only has 7900 coins left&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;playerOne &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; nil&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;PlayerOne has left the game&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;The bank now has &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;Bank.coinsInBank) coins&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;The bank now has 10000 coins&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;I learned about this call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.callStackSymbols.forEach&lt;/code&gt; on
&lt;a href=&quot;https://stackoverflow.com/questions/30754796/how-to-print-call-stack-in-swift/30814498&quot;&gt;stackoverflow&lt;/a&gt;,
but the more interesting information is in the reference docs for
&lt;a href=&quot;https://developer.apple.com/documentation/foundation/thread&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;&lt;/a&gt;.
You see, &lt;code class=&quot;highlighter-rouge&quot;&gt;callStackSymbols&lt;/code&gt; is an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; and therefore it has
a &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;.  The output from running the above program looks like this:&lt;/p&gt;

&lt;div class=&quot;text&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;A new player has joined the game with 100 coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;There are now 9900 coins left in the bank&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;PlayerOne won 2000 coins &amp;amp; now has 2100 coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;The bank now only has 7900 coins left&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;quot;PlayerOne has left the game&amp;quot;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;0 &amp;nbsp; ??? &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x00000001153071e5 0x0 + 4650463717&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;1 &amp;nbsp; ??? &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x0000000115307478 0x0 + 4650464376&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;2 &amp;nbsp; libswiftCore.dylib &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0x00000001179bda00 _swift_release_dealloc + 16&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;3 &amp;nbsp; ??? &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x00000001153068d5 0x0 + 4650461397&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;4 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010e8a723d _ZN4llvm5MCJIT11runFunctionEPNS_8FunctionENS_8ArrayRefINS_12GenericValueEEE + 365&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;5 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010e8adc1c _ZN4llvm15ExecutionEngine17runFunctionAsMainEPNS_8FunctionERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEPKPKc + 1004&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;6 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010db0efe4 _ZL14performCompileRN5swift16CompilerInstanceERNS_18CompilerInvocationEN4llvm8ArrayRefIPKcEERiPNS_16FrontendObserverEPNS_20UnifiedStatsReporterE + 52660&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;7 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010dafed35 _ZN5swift15performFrontendEN4llvm8ArrayRefIPKcEES3_PvPNS_16FrontendObserverE + 7717&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;8 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010daa4965 main + 1349&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;9 &amp;nbsp; libdyld.dylib &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x00007fff79108015 start + 1&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;The bank now has 10000 coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Line 14 of the output, &lt;code class=&quot;highlighter-rouge&quot;&gt;8 swift ... main + 1349&lt;/code&gt;, corresponds exactly to
1349 characters after the start of above code listing, which is
&lt;code class=&quot;highlighter-rouge&quot;&gt;playerOne = nil&lt;/code&gt;.  And indeed that is when the deinitializer is called.&lt;/p&gt;

&lt;p&gt;Looking at the reference documentation, there are some other interesting
properties of &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;.  Some useful class properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;isMultiThreaded: Boolean&lt;/li&gt;
  &lt;li&gt;isMainThread: Boolean&lt;/li&gt;
  &lt;li&gt;name: the name of the thread&lt;/li&gt;
  &lt;li&gt;current: the current thread&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s add this line to the beginning of the code listing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread.current.name = &quot;Main Game Thread&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Modifying the above code to print out these properties, the new output
is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;isMultiThreaded: false
current.isMainThread: true
current.name: Main Game Thread
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we can see that the deinitializer is called on the same thread as the
main code.&lt;/p&gt;

&lt;p&gt;I’m sure there is more to reveal about runtime stack inspection, but
mastering the diagnostic and debugging techniques of a programming
language platform is an important component of proficiency.  It pays to
pick up and save such tips when they come along.&lt;/p&gt;</content><author><name></name></author><summary type="html">While continuing to make my way through the Swift Book, I finally reached the definition of Deinitialization. The authors wait until almost halfway through the pagecount before introducing this concept. Since this is the first time in the book a code sample has code that is called by the runtime rather than the reader, I wanted to print a stack trace in the deinitializer and see what it looked like.</summary></entry><entry><title type="html">Swift and Object Oriented Programming</title><link href="/blog/2018/12/21/swift-and-oo.html" rel="alternate" type="text/html" title="Swift and Object Oriented Programming" /><published>2018-12-21T16:30:00-05:00</published><updated>2018-12-21T16:30:00-05:00</updated><id>/blog/2018/12/21/swift-and-oo</id><content type="html" xml:base="/blog/2018/12/21/swift-and-oo.html">&lt;p&gt;One thing I noticed learning Swift is how it’s approach to object
orientation differs from the classical approach I was taught in college,
back when OO was the dominant way of designing software.  This post&lt;/p&gt;

&lt;p&gt;I can’t find any academic papers about “protocol oriented programming”.
How does it differ from “design by contract”?&lt;/p&gt;

&lt;p&gt;I searched the ACM Digital Library for “Protocol Oriented Programming”.
None of the top 50 hits were about the actual thing that Apple’s Swift
developers are talking about.&lt;/p&gt;</content><author><name></name></author><summary type="html">One thing I noticed learning Swift is how it’s approach to object orientation differs from the classical approach I was taught in college, back when OO was the dominant way of designing software. This post</summary></entry><entry><title type="html">Annoyance about learning Swift</title><link href="/blog/2018/12/18/swift-annoyance.html" rel="alternate" type="text/html" title="Annoyance about learning Swift" /><published>2018-12-18T14:30:00-05:00</published><updated>2018-12-18T14:30:00-05:00</updated><id>/blog/2018/12/18/swift-annoyance</id><content type="html" xml:base="/blog/2018/12/18/swift-annoyance.html">&lt;p&gt;I’m pretty sure this is a tell about my mental capacity, but I gotta say
that several features in Swift have the following annoying pattern, at
least in the way they are explained in the official
&lt;a href=&quot;https://docs.swift.org/swift-book/&quot;&gt;Swift Book&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;They explain the full syntax of the feature.  This is very nice,
compact, and readily grasped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But wait, you can do the same thing but simpler with this more
concise syntax.  This starts to get obtuse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But wait, you can do it even more simply with this super concise
syntax.  At this point the syntax itself makes little sense and I
find it hard to grasp.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps it would be better to not spring the 2 and 3 level
simplifications on the reader until they have firmly grasped 1?&lt;/p&gt;

&lt;h2 id=&quot;case-1-closures&quot;&gt;Case 1: Closures&lt;/h2&gt;

&lt;p&gt;The Swift Book helpfully provides the full syntax of closures right at
the front.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(parameters)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, they then go through several, progressively more compact (and
less readily grasped for a beginner) iterations.  At each step along the
way, they point out why the more compact syntax still works, but you
have to keep in your mind other language concepts that are in play to
enable the simplification.  Then there is this cheeky statement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s actually an even shorter way to write the closure expression above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reversedNames = names.sorted(by: &amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, you know all that parameter list, arrow, return type, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; keyword?
In some special cases, you simply don’t need ‘em.  Perhaps if I get
heavily into Swift I will come to like the fact that all that seemingly
important stuff can sometimes be omitted, but for now I would rather not
have to learn when it’s possible to use the compact syntax and just have
to do the verbose syntax all the time.  Stuff like this just seems like
the language is taking on some things I usually let the IDE do.&lt;/p&gt;

&lt;h2 id=&quot;case-2-computed-properties&quot;&gt;Case 2: Computed Properties&lt;/h2&gt;

&lt;p&gt;The Swift Book again shows the full syntax of a computed property, but
only by example.  Then it says, “By the way, if your computed property
happens to be read-only, you can simplify the declaration of a read-only
computed property by removing the get keyword and its braces.”&lt;/p&gt;

&lt;h2 id=&quot;case-3-property-observers-and-the-default-parameter-name&quot;&gt;Case 3: Property Observers and the default parameter name&lt;/h2&gt;

&lt;p&gt;I like the concept of property observers but wonder why they felt the
need to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;oldValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;newValue&lt;/code&gt; default parameter names for
the getter and setter.  Such as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can specify a name for this parameter as part of your willSet
implementation. If you don’t write the parameter name and parentheses
within your implementation, the parameter is made available with a
default parameter name of newValue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you implement a didSet observer, it’s passed a constant parameter
containing the old property value. You can name the parameter or use
the default parameter name of oldValue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is certainly not new to Swift.  Indeed I’ve lamented the same thing
about &lt;a href=&quot;/blog/2010/03/03/perils-8220there8217s-more-one-way-do-it8221.html&quot;&gt;Perl&lt;/a&gt;.  I just
think this “look at how powerful my syntax is with the beautiful
abstractions I’ve made that allow me to state things so simply”
mentality can be taken a bit too far.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m pretty sure this is a tell about my mental capacity, but I gotta say that several features in Swift have the following annoying pattern, at least in the way they are explained in the official Swift Book.</summary></entry><entry><title type="html">Inline RxSwift Observer implementation</title><link href="/blog/2018/12/11/rxswift-observer-inline-impl.html" rel="alternate" type="text/html" title="Inline RxSwift Observer implementation" /><published>2018-12-11T16:00:00-05:00</published><updated>2018-12-11T16:00:00-05:00</updated><id>/blog/2018/12/11/rxswift-observer-inline-impl</id><content type="html" xml:base="/blog/2018/12/11/rxswift-observer-inline-impl.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;My ignorance of the Swift custom of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; feature to
explode the definition of a single protocol across several source files
lead me to misunderstand how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method in RxSwift.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;As I’ve said &lt;a href=&quot;/blog/2017/06/10/neil-ford-microservices-ujug-march-2017.html&quot;&gt;before&lt;/a&gt;, one of the
things I love about working on my current team at Oracle is the
opportunity to learn new things and put them in practice.  Currently
this means learing Swift and RxSwift.  While doing the usual TDD, I
needed to write several tests that exercise the contract of Rx.  This
required a concise way to pass an argument to the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; that allowed making assertions for the &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; cases.  As I say in my talk “Programming
Platform Growth: Table Stakes or Deal Makes?” (which I am blessed to be
giving as a keynote at
&lt;a href=&quot;https://programm.javaland.eu/2019/#/scheduledEvent/570246&quot;&gt;JavaLand 2019&lt;/a&gt;),
a key ingredient of programming platform growth is the welcoming culture
of its developer community.  I have a concrete example here that speaks
well of the Swift community in that regard.&lt;/p&gt;

&lt;p&gt;I was looking for examples of passing an obsever to the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;
method, but all of them passed a single &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt; handler.
&lt;a href=&quot;http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html&quot;&gt;This post&lt;/a&gt;
while educational, is indicative of what I could find.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;observable.subscribe(onNext: {(element) in
  print(element)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What I wanted was to pass a complete implementation of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt; with inline methods for its &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; functions.  I posed the question in the
&lt;a href=&quot;https://rxswift.slack.com/archives/C051G5Y6T/p1544558825273100&quot;&gt;RxSwift slack channel&lt;/a&gt;
and the
&lt;a href=&quot;https://forums.swift.org/t/closure-or-dynamic-protocol-implementation/18739/2&quot;&gt;Swift #Using forum&lt;/a&gt;
and received helpful answers from each.  As a beginner, I failed to
grasp that what looks like an anonymous interface implementation in Java
is actually in invocation of an overloaded method.  You see, in Swift,
it is common to spread out the actual surface area of an API over many
different source files using the Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; feature.  This was
pointed out to me in the swift.org forum post from Adrian Zubarev.  So,
there is an overloaded &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method defined in
&lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType+Extensions.swift&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public func subscribe(onNext: ((E) -&amp;gt; Void)? = nil,
                      onError: ((Swift.Error) -&amp;gt; Void)? = nil,
                      onCompleted: (() -&amp;gt; Void)? = nil,
                      onDisposed: (() -&amp;gt; Void)? = nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is simply a bunch of optional closure parameters, each with their
own signature and default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, on the real-time help front, danielt1263 and Jeremy offered
some very helpful answers that supplement the answer from swift.org, and
which I actually decided to use.  They suggested using the variant of
&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; that takes a closure that takes an &lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt; and returns
&lt;code class=&quot;highlighter-rouge&quot;&gt;Void&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;smalltalk&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;let sub &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;try&lt;/span&gt; getObservable&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #00007f;&quot;&gt;subscribe&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#123;&lt;/span&gt; event in&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;switch event &lt;span style=&quot;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;case let .&lt;span style=&quot;color: #00007f;&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #00007f;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;:&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #00007f;&quot;&gt;onNextCalled&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #7f007f;&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;case let .&lt;span style=&quot;color: #00007f;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #00007f;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;:&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #00007f;&quot;&gt;onErrorCalled&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #7f007f;&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;case .&lt;span style=&quot;color: #00007f;&quot;&gt;completed&lt;/span&gt;:&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #00007f;&quot;&gt;onCompletedCalled&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;&lt;/span&gt;true&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Git Tags and Semver</title><link href="/blog/2018/11/13/semvergittags.html" rel="alternate" type="text/html" title="Git Tags and Semver" /><published>2018-11-13T06:41:00-05:00</published><updated>2018-11-13T06:41:00-05:00</updated><id>/blog/2018/11/13/semvergittags</id><content type="html" xml:base="/blog/2018/11/13/semvergittags.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;Debugging a Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt; problem that turned out to be
incorrectly git tags that did not sort correctly with respect to semver.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;I was trying to run the steps in an internal README to create a “Hello
World” for a simple Swift project and could not understand why some code
that had been removed from an internal dependency was still showing up
in the “Hello World”.  This code had been removed from the most recent
release of the internal dependency.  Upon investigation it turned out
that the git tags for the internal dependency, when sorted using
&lt;a href=&quot;https://semver.org/&quot;&gt;semver&lt;/a&gt;, showed an old release as the most
recent.&lt;/p&gt;

&lt;p&gt;I found it useful to create an alias that outputs the git tags sorted by
semver.  I used the handy &lt;code class=&quot;highlighter-rouge&quot;&gt;semver&lt;/code&gt; npm module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install --verbose --global semver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and with that the following bash function works:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function semvergittags() {
  semver `git tag -l | tr '\n' ' '`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ejburns$ semvergittags
0.1.11
1.0.0-ea07-b0
1.0.0-ea07-b1
1.0.0-ea08-b1
1.0.0-ea11-b1
1.0.0-ea12-b1
1.0.0-ea13
1.0.0-ea14
1.0.0-ea15
1.0.0-ea16
1.0.0-ea17
1.0.0-ea18
1.0.0-ea19
1.0.0-ea20
1.0.0-ea21
1.0.0-ea22
1.0.0-ea23
1.0.0-ea24
1.0.0-ea25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I fixed the git tags using this
&lt;a href=&quot;https://stackoverflow.com/questions/1028649/how-do-you-rename-a-git-tag&quot;&gt;answer from stack overflow&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag new old
git tag -d old
git push origin :refs/tags/old
git push --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I gave the answer an upvote because they shared this additional tip:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, make sure that the other users remove the deleted tag. Please
tell them (co-workers) to run the following command:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --prune --tags&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s the sort of thing that could easily be forgotten and cause more
head scratching.&lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Getting Started with Wireshark</title><link href="/blog/2018/10/29/wireshark-getting-started.html" rel="alternate" type="text/html" title="Getting Started with Wireshark" /><published>2018-10-29T14:00:00-04:00</published><updated>2018-10-29T14:00:00-04:00</updated><id>/blog/2018/10/29/wireshark-getting-started</id><content type="html" xml:base="/blog/2018/10/29/wireshark-getting-started.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;I had never used Wireshark in earnest before today.  Here are some notes
for the next time I have to use it.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;h3 id=&quot;create-a-launcher-that-lets-you-run-multiple-wireshark-windows-at-the-same-time&quot;&gt;Create a launcher that lets you run multiple Wireshark windows at the same time.&lt;/h3&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;Automator&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;run shell script&lt;/code&gt; action to execute this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open -n /Applications/Wireshark.app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Put this in the dock.  Bonus points for using the Cmd-i copy/paste icon
trick.&lt;/p&gt;

&lt;h3 id=&quot;configure-some-useful-columns&quot;&gt;Configure some useful columns&lt;/h3&gt;

&lt;p&gt;This five minute
&lt;a href=&quot;http://quietube7.com/v.php/http://www.youtube.com/watch?v=FHO8SdKighY&quot;&gt;YouTube&lt;/a&gt;
video shows some tips for initial setup of Wireshark.&lt;/p&gt;

&lt;h3 id=&quot;make-sure-you-set-it-up-to-capture-http2&quot;&gt;Make sure you set it up to capture HTTP2&lt;/h3&gt;

&lt;p&gt;From
&lt;a href=&quot;https://github.com/tony612/grpc-elixir/wiki/How-to-capture-HTTP2-packages-using-Wireshark&quot;&gt;this blog post&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    gRPC is based on HTTP/2. So we have to analyze packages to solve some
    difficult problems related to the protocol. This wiki introduces how
    to do this using Wireshark because capturing packages of HTTP/2 is a
    little different with HTTP/TCP.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   Download Wireshark of recent versions.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       Add your port to HTTP protocols:
           Open Preferences
           Select Protocols&amp;gt;HTTP. HTTP2 works too, but HTTP is enough
           Add your HTTP/2 port like(50051) to TCP ports
           Click OK to save the config
       Select(Double click) your network interfaces like Loopback: lo0(local)
       Input http2 in the filter
       Run your gRPC applications
       Stop(Capture&amp;gt;Stop). Then you can analyze the packages or save to a file for using later.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;how-does-it-work-in-general&quot;&gt;How does it work in general?&lt;/h3&gt;

&lt;p&gt;When you start Wireshark, it asks you to select which network
interface(s) from which to capture packets.  If you’re doing localhost
stuff, just doubleclick &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.  It will start showing data.
You can quickly type some text in the “Apply a display filter …” text
area at the top to constrain what sort of information is shown.  For
example, type &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;http2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc&lt;/code&gt; and press enter.  From this
point on, only traffic related to those protocols is shown.  The filter
language is incredibly rich and powerful.&lt;/p&gt;

&lt;h3 id=&quot;using-wireshark-to-debug-grpc-traffic&quot;&gt;Using Wireshark to debug gRPC traffic&lt;/h3&gt;

&lt;p&gt;My current project involves gRPC.  My mentor
&lt;a href=&quot;http://www.notshabby.net/author/Ryan/&quot;&gt;Ryan Lubke&lt;/a&gt; shared the
follomwing tip when using Wireshark to inspect gRPC traffic, distilled
here as an ordered list.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start Wireshark using the launcher above&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Double click &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;..using this filter&lt;/code&gt; text area and press enter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start your gRPC traffic generation.  The window should look like the
following.  Every row in the top pane is a packet of traffic that
passes the filter above.  &lt;img src=&quot;/blog/assets/20181029-wireshark-01.png&quot; alt=&quot;Wireshark image showing gRPC packets&quot; title=&quot;Wireshark with
gRPC packets&quot; /&gt; Note that the title of the window is &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.
Each Wireshark session listens on one network interface.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To see the actual gRPC traffic, right click one packet (row) in the
top pane, and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Follow &amp;gt; TCP Stream&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/20181029-wireshark-02.png&quot; alt=&quot;Wireshark showing follow TCP&quot; title=&quot;Wireshark showing follow
TCP&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The actual HTTP/2 traffic sent over gRPC is shown here:  &lt;img src=&quot;/blog/assets/20181029-wireshark-03.png&quot; alt=&quot;Wireshark image showing gRPC packets&quot; title=&quot;Wireshark with
gRPC packets&quot; /&gt;  The text search feature is extremely useful.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wireshark is an incredibly powerful tool.  It’s worth your time to learn
it well.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Fetchmail Hangs: Approach to Debugging</title><link href="/blog/2018/10/14/fetchmail-hangs.html" rel="alternate" type="text/html" title="Fetchmail Hangs: Approach to Debugging" /><published>2018-10-14T11:00:00-04:00</published><updated>2018-10-14T11:00:00-04:00</updated><id>/blog/2018/10/14/fetchmail-hangs</id><content type="html" xml:base="/blog/2018/10/14/fetchmail-hangs.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Symptom&lt;/em&gt;: Fetchmail hangs when fetching messages.  When it happens in
fetchmail, it happens in Thunderbird as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cause&lt;/em&gt;: Certain messages seem to cause the &lt;code class=&quot;highlighter-rouge&quot;&gt;stbeehive.oracle.com&lt;/code&gt; IMAP
server to hang when fetching headers with the IMAP
(&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-imap-imap4-06&quot;&gt;RFC-1730&lt;/a&gt;)
&lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH 1 RFC822.HEADER&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Resolution&lt;/em&gt;: This is a cheezy workaround: delete the message that
causes the hang and it seems to unblock the rest of the fetching.  You
can do this in Thunderbird or with IMAP directly.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;For the past fifteen years I have been trying to avoid
&lt;a href=&quot;https://www.poets.org/poetsorg/poem/do-not-go-gentle-good-night&quot;&gt;going quietly into that good night&lt;/a&gt;
of using another email program other than my beloved and highly
customized Emacs/VM.  This means occasionally things will just stop
working as the world around me changes and I try to stay the same (at
least as far as
&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/mail-user-agent&quot;&gt;MUAs&lt;/a&gt;
go).  This happened this week: fetchmail would hang.  I observed that
Thunderbird would hang also.&lt;/p&gt;

&lt;h3 id=&quot;diagnosis-steps&quot;&gt;Diagnosis steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Enable verbose when fetching.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetchmail -v -v -f fetchmailrc-oracle
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Observe the IMAP protocol interaction with the server.  For example:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetchmail: IMAP&amp;gt; A0122 FETCH 1 RFC822.HEADER
fetchmail: IMAP&amp;lt; * 1 FETCH (RFC822.HEADER {734}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;In this the case of this particular bug, it would hang on just such a
  header fetch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Experiment with direct IMAP interaction, using the IMAP protocol
interation from the preceding step as a guide.  Log in to the IMAP
server with the following commands:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl s_client -crlf -connect stbeehive.oracle.com:993
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;With this transcript:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A0001 CAPABILITY
+* CAPABILITY IMAP4REV1 IDLE AUTH=PLAIN
+A0001 OK CAPABILITY completed
A0002 LOGIN &quot;email address&quot; &amp;lt;PASSWORD HERE&amp;gt;
+A0002 OK LOGIN completed
A0003 SELECT &quot;INBOX&quot;
+* 90 EXISTS
+* 0 RECENT
+* OK [UIDVALIDITY 4094122] UID validity status
+* OK [UIDNEXT 326362] Predicted next UID
+* FLAGS (\Seen \Deleted \Answered \Forwarded \Redirected \Flagged \Hidden \Draft $MDNSent)
+* OK [PERMANENTFLAGS (\Seen \Deleted \Answered \Forwarded \Redirected \Flagged \Hidden \Draft $MDNSent)] Permanent flags
+A0003 OK [READ-WRITE] SELECT completed
A0004 EXPUNGE
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This technique enabled me to see what was going on.&lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Secrets of the Rockstar Programmers at Orlando JUG, 6pm Thursday 12 July 2018</title><link href="/blog/2018/07/10/orlando-jug-rockstar.html" rel="alternate" type="text/html" title="Secrets of the Rockstar Programmers at Orlando JUG, 6pm Thursday 12 July 2018" /><published>2018-07-10T13:00:00-04:00</published><updated>2018-07-10T13:00:00-04:00</updated><id>/blog/2018/07/10/orlando-jug-rockstar</id><content type="html" xml:base="/blog/2018/07/10/orlando-jug-rockstar.html">&lt;p&gt;I’m blessed with the opportunity to present the current version of my
“Secrets of the Rockstar Programmers” talk at a special edition of the
Orlando Java User’s Group.  JUG leader Mike Levin is even more blessed
with the opportunity to visit &lt;a href=&quot;http://www.jcrete.org/&quot;&gt;JCrete&lt;/a&gt;, and so
chose to re-schedule the July meeting rather than canceling it.&lt;/p&gt;

&lt;p&gt;As usual, there is free pizza!&lt;/p&gt;

&lt;h2 id=&quot;location&quot;&gt;Location&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intrepid Conference Room
Oracle America, Inc.
7453 TG Lee Boulevard
Orlando, FL 32822-4416
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/maps/QGYSUhGpHFS2&quot;&gt;Map Link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rsvps&quot;&gt;RSVPs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codetown.com/events/orlandojug-secrets-of-the-programming-rock-stars&quot;&gt;CODETOWN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/OrlandoJUG/events/252475286/&quot;&gt;MeetUp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;How in the world can I keep up with all this information coming at me
every day?&lt;/p&gt;

&lt;p&gt;What can I do to ensure that I keep bringing value to my employer or
client and to help ensure continued career success?&lt;/p&gt;

&lt;p&gt;What will the practice of software development look like in ten years
time?&lt;/p&gt;

&lt;p&gt;How do I know where to invest time and effort in stewarding my skillset?&lt;/p&gt;

&lt;p&gt;In 2008, Ed Burns interviewed top programmers from a variety of software
disciplines for the book “Secrets of the Rock Star Programmers”. Now
in 2018, Ed revisits the cross section of secrets (aka character
attributes) exhibited by these rockstars for the current world of
programming.&lt;/p&gt;

&lt;p&gt;Join this session to learn more about these characteristics that can
help you become a better programmer.&lt;/p&gt;

&lt;h2 id=&quot;purpose-of-the-talk&quot;&gt;Purpose of the Talk&lt;/h2&gt;

&lt;p&gt;Ed interviews some of the best programmers of our time and shares their
strategies for success.&lt;/p&gt;

&lt;h2 id=&quot;target-audience&quot;&gt;Target Audience&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Any developer wanting to improve their career skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;audience-takeaway&quot;&gt;Audience Takeaway&lt;/h2&gt;

&lt;p&gt;A set of concrete, actionable steps you can take right now to become a
better developer.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m blessed with the opportunity to present the current version of my “Secrets of the Rockstar Programmers” talk at a special edition of the Orlando Java User’s Group. JUG leader Mike Levin is even more blessed with the opportunity to visit JCrete, and so chose to re-schedule the July meeting rather than canceling it.</summary></entry></feed>