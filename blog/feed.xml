<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2018-11-09T12:10:08-05:00</updated><id>/blog/</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">Getting Started with Wireshark</title><link href="/blog/2018/10/29/wireshark-getting-started.html" rel="alternate" type="text/html" title="Getting Started with Wireshark" /><published>2018-10-29T14:00:00-04:00</published><updated>2018-10-29T14:00:00-04:00</updated><id>/blog/2018/10/29/wireshark-getting-started</id><content type="html" xml:base="/blog/2018/10/29/wireshark-getting-started.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;I had never used Wireshark in earnest before today.  Here are some notes
for the next time I have to use it.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;h3 id=&quot;create-a-launcher-that-lets-you-run-multiple-wireshark-windows-at-the-same-time&quot;&gt;Create a launcher that lets you run multiple Wireshark windows at the same time.&lt;/h3&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;Automator&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;run shell script&lt;/code&gt; action to execute this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open -n /Applications/Wireshark.app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Put this in the dock.  Bonus points for using the Cmd-i copy/paste icon
trick.&lt;/p&gt;

&lt;h3 id=&quot;configure-some-useful-columns&quot;&gt;Configure some useful columns&lt;/h3&gt;

&lt;p&gt;This five minute
&lt;a href=&quot;http://quietube7.com/v.php/http://www.youtube.com/watch?v=FHO8SdKighY&quot;&gt;YouTube&lt;/a&gt;
video shows some tips for initial setup of Wireshark.&lt;/p&gt;

&lt;h3 id=&quot;make-sure-you-set-it-up-to-capture-http2&quot;&gt;Make sure you set it up to capture HTTP2&lt;/h3&gt;

&lt;p&gt;From
&lt;a href=&quot;https://github.com/tony612/grpc-elixir/wiki/How-to-capture-HTTP2-packages-using-Wireshark&quot;&gt;this blog post&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    gRPC is based on HTTP/2. So we have to analyze packages to solve some
    difficult problems related to the protocol. This wiki introduces how
    to do this using Wireshark because capturing packages of HTTP/2 is a
    little different with HTTP/TCP.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   Download Wireshark of recent versions.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       Add your port to HTTP protocols:
           Open Preferences
           Select Protocols&amp;gt;HTTP. HTTP2 works too, but HTTP is enough
           Add your HTTP/2 port like(50051) to TCP ports
           Click OK to save the config
       Select(Double click) your network interfaces like Loopback: lo0(local)
       Input http2 in the filter
       Run your gRPC applications
       Stop(Capture&amp;gt;Stop). Then you can analyze the packages or save to a file for using later.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;how-does-it-work-in-general&quot;&gt;How does it work in general?&lt;/h3&gt;

&lt;p&gt;When you start Wireshark, it asks you to select which network
interface(s) from which to capture packets.  If you’re doing localhost
stuff, just doubleclick &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.  It will start showing data.
You can quickly type some text in the “Apply a display filter …” text
area at the top to constrain what sort of information is shown.  For
example, type &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;http2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc&lt;/code&gt; and press enter.  From this
point on, only traffic related to those protocols is shown.  The filter
language is incredibly rich and powerful.&lt;/p&gt;

&lt;h3 id=&quot;using-wireshark-to-debug-grpc-traffic&quot;&gt;Using Wireshark to debug gRPC traffic&lt;/h3&gt;

&lt;p&gt;My current project involves gRPC.  My mentor
&lt;a href=&quot;http://www.notshabby.net/author/Ryan/&quot;&gt;Ryan Lubke&lt;/a&gt; shared the
follomwing tip when using Wireshark to inspect gRPC traffic, distilled
here as an ordered list.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start Wireshark using the launcher above&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Double click &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;..using this filter&lt;/code&gt; text area and press enter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start your gRPC traffic generation.  The window should look like the
following.  Every row in the top pane is a packet of traffic that
passes the filter above.  &lt;img src=&quot;/blog/assets/20181029-wireshark-01.png&quot; alt=&quot;Wireshark image showing gRPC packets&quot; title=&quot;Wireshark with
gRPC packets&quot; /&gt; Note that the title of the window is &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.
Each Wireshark session listens on one network interface.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To see the actual gRPC traffic, right click one packet (row) in the
top pane, and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Follow &amp;gt; TCP Stream&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/20181029-wireshark-02.png&quot; alt=&quot;Wireshark showing follow TCP&quot; title=&quot;Wireshark showing follow
TCP&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The actual HTTP/2 traffic sent over gRPC is shown here:  &lt;img src=&quot;/blog/assets/20181029-wireshark-03.png&quot; alt=&quot;Wireshark image showing gRPC packets&quot; title=&quot;Wireshark with
gRPC packets&quot; /&gt;  The text search feature is extremely useful.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wireshark is an incredibly powerful tool.  It’s worth your time to learn
it well.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Fetchmail Hangs: Approach to Debugging</title><link href="/blog/2018/10/14/fetchmail-hangs.html" rel="alternate" type="text/html" title="Fetchmail Hangs: Approach to Debugging" /><published>2018-10-14T11:00:00-04:00</published><updated>2018-10-14T11:00:00-04:00</updated><id>/blog/2018/10/14/fetchmail-hangs</id><content type="html" xml:base="/blog/2018/10/14/fetchmail-hangs.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Symptom&lt;/em&gt;: Fetchmail hangs when fetching messages.  When it happens in
fetchmail, it happens in Thunderbird as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cause&lt;/em&gt;: Certain messages seem to cause the &lt;code class=&quot;highlighter-rouge&quot;&gt;stbeehive.oracle.com&lt;/code&gt; IMAP
server to hang when fetching headers with the IMAP
(&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-imap-imap4-06&quot;&gt;RFC-1730&lt;/a&gt;)
&lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH 1 RFC822.HEADER&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Resolution&lt;/em&gt;: This is a cheezy workaround: delete the message that
causes the hang and it seems to unblock the rest of the fetching.  You
can do this in Thunderbird or with IMAP directly.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;For the past fifteen years I have been trying to avoid
&lt;a href=&quot;https://www.poets.org/poetsorg/poem/do-not-go-gentle-good-night&quot;&gt;going quietly into that good night&lt;/a&gt;
of using another email program other than my beloved and highly
customized Emacs/VM.  This means occasionally things will just stop
working as the world around me changes and I try to stay the same (at
least as far as
&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/mail-user-agent&quot;&gt;MUAs&lt;/a&gt;
go).  This happened this week: fetchmail would hang.  I observed that
Thunderbird would hang also.&lt;/p&gt;

&lt;h3 id=&quot;diagnosis-steps&quot;&gt;Diagnosis steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Enable verbose when fetching.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetchmail -v -v -f fetchmailrc-oracle
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Observe the IMAP protocol interaction with the server.  For example:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetchmail: IMAP&amp;gt; A0122 FETCH 1 RFC822.HEADER
fetchmail: IMAP&amp;lt; * 1 FETCH (RFC822.HEADER {734}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;In this the case of this particular bug, it would hang on just such a
  header fetch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Experiment with direct IMAP interaction, using the IMAP protocol
interation from the preceding step as a guide.  Log in to the IMAP
server with the following commands:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl s_client -crlf -connect stbeehive.oracle.com:993
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;With this transcript:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A0001 CAPABILITY
+* CAPABILITY IMAP4REV1 IDLE AUTH=PLAIN
+A0001 OK CAPABILITY completed
A0002 LOGIN &quot;email address&quot; &amp;lt;PASSWORD HERE&amp;gt;
+A0002 OK LOGIN completed
A0003 SELECT &quot;INBOX&quot;
+* 90 EXISTS
+* 0 RECENT
+* OK [UIDVALIDITY 4094122] UID validity status
+* OK [UIDNEXT 326362] Predicted next UID
+* FLAGS (\Seen \Deleted \Answered \Forwarded \Redirected \Flagged \Hidden \Draft $MDNSent)
+* OK [PERMANENTFLAGS (\Seen \Deleted \Answered \Forwarded \Redirected \Flagged \Hidden \Draft $MDNSent)] Permanent flags
+A0003 OK [READ-WRITE] SELECT completed
A0004 EXPUNGE
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This technique enabled me to see what was going on.&lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Secrets of the Rockstar Programmers at Orlando JUG, 6pm Thursday 12 July 2018</title><link href="/blog/2018/07/10/orlando-jug-rockstar.html" rel="alternate" type="text/html" title="Secrets of the Rockstar Programmers at Orlando JUG, 6pm Thursday 12 July 2018" /><published>2018-07-10T13:00:00-04:00</published><updated>2018-07-10T13:00:00-04:00</updated><id>/blog/2018/07/10/orlando-jug-rockstar</id><content type="html" xml:base="/blog/2018/07/10/orlando-jug-rockstar.html">&lt;p&gt;I’m blessed with the opportunity to present the current version of my
“Secrets of the Rockstar Programmers” talk at a special edition of the
Orlando Java User’s Group.  JUG leader Mike Levin is even more blessed
with the opportunity to visit &lt;a href=&quot;http://www.jcrete.org/&quot;&gt;JCrete&lt;/a&gt;, and so
chose to re-schedule the July meeting rather than canceling it.&lt;/p&gt;

&lt;p&gt;As usual, there is free pizza!&lt;/p&gt;

&lt;h2 id=&quot;location&quot;&gt;Location&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intrepid Conference Room
Oracle America, Inc.
7453 TG Lee Boulevard
Orlando, FL 32822-4416
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/maps/QGYSUhGpHFS2&quot;&gt;Map Link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rsvps&quot;&gt;RSVPs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codetown.com/events/orlandojug-secrets-of-the-programming-rock-stars&quot;&gt;CODETOWN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/OrlandoJUG/events/252475286/&quot;&gt;MeetUp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;How in the world can I keep up with all this information coming at me
every day?&lt;/p&gt;

&lt;p&gt;What can I do to ensure that I keep bringing value to my employer or
client and to help ensure continued career success?&lt;/p&gt;

&lt;p&gt;What will the practice of software development look like in ten years
time?&lt;/p&gt;

&lt;p&gt;How do I know where to invest time and effort in stewarding my skillset?&lt;/p&gt;

&lt;p&gt;In 2008, Ed Burns interviewed top programmers from a variety of software
disciplines for the book “Secrets of the Rock Star Programmers”. Now
in 2018, Ed revisits the cross section of secrets (aka character
attributes) exhibited by these rockstars for the current world of
programming.&lt;/p&gt;

&lt;p&gt;Join this session to learn more about these characteristics that can
help you become a better programmer.&lt;/p&gt;

&lt;h2 id=&quot;purpose-of-the-talk&quot;&gt;Purpose of the Talk&lt;/h2&gt;

&lt;p&gt;Ed interviews some of the best programmers of our time and shares their
strategies for success.&lt;/p&gt;

&lt;h2 id=&quot;target-audience&quot;&gt;Target Audience&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Any developer wanting to improve their career skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;audience-takeaway&quot;&gt;Audience Takeaway&lt;/h2&gt;

&lt;p&gt;A set of concrete, actionable steps you can take right now to become a
better developer.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m blessed with the opportunity to present the current version of my “Secrets of the Rockstar Programmers” talk at a special edition of the Orlando Java User’s Group. JUG leader Mike Levin is even more blessed with the opportunity to visit JCrete, and so chose to re-schedule the July meeting rather than canceling it.</summary></entry><entry><title type="html">JavaLand 2018 Holly Cummins</title><link href="/blog/2018/03/12/javaland-holly-cummins.html" rel="alternate" type="text/html" title="JavaLand 2018 Holly Cummins" /><published>2018-03-12T04:45:00-04:00</published><updated>2018-03-12T04:45:00-04:00</updated><id>/blog/2018/03/12/javaland-holly-cummins</id><content type="html" xml:base="/blog/2018/03/12/javaland-holly-cummins.html">&lt;p&gt;Holly leads the &quot;Cloud Garage&quot; at IBM, working with customers to
  create solutions when moving to the cloud.&lt;/p&gt;

&lt;p&gt;Holly gives the summary of the &quot;Cloudy With A Chance Of Meatballs&quot;
  movie.&lt;/p&gt;

&lt;p&gt;Story of the hero who wanted to make the world better, but ended up
  making some mistakes.&lt;/p&gt;

&lt;p&gt;Cites Joseph Campbell, who observed the commonalities among the
world's myths.  He finds the recurring themes among them.  He formed the
idea of the &quot;monomyth&quot;.  There is actually only one story: the
  quest.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;all to action
	  &lt;/p&gt;&lt;/li&gt;

     	  &lt;li&gt;&lt;p&gt;obstacles
	  &lt;/p&gt;&lt;/li&gt;
          
         &lt;li&gt;&lt;p&gt;reward
	  &lt;/p&gt;&lt;/li&gt;

	&lt;/ul&gt;

&lt;p&gt;Observes we are the hero of our own story.&lt;/p&gt;

&lt;p&gt;Some aspects of being that with respect to being a developer.&lt;/p&gt;

&lt;p&gt;Listed some rockstar programmer skills: automate, tools mastery, etc.&lt;/p&gt;

&lt;h2&gt;Hero stories for the cloud&lt;/h2&gt;

&lt;p&gt;Long deploy times.&lt;/p&gt;

&lt;h2&gt;But what about the obstacles&lt;/h2&gt;

&lt;p&gt;Adoption is still not complete.  Relates this to the hero's &quot;call to
  action&quot;.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Security fears&lt;/p&gt;

            &lt;p&gt;Bank: Watson discovery.  The crawler that populates the
              ML by putting all the data in the cloud.&lt;/p&gt;

            &lt;p&gt;But you must encrypt it.&lt;/p&gt;

            &lt;p&gt;In the traditional stack, the dev is responsible for the
            security of their code.  In the cloud, the entire stack,
            including the OS, is the built artifact.  So the developer
            must take responsibility for OS patches, and everything on
            up through the stack.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Cloud-nativeness&lt;/p&gt;

            &lt;p&gt;Definition: it's not just centralized computing.&lt;/p&gt;

            &lt;p&gt;History lesson: tty, mirocomputer, client-server, PC,
            Grid computing, laptops, cloud, edge computing.  She used a
              sine wave to cover what I often depict as a pendulum.&lt;/p&gt;

            &lt;p&gt;CNCF: Containerized, Dynamically orchestrated, microservices
              oriented.&lt;/p&gt;

            &lt;p&gt;Holly adds: elasticity and agility, as well as assuming
              everything is unreliable.&lt;/p&gt;

            &lt;p&gt;JVM considerations: the traditional Rafael Benevides
              concerns: containers get killed.&lt;/p&gt;

            &lt;p&gt;Logging: the need for data analytics simply to get access
              to the logs.  Prometheus.&lt;/p&gt;

            &lt;p&gt;Microservices are hard.  They seem like a great idea, but
            when you try them.  Here is where she brings back in the
              meatball movie.&lt;/p&gt;

            &lt;p&gt;Cost for Kubernetes clusters, especially if you fail to
              tear them down when you are done.&lt;/p&gt;

            &lt;p&gt;Needing a cloud to manage your cloud.&lt;/p&gt;

          &lt;/li&gt;

	&lt;/ul&gt;

        &lt;h3&gt;Trends&lt;/h3&gt;

&lt;p&gt;QaaS quantum as a service&lt;/p&gt;

&lt;p&gt;renewed interest in IaaS because the I can have super expensive
  hardware, such as GPU loaded machines.&lt;/p&gt;

&lt;h3&gt;Cloud Native Thinking&lt;/h3&gt;

&lt;p&gt;Digital Native analogy&lt;/p&gt;</content><author><name></name></author><summary type="html">Holly leads the &quot;Cloud Garage&quot; at IBM, working with customers to create solutions when moving to the cloud.</summary></entry><entry><title type="html">JavaLand 2018 Arun Gupta Service Discovery In Container Orchestration Frameworks</title><link href="/blog/2018/03/12/javaland-arun-gupta.html" rel="alternate" type="text/html" title="JavaLand 2018 Arun Gupta Service Discovery In Container Orchestration Frameworks" /><published>2018-03-12T03:00:00-04:00</published><updated>2018-03-12T03:00:00-04:00</updated><id>/blog/2018/03/12/javaland-arun-gupta</id><content type="html" xml:base="/blog/2018/03/12/javaland-arun-gupta.html">&lt;p&gt;On a cold and wet morning in Phantasialand, my old pal Arun Gupta
gave The first regular session at JavaLand 2018.  There was an
impressive number of attendees, considering the early hour, even before
  the opening greeting from DOAG CEO Fried Saacke.&lt;/p&gt;

&lt;p&gt;Speaker Bio&lt;/p&gt;

&lt;p&gt;The need for service discovery.  How else can services know how to
communicate with other services?  The need for this is even more acute
in the cloud when the location and cardinality of the services is highly
dynamic.  This works best with stateless services.&lt;/p&gt;

&lt;p&gt;Examples: Docker Swarm, Kubernetes, Amazon ECS, Mesosphere&lt;/p&gt;

&lt;h2&gt;Docker Swarm&lt;/h2&gt;

&lt;p&gt;Docker for AWS.  A cloud formation template, automatic multi-host
cluster.  Well integrated with AWS constructs: autoscaling, load
  balancing, logs in CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker service create --replicas 3 --name web jboss/wildfly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The default: master and four nodes.  Three replicas mean you get
  three replicas of the whole five nodes.&lt;/p&gt;

&lt;h3&gt;Routing Mesh&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker service create --replicas 3 --name web -p 8080:8080 jboss/wildfly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The addition of the port configures the load balancer&lt;/p&gt;

&lt;h3&gt;Docker Compose File&lt;/h3&gt;

&lt;p&gt;Defines the docker stack, containing your services.&lt;/p&gt;

&lt;h2&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;CNCF project&lt;/p&gt;

&lt;p&gt;Box diagram of parts of the Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Scheduler and Controller Manager watch the etcd, because the etcd is
  easily watchable.&lt;/p&gt;

&lt;p&gt;The labels are in etcd, this allows the pods and services to be
  loosely coupled.&lt;/p&gt;

&lt;p&gt;We need an ingress LB that allows your service to be seen from the
  outside.&lt;/p&gt;

&lt;p&gt;Arun: 57% of K8s in the world runs on AWS.&lt;/p&gt;</content><author><name></name></author><summary type="html">On a cold and wet morning in Phantasialand, my old pal Arun Gupta gave The first regular session at JavaLand 2018. There was an impressive number of attendees, considering the early hour, even before the opening greeting from DOAG CEO Fried Saacke.</summary></entry><entry><title type="html">JavaOne 2017 Wrap Up</title><link href="/blog/2017/11/30/javaone-2017-wrapup.html" rel="alternate" type="text/html" title="JavaOne 2017 Wrap Up" /><published>2017-11-30T08:00:00-05:00</published><updated>2017-11-30T08:00:00-05:00</updated><id>/blog/2017/11/30/javaone-2017-wrapup</id><content type="html" xml:base="/blog/2017/11/30/javaone-2017-wrapup.html">&lt;p&gt;Last year, at JavaOne 2016, I had the honor of unlocking
the &lt;a href=&quot;https://www.oracle.com/javaone/rock-star-wall-of-fame.html#burns&quot;&gt;JavaOne
Rockstar&lt;/a&gt; achievement.  2017 was my first JavaOne after that, and I
can say that the experience wasn't any different from the previous
sixteen or so years I've been blessed to speak: exhausting, informative
and inspiring.  This blog post reviews the sessions I attended and
  presented and shares my thoughts and notes if I have them.&lt;/p&gt;

&lt;h2&gt;Sessions&lt;/h2&gt;

&lt;p&gt;The Sunday of JavaOne has always been a day for the Java community to
  shine and share their work and highlights from the previous year.
  This year, the day was formally labeled &quot;Developer Community Day&quot;.
  Some differences from last year: it was not formally billed as
  &quot;NetBeans Day&quot;, all the talks were from non-Oracle speakers, all from
  the community, there was a whole lot of JUG content, there were
  several &quot;career focused&quot; talks.&lt;/p&gt;

&lt;h3&gt;Sunday&lt;/h3&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON2197&amp;showEnrolled=false&quot;&gt;Java, the JCP, and You [CON2197]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Heather Vancura, director of the JCP, asked me to co-present at this
session about how to get involved in the JCP, the official way that the
community brings its ideas into the Java platform.  The JCP is better
than ever at this job, so with Java EE moving to the Eclipse Foundation
as EE4J, it is a very exciting time for the Java Community Process.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://oracle.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON5074&quot;&gt;Event Sourcing with JVM Languages [CON5074]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rahul Somasunderam shared his experiences working with Event
Sourcing, a technique of treating logs as the source of truth for a
software system, rather than some other kind of persistent store such as
a database.  Rahul has created
the &lt;a href=&quot;https://github.com/rahulsom/grooves&quot;&gt;Grooves&lt;/a&gt; framework
to provide this abstraction.  Here are my raw notes.  The presentation
  is available in the content catalog link above.  The presentation source is available at &lt;a href=&quot;https://bit.ly/2017-es&quot;&gt;bit.ly/2017-es&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  
&lt;p&gt;Needed a java based event sourcing solution, looked around in 2016,
  nothing fit.&lt;/p&gt;

&lt;p&gt;Definition: treat your database like you treat your logs.&lt;/p&gt;

&lt;p&gt;Everyone is comfortable looking at logs.  Log files: you can create
  entrys and read them.  You cannot update or delete entries.&lt;/p&gt;

&lt;p&gt;Bad example 1: bank account balance.  @Transactional usage.&lt;/p&gt;

&lt;p&gt;Scan of old school German bank passbook.  Great example of a log.
  This is what event sourcing should be doing in any domain.&lt;/p&gt;

&lt;p&gt;But that was banking.  If you look at your logs and debug your
application, you are doing event sourcing in your mind.  Banks defined
  their business model hundreds of years ago.&lt;/p&gt;

&lt;p&gt;Aggregate: Account.  Events: Transcation, AtmWithdrawl.  Snapshot:
  AccountSummary.&lt;/p&gt;

&lt;p&gt;Computing snapshots: S sub N = f(S0, E1..EN)&lt;/p&gt;

&lt;p&gt;The way to take your log and play it forward.&lt;/p&gt;

&lt;p&gt;Incremental snapshots.  Use an existing Snapshot as an input entry in
  computing a new snapshot.&lt;/p&gt;

&lt;p&gt;Revert.  You can't delete events but you can have new events that
  represent deletes.&lt;/p&gt;

&lt;p&gt;Bad Example 2: Joins in event sourcing.&lt;/p&gt;

&lt;p&gt;Grooves domain objects: Aggregates.  Also uses RxJava
  Observables.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;Some code examples that basically show how to do ORM using
	  this thing.
	  &lt;/li&gt;


          &lt;li&gt;&lt;p&gt;There is an API for querying, creating snapshots, using
          annotations.
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Handling Errors.  Allows best effort approach.
	  &lt;/p&gt;&lt;/li&gt;


	&lt;/ul&gt;


&lt;p&gt;Great example: Lance Armstrong Tour de France victories.  Question:
How many Tour de France victories does he have?  The answer depends on
  when you ask the question.&lt;/p&gt;

&lt;p&gt;Be very careful what your events look like.  It's very hard to modify
  them.&lt;/p&gt;

&lt;p&gt;Non event sources of data.  When the intent of the user is not clear
  from the datasource.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Other Sessions of Note:&lt;/p&gt;

&lt;p&gt;Mon: 17:30 CON7474 ES, Distributed Systems, and CQRS with Java EE.&lt;/p&gt;

&lt;p&gt;Tue: 13:15 CON4083 Async by Default, Synchronous when Necessary&lt;/p&gt;

&lt;p&gt;Wed: 14:45 CON4277 Three Microservices Patterns to Tear Down Your Monoliths&lt;/p&gt;

&lt;p&gt;Needed a java based event sourcing solution, looked around in 2016,
  nothing fit.&lt;/p&gt;

&lt;p&gt;Definition: treat your database like you treat your logs.&lt;/p&gt;

&lt;p&gt;Everyone is comfortable looking at logs.  Log files: you can create
  entrys and read them.  You cannot update or delete entries.&lt;/p&gt;

&lt;p&gt;Bad example 1: bank account balance.  @Transactional usage.&lt;/p&gt;

&lt;p&gt;Scan of old school German bank passbook.  Great example of a log.
  This is what event sourcing should be doing in any domain.&lt;/p&gt;

&lt;p&gt;But that was banking.  If you look at your logs and debug your
application, you are doing event sourcing in your mind.  Banks defined
  their business model hundreds of years ago.&lt;/p&gt;

&lt;p&gt;Aggregate: Account.  Events: Transcation, AtmWithdrawl.  Snapshot:
  AccountSummary.&lt;/p&gt;

&lt;p&gt;Computing snapshots: S sub N = f(S0, E1..EN)&lt;/p&gt;

&lt;p&gt;The way to take your log and play it forward.&lt;/p&gt;

&lt;p&gt;Incremental snapshots.  Use an existing Snapshot as an input entry in
  computing a new snapshot.&lt;/p&gt;

&lt;p&gt;Revert.  You can't delete events but you can have new events that
  represent deletes.&lt;/p&gt;

&lt;p&gt;Bad Example 2: Joins in event sourcing.&lt;/p&gt;

&lt;p&gt;Grooves domain objects: Aggregates.  Also uses RxJava
  Observables.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;Some code examples that basically show how to do ORM using
	  this thing.
	  &lt;/li&gt;


          &lt;li&gt;&lt;p&gt;There is an API for querying, creating snapshots, using
          annotations.
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Handling Errors.  Allows best effort approach.
	  &lt;/p&gt;&lt;/li&gt;


	&lt;/ul&gt;


&lt;p&gt;Great example: Lance Armstrong Tour de France victories.  Question:
How many Tour de France victories does he have?  The answer depends on
  when you ask the question.&lt;/p&gt;

&lt;p&gt;Be very careful what your events look like.  It's very hard to modify
  them.&lt;/p&gt;

&lt;p&gt;Non event sources of data.  When the intent of the user is not clear
  from the datasource.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Other Sessions of Note:&lt;/p&gt;

&lt;p&gt;Mon: 17:30 CON7474 ES, Distributed Systems, and CQRS with Java EE.&lt;/p&gt;

&lt;p&gt;Tue: 13:15 CON4083 Async by Default, Synchronous when Necessary&lt;/p&gt;

&lt;p&gt;Wed: 14:45 CON4277 Three Microservices Patterns to Tear Down Your Monoliths&lt;/p&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON7615&amp;showEnrolled=false&quot;&gt;Secrets of Rock Star Developers (and How to Become One!) [CON7615]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I was invited to co-present at this session by my good
friend &lt;a href=&quot;https://code4.life/&quot;&gt;Bruno Souza&lt;/a&gt; regarding some
lessons in my book &lt;a href=&quot;http://ridingthecrest.com/&quot;&gt;Secrets of the
Rock Star Developers&lt;/a&gt;.  Bruno also invited Yuji Kubota, a developer
from NTT in Japan.  Yuji shared his experiences in achieving developer
  proficiency in spite of his complete hearing impairment.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON7624&amp;showEnrolled=false&quot;&gt;Powerful Lessons from Top Java EE Experts [CON7624]
&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I was invited to participate in this panel discussion
by &lt;a href=&quot;http://eldermoraes.com/&quot;&gt;Elder Moraes&lt;/a&gt;, who is now
working for Oracle to continue to advance Java EE 8 in the community in
Brazil.  I was a bit skeptical about the prospects of this panel because
Elder had invited fourteen (14!) people to be panelists.  Perhaps he did
  not expect us all to show up, but 13 of us did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20171001-con7615.jpg&quot; alt=&quot;Image of panelists&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My records show Elder, Adam Bien, Bruno Souza, David Heffelfinger,
Edson Yanaga, Ivar Grimstad, Steve Millidge, Kevin Sutter, Reza Rahman,
and Ruslan Synytsky&lt;/p&gt;

&lt;p&gt;With that large number of people, and only an hour, it was a wonder
we were coherent at all, but I guess it speaks to the quality of the
Java EE community's ability to collaborate that we had a productive and
informative session.  Of course, the big news was the decision by Oracle
to invest in handing off the IP of its Java EE JSRs, as of version Java
EE 8, to the Eclipse Foundation to be the basis of a new top level
project
there: &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j&quot;&gt;EE4J&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Monday&lt;/h3&gt;

&lt;p&gt;I started the day off with booth duty.  This year, the conference was
back at Moscone, but at Moscone West.  The exhibit area was much larger
than the hotel space at the Hilton Union Square from previous years.  My
booth demo was a part of the new Serverless Fn project booth, but it was
only runnable when I was in the booth, as it was a last minute
  addition.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON2022&amp;showEnrolled=false&quot;&gt;Servlet 4.0: A New Twist on an Old Favorite [CON2022]
&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This was one of my three conference sessions I had the opportunity to
present.  The slides are in the content catalog at the previous
link, and the video
is &lt;a href=&quot;https://www.youtube.com/watch?v=k4tSKHH63fE&quot;&gt;at YouTube&lt;/a&gt;.
With the announcement of EE4J, Oracle is getting out of the business of
leading Java EE specs, so this was very likely the last time I presented
about Servlet at JavaOne.  You never know what the future holds, but I
approached it that way and gave it my all.  I hope that comes across in
  the video.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.oracle.com/javaone/keynotes.html#monday&quot;&gt;Java Keynote&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This was the big one.  The full video is
at &lt;a href=&quot;https://www.youtube.com/watch?v=UNg9lmk60sg&quot;&gt;YouTube&lt;/a&gt;.
  Big announcements included:&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;EE4J
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Debut of the &lt;a href=&quot;https://fnproject.io&quot;&gt;Fn Project&lt;/a&gt;
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Demonstration of Project Jafar, Cloud Performance
          Tuning and flight recorder
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Demonstration
	  of &lt;a href=&quot;http://www.wercker.com/java&quot;&gt;Oracle Wercker&lt;/a&gt;
	  cloud container native development pipeline system.  Wercker
	  allows you to build, deploy, and operate Kubernetes based
	  containerized cloud applications.
	  &lt;/p&gt;&lt;/li&gt;
          
	  &lt;li&gt;&lt;p&gt;Java SE 9 final release overview
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Announcement of new release model for Java: every 6th
	  months.  This brought along with it a new naming scheme: YY.M.
	  That means the next release is 18.3.
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;There was also an interesting keynote from Intel VP of
          System Technologies Michael Green.  Mr. Green's keynote starts at &lt;a href=&quot;https://www.youtube.com/watch?v=UNg9lmk60sg#t=34m59s&quot;&gt;34:59&lt;/a&gt;
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;There were some nifty demos at the beginning of the
          keynote.
	  &lt;/p&gt;&lt;/li&gt;

	&lt;/ul&gt;

        &lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON3920&amp;showEnrolled=false&quot;&gt;Building a Serverless State Service for the Cloud with Java 9 [CON3920]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This session is the one I was most excited to give, because it is the
future for me at Oracle.  After being allowed to finish Java EE 8
(thanks in no small part to the community and Oracle's attentiveness to
it), I was given the opportunity to join the team responsible
for &lt;a href=&quot;http://www.oracle.com/technetwork/middleware/coherence/overview/&quot;&gt;Oracle
Coherence&lt;/a&gt;.  This team is building a new state service for the cloud,
based on Coherence, but with a much simpler API.  In fact, you can think
of it as an API-less service since it will be exposed with cloud enabled
implementations of existing Java 8 collections data structures, with
some additions for things not present in the case of an entirely local
collection.  Unfortunately, this talk was not recorded, but the slides
  are available in the content catalog link above.&lt;/p&gt;

&lt;h3&gt;Tuesday&lt;/h3&gt;

&lt;p&gt;I did another spell of booth duty in the morning, as well as a panel
discussion on the DevLive stage with Heather Vancura, Antoine-Sabot
Durand, and Linda DeMichiel.  The interview is
  at &lt;a href=&quot;https://www.youtube.com/watch?v=cTaBUu6C47U&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=IGN7979&amp;showEnrolled=false&quot;&gt;Ignite Session [IGN7979]: Java Your Next Theremin, among other talks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Nilson, leader of the Silicon Valley JUG and wonderful guy
organized an &quot;Ignite Session&quot; again.  I'd never done one before, but
after the one I attended at DevoxxUS in April I felt I could do it.  The
idea with an Ignite session is you get 5 minutes to present your talk.
In that five minutes you get 20 slides, each advancing every 15 seconds,
on auto-advance.  I gave a talk
about &lt;a href=&quot;https://static.rainfocus.com/oracle/oow17/sess/1504978192376001CTLb/PF/20171003-javaone-lightning-theremin_1507731853795001sVbN.pptx&quot;&gt;building
a Theremin&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Wednesday&lt;/h3&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON2023&amp;showEnrolled=false&quot;&gt;Contemporary Java Web Applications with JSF 2.3 [CON2023]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This was the most monentous talk for me personally.  Fifteen years,
six months, and seven days after giving my first JavaOne talk about JSF
I gave what is likely to be my last, for the same reason as with
Servlet.  But don't dismay, the future is bright for JSF.  JSF is in the
first batch of projects to be handed off to EE4J, and it will very
  likely be taken forward by JSF community expert Arjan Tijms.&lt;/p&gt;

&lt;p&gt;Slides are above and video is &lt;a href=&quot;https://www.youtube.com/watch?v=yshXLB_HdhU&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Thursday&lt;/h3&gt;

&lt;p&gt;Not having to deliver any sessions, speak to any customers, do any
booth duty, or sit-in for any guest spots, I was able to attend sessions
  today.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.oracle.com/javaone/keynotes.html#thursday&quot;&gt;Java Community Keynote&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20171005-community-keynote.jpg&quot; alt=&quot;Image of Duke's Choice Award Winners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This fun keynote is available
at &lt;a href=&quot;https://www.oracle.com/javaone/on-demand.html?bcid=5604479599001&quot;&gt;Oracle&lt;/a&gt;.&lt;/p&gt;


&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1706&amp;showEnrolled=false&quot;&gt;Services, Assemble! Apply MVP Principles to Create Microservices Without Chaos [CON1706]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This talk by my friend Mark Heckler talked about how to apply MVP
  (Minimum Viable Product) principles to create cutting-edge
  Microservices without chaos with Spring Cloud/Netflix OSS&lt;/p&gt;

&lt;p&gt;Here are my raw notes.&lt;/p&gt;

	&lt;ul&gt;

&lt;p&gt;@MkHeck&lt;/p&gt;

&lt;p&gt;Glad you're here to the end.&lt;/p&gt;

&lt;p&gt;Listed some Pivotal products: Spring.&lt;/p&gt;

&lt;p&gt;Who am I silde.&lt;/p&gt;

&lt;p&gt;Likes Microservices, becuse it addresses many of the problems of the
  Monoliths.&lt;/p&gt;
&lt;p&gt;Analogy of Microservices to the Avengers.  Together they are more
than the sum of the parts.  They come together to form a resilient
  system.&lt;/p&gt;

&lt;p&gt;Enablers: Monoliths are simpler from the outside.  Microservices
introduces a lot of complexity.  Enablers: Spring Boot and Spring Cloud.
Spring Boot is your onramp in becoming productive in the cloud.  Any
  place you can deploy a JVM, you can deploy Spring Boot.&lt;/p&gt;

&lt;p&gt;Spring Cloud OSS&lt;/p&gt;

&lt;p&gt;Operational: config, service registry, circuit breaker, load
balancer, intelligent router, asyc messaging, distributed tracing,
security/oauth.&lt;/p&gt;

&lt;p&gt;Impl: Spring Cloud Config, Netflix Eureaka, Netflix Hystrix, Netflix
Ribbon, Netflix Zuul, Spring Cloud Stream, Spring Cloud Sleuth, Spring
  Cloud Security&lt;/p&gt;

&lt;p&gt;With a good circuit breaker, you can nest them.&lt;/p&gt;

&lt;p&gt;Demo: start.spring.io.  Lots of extolling the virtues of this web
  app.&lt;/p&gt;


&lt;p&gt;application.properties, renamed to bootstrap.properties&lt;/p&gt;

&lt;p&gt;Pointed out 80/20 rule.&lt;/p&gt;

&lt;p&gt;Zuul plays a role of deompising a monolith.&lt;/p&gt;

&lt;/ul&gt;


&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1439&amp;showEnrolled=false&quot;&gt;Container: Check! But What About Persistent Data, Big Data, and Fast Data?! [CON1439]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This session, by two of the engineers behind Mesosphere and Apache
Mesos, used the 16 bit video game &quot;The Secret of Monkey Island&quot; to
explore the challenges in running stateless services at scale in the
  real world that has state.  Here are my raw notes.&lt;/p&gt;

	&lt;ul&gt;

&lt;p&gt;Joerg Schad and Johaness Unterstein&lt;/p&gt;

&lt;p&gt;Monkey Island theme.&lt;/p&gt;

&lt;p&gt;It all began with a monolith&lt;/p&gt;

&lt;p&gt;Hardware, OS, app&lt;/p&gt;

&lt;p&gt;Hardware, OS, web app&lt;/p&gt;

&lt;p&gt;add horizontal scaling: Hardware, OS, app&lt;/p&gt;

&lt;p&gt;add services under web app.&lt;/p&gt;

&lt;p&gt;Add VMs under OS, and IaaS underVMs&lt;/p&gt;

&lt;p&gt;Replace web app with finer services: Microservices.  Predefined
  interfaces where each is defined to do one thing pretty good.&lt;/p&gt;

&lt;p&gt;Add containers on top of OS: Put more services on each OS
node. Spreadsheet scheduling.&lt;/p&gt;

&lt;p&gt;Container scheduling comes into play.  Resource management.&lt;/p&gt;

&lt;p&gt;Service management: collections of containers.  Excellent pictures of
  containers from container ships sitting in row boats.&lt;/p&gt;

&lt;p&gt;Health and readiness checks.  Health check, &quot;I am ready to serve
  traffic&quot;.&lt;/p&gt;

&lt;p&gt;But how do we get containers into production&lt;/p&gt;

&lt;p&gt;DC/OS maven plugin: mvn docker:build docker:push dcos:deploy&lt;/p&gt;

&lt;p&gt;Or mvn package dcos:uploadArtifact dcos:deployUCR&lt;/p&gt;

&lt;p&gt;MapReduce is crunching Data&lt;/p&gt;

&lt;p&gt;Data Processing: SMACK stack.  1. Events 2. Ingest (Kafka) 3. Store
  (Cassandra) 4. Analyze (Spark) 5. Act (Akka)&lt;/p&gt;

&lt;p&gt;Demo of running DC/OS on AWS.  &lt;/p&gt;

	&lt;/ul&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1416&amp;showEnrolled=false&quot;&gt;Modern Java Recipes [CON1416]&lt;/a&gt;&lt;/h4&gt;
        
&lt;p&gt;The last session of the show, for me, and for many folks, was given
by my fripnd and
fellow &lt;a href=&quot;https://www.facebook.com/nullpointersband/&quot;&gt;NullPointer&lt;/a&gt;
Ken Koussen.  Ken is an excellent instructor and is so good at
explaining complex topics.  Ken has a new book of the same name as this
talk, and he was kind enough to sport me a copy in exchange for a meal
at
cash-only &lt;a href=&quot;https://www.yelp.com/biz/tommys-joynt-san-francisco&quot;&gt;Tommy's
Joynt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are my raw notes.&lt;/p&gt;

&lt;ul&gt;

  &lt;p&gt;Ken Koussen&lt;/p&gt;

&lt;p&gt;A few slides of self promition.&lt;/p&gt;

&lt;p&gt;github.com/koussen/java_8_recipes&lt;/p&gt;

&lt;p&gt;github.com/koussen/java_9_recipes&lt;/p&gt;

&lt;p&gt;The Basics&lt;/p&gt;

&lt;p&gt;streams, lambdas, method references&lt;/p&gt;

&lt;p&gt;Beyond the basics&lt;/p&gt;

&lt;p&gt;Lazy Streams&lt;/p&gt;

&lt;p&gt;The peek method&lt;/p&gt;

&lt;p&gt;Strings as Streams&lt;/p&gt;

&lt;p&gt;anyMatch, allMatch, noneMatch&lt;/p&gt;

&lt;p&gt;collect and reduce&lt;/p&gt;

&lt;p&gt;flatMap vs. Map&lt;/p&gt;

&lt;p&gt;Optional&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Functional interfaces&lt;/p&gt;

&lt;p&gt;taken as given&lt;/p&gt;

&lt;p&gt;Steam produces sequence of elements.  Does not store them.  Does not
  modify them.  Produces new items.  Operations lazy when possible.
  Once you hit a terminal, that stream is done.&lt;/p&gt;

&lt;p&gt;If you use a stream in a method, it should be created in that method.&lt;/p&gt;

&lt;p&gt;operations from source to pipeline.  No items are pulled from source
  until terminal operation is reached.&lt;/p&gt;

&lt;p&gt;Shows the lazyness.  findFirst() is a short circuiting terminal
  operations.&lt;/p&gt;

&lt;p&gt;Debugging with the peek() method.  IntelliJ has a nice plugin called
  StreamDebugger.&lt;/p&gt;

&lt;p&gt;peek() is like .map(n -&gt; { sop(n.entry); } );&lt;/p&gt;

&lt;p&gt;Strings as Streams&lt;/p&gt;

&lt;p&gt;aside: of() method.&lt;/p&gt;

&lt;p&gt;Workaround.  chars() and codePoints() on String.&lt;/p&gt;

&lt;p&gt;codePoints() returns a stream.  &lt;/p&gt;

&lt;code&gt;&lt;pre&gt;
    s.toLowerCase().codePoints().filter().collect(appendCodePoint).toString()
&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;Three argument Collect.&lt;/p&gt;

&lt;/ul&gt;

&lt;p&gt;I was literally the last person to leave the conference baggage area,
as shown in this pic of my lone bag with a member of the Marriott Hotel
  Staff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20171005-last-bag.jpg&quot; alt=&quot;Ed's Bag Is Last&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Goodbye JavaOne.  I hope to see you again next year.&lt;/p&gt;</content><author><name></name></author><summary type="html">Last year, at JavaOne 2016, I had the honor of unlocking the JavaOne Rockstar achievement. 2017 was my first JavaOne after that, and I can say that the experience wasn't any different from the previous sixteen or so years I've been blessed to speak: exhausting, informative and inspiring. This blog post reviews the sessions I attended and presented and shares my thoughts and notes if I have them.</summary></entry><entry><title type="html">JAX-RS 2.1 New Feature Introduction: Server Sent Events Update</title><link href="/blog/2017/10/16/jax-rs-2_1-new-feature-update.html" rel="alternate" type="text/html" title="JAX-RS 2.1 New Feature Introduction: Server Sent Events Update" /><published>2017-10-16T10:00:00-04:00</published><updated>2017-10-16T10:00:00-04:00</updated><id>/blog/2017/10/16/jax-rs-2_1-new-feature-update</id><content type="html" xml:base="/blog/2017/10/16/jax-rs-2_1-new-feature-update.html">&lt;p&gt;I don't know what this says about my memory, but I was doing a little
JAX-RS programming today and when I googled to remind myself of the
particular feature I was using, I ran into &lt;a href=&quot;/blog/2017/02/22/jax-rs-2_1-new-feature-introduction.html&quot;&gt;my own blog
post&lt;/a&gt; about that feature.  It took me a moment to recall that I had
  written that earlier blog post.  I wonder if I'll forget writing this
  one as well?&lt;/p&gt;

&lt;p&gt;Anyhow, both that post and the other one I found, written
  by &lt;a href=&quot;https://www.linkedin.com/in/pavel-bucek-16284614/&quot;&gt;JAX-RS
  Spec Lead Pavel Bucek&lt;/a&gt;
  &amp;lt;&lt;a href=&quot;https://blogs.oracle.com/pavelbucek/jax-rs-21-server-sent-events&quot;&gt;https://blogs.oracle.com/pavelbucek/jax-rs-21-server-sent-events&lt;/a&gt;&amp;gt;
  are now stale with respect to the final version of JAX-RS 2.1.  I
  looked into
  the &lt;a href=&quot;https://github.com/javaee/glassfish-samples&quot;&gt;GlassFish
  Samples&lt;/a&gt; for a similar and simple example, but found none, so I
  took the opportunity to add two samples based on updated content from
  Pavel's and my blog posts.  Please clone it to see the full source
  code.  This blog post documents these two super simple samples.&lt;/p&gt;

&lt;h2&gt;The Simplest JAX-RS SSE Example&lt;/h2&gt;

&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;@Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; SSESimpleResource &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Resource&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; ManagedExecutorService executor&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @GET&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;eventStream&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Produces&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;MediaType.&lt;span style=&quot;color: #006633;&quot;&gt;SERVER_SENT_EVENTS&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; eventStream&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; SseEventSink eventSink,&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; Sse sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; executor.&lt;span style=&quot;color: #006633;&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;SseEventSink sink &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; eventSink&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;event1&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;event2&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;event3&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Athrowable+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Throwable&lt;/span&gt;&lt;/a&gt; e&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e.&lt;span style=&quot;color: #006633;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Asystem+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;System&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

  &lt;p&gt;Line 4 is a magic injection of
  the &lt;code&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/enterprise/concurrent/ManagedExecutorService.html&quot;&gt;ManagedExecutorService&lt;/a&gt;&lt;/code&gt;.
  This class is only available in the full profile of Java EE, not the
  web profile.  This sort of service is essential for doing SSE because
  it's the easiest way to hand off the socket for the incoming SSE
  subscription request to a service that can handle the scale of such a
  resource intensive thing.&lt;/p&gt;

  &lt;p&gt;Line 9 and neighboring annotations make it so the HTTP GET Request
  to &quot;/eventStream&quot; will return content-type text/event-stream.  Lines
  11 and 12 are more magic to get handles to the JAX-RS 2.1 APIs for
  SSE.  &lt;code&gt;SseEventSink&lt;/code&gt; lets you send stuff down to the
  browser.  &lt;code&gt;Sse&lt;/code&gt; is a factory for other classes in the SSE
  API.  Line 14 is a try-with-resources that lets the sink be
    autoclosable.&lt;/p&gt;

&lt;p&gt;Let's take a look at the corresponding HTML.&lt;/p&gt;

&lt;div class=&quot;xml&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; if(typeof(EventSource) !== &amp;quot;undefined&amp;quot;) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var source = new EventSource(&amp;quot;app/eventStream&amp;quot;);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; source.onmessage = function(event) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML += event.data + &amp;quot;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;br&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML = &amp;quot;Sorry, your browser does not support server-sent events...&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;/script&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;h1&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;SSE sample&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;/h1&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;/div&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;The JavaScript on lines 1 - 10 connects to the server when the page
  loads and installs an SSE event handler that appends the data of each
  SSE to the div on line 14.&lt;/p&gt;

&lt;h2&gt;Broadcasting to Multiple Clients&lt;/h2&gt;

&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;@Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; SSEBroadcastResource &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; Sse sse&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; SseBroadcaster sseBroadcaster&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @PostConstruct&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; postConstruct&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; SseBroadcaster getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;Sse sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;==&lt;/span&gt; sseBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sseBroadcaster &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; sse.&lt;span style=&quot;color: #006633;&quot;&gt;newBroadcaster&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; sseBroadcaster&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @GET&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;subscribe&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Produces&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;MediaType.&lt;span style=&quot;color: #006633;&quot;&gt;SERVER_SENT_EVENTS&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; subscribe&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;@&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; SseEventSink eventSink&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEvent&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;welcome!&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;register&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;eventSink&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @POST&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;broadcast&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Consumes&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;MediaType.&lt;span style=&quot;color: #006633;&quot;&gt;APPLICATION_FORM_URLENCODED&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; broadcast&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;@FormParam&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt; event&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;broadcast&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, event&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Another example in Pavel's Blog that didn't quite work as written is
  the &lt;code&gt;SseBroadcaster&lt;/code&gt; example.  Above is one that works.  Note the use of the static &lt;code&gt;getBroadcaster()&lt;/code&gt; method and forcing it to be pre-invoked before the resource is put into service through the use of &lt;code&gt;@PostConstruct&lt;/code&gt; on lines 7 - 10.&lt;/p&gt;

&lt;p&gt;As with the first example, the GET request sets up the SSE, sending
  an initial event.  The new hting is handing off the servicing of the
  SSE to the handy &lt;code&gt;SseBroadcaster&lt;/code&gt; on line 24.&lt;/p&gt;

&lt;p&gt;This resource also listens for POST requests, on lines 27 - 32.  It
  takes the form data and simply broadcasts it out to the SSE.  The HTML
  is next.&lt;/p&gt;

&lt;div class=&quot;html4strict&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/script.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;script&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; var i = 1;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; if(typeof(EventSource) !== &amp;quot;undefined&amp;quot;) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var source = new EventSource(&amp;quot;app/subscribe&amp;quot;);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; source.onmessage = function(event) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML += event.data + &amp;quot;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/br.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;br&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;input&amp;quot;).value = i++ + &amp;quot; &amp;quot; +&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; navigator.userAgent;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML = &amp;quot;Sorry, your browser does not support server-sent events...&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; function submit() {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var params = &amp;quot;data=&amp;quot; + document.getElementById(&amp;quot;input&amp;quot;).value;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var url = document.getElementById(&amp;quot;form&amp;quot;).action;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var xhr = new XMLHttpRequest();&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xhr.open(&amp;quot;POST&amp;quot;, url);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xhr.setRequestHeader(&amp;quot;Content-type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xhr.send(params);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/script.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;script&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/form.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;form&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;app/broadcast&amp;quot;&lt;/span&gt; &amp;nbsp;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/input.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;input&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/form.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;form&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/button.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;button&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;onclick&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;submit()&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;POST&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/button.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;button&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/h1.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;h1&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;SSE sample&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/h1.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;h1&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/div.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;div&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/div.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;div&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Lines 1 - 12 are mostly the same as in the first example.  Lines 14 -
  20 are new.  The &lt;code&gt;submit()&lt;/code&gt; function uses Ajax to send a
  POST to the server (lines 23 - 28 in the Java listing).  The value of
  the &lt;code&gt;data&lt;/code&gt; form data comes from the hidden field, and
  is initialized on line 7.  I just
  use &lt;code&gt;navigator.userAgent&lt;/code&gt; for novelty.&lt;/p&gt;

&lt;p&gt;Each click of the &lt;code&gt;POST&lt;/code&gt; button causes a POST to be sent
  to the server, which in turn causes an SSE to be sent back to the
  client.  For extra fun, you could open up two tabs on the same page
  and see that pressing POST on one causes the data to be updated on
  both pages.&lt;/p&gt;

&lt;p&gt;Thanks to Pavel Bucek
  and &lt;a href=&quot;https://www.linkedin.com/in/santiago-pericas-geertsen-905685/&quot;&gt;Santigo
  Pericas-Geertsen&lt;/a&gt; for stewarding the JAX-RS community to deliver a
  very useful piece of Java EE 8.&lt;/p&gt;</content><author><name></name></author><summary type="html">I don't know what this says about my memory, but I was doing a little JAX-RS programming today and when I googled to remind myself of the particular feature I was using, I ran into my own blog post about that feature. It took me a moment to recall that I had written that earlier blog post. I wonder if I'll forget writing this one as well?</summary></entry><entry><title type="html">Podcast: Mark and Sweep Episode 1: James Gosling</title><link href="/blog/2017/09/16/mark-and-sweep-episode-01-james-gosling.html" rel="alternate" type="text/html" title="Podcast: Mark and Sweep Episode 1: James Gosling" /><published>2017-09-16T10:00:00-04:00</published><updated>2017-09-16T10:00:00-04:00</updated><id>/blog/2017/09/16/mark-and-sweep-episode-01-james-gosling</id><content type="html" xml:base="/blog/2017/09/16/mark-and-sweep-episode-01-james-gosling.html">&lt;p&gt;&lt;img width=&quot;330&quot; height=&quot;294&quot; src=&quot;/blog/assets/rockstar-square-off-heap-5-people.jpeg&quot; alt=&quot;Image of
movie theater with audience looking at rockstar book cover&quot; /&gt; I'm very
pleased to announce the continuation of my &quot;Secrets of the Rockstar
Programmers&quot; project in the form of a podcast.  This latest stage in the
project is delivered using a guest-episode format graciously hosted by
my good friends at &lt;a href=&quot;http://www.javaoffheap.com/&quot;&gt;The Java
OffHeap Podcast&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;The episodes will be a part of an occasional &quot;Mark and Sweep&quot; segment
  where I will join the OffHeap gang to revisit and discuss audio clips
  of his interviews with some of the early 21st century's top enterprise
  programmers.  This occasional guest segment will include interviews
  from my 2008 McGraw-Hill book
  &quot;&lt;a href=&quot;http://ridingthecrest.com/&quot;&gt;Secrets of the Rock Star
  Programmers&lt;/a&gt;&quot; as well as new interviews with contemporary experts.
  The gang and I will reflect on the observations in the interview in
  the contemporary context.
&lt;/p&gt;

&lt;p&gt;In the first episode, Freddy and I review the interview with James
Gosling, &quot;Father of Java&quot;.  Topics explored include the subversive
origin of Java, the benefit of starting in a new field as it is
maturing, the origin of creativity, and the importance of telling signal
  from noise.&lt;/p&gt;

&lt;p&gt;Please use any of the following buttons to get the show.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;itms://itunes.apple.com/us/podcast/offheaps-mark-sweep-episode-1-lets-hear-about-beginning/id985064111?i=1000391898137&amp;mt=2&quot;&gt;&lt;img src=&quot;/blog/assets/itunes-podcast-button.png&quot; alt=&quot;Image of itunes podcast button&quot; /&gt;&lt;/a&gt;

&lt;a href=&quot;http://www.javaoffheap.com/2017/09/offheaps-mark-and-sweep-episode-1-lets.html&quot;&gt;&lt;img src=&quot;/blog/assets/off-heap-button.gif&quot; alt=&quot;offheap podcast button&quot; /&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name></name></author><summary type="html">I'm very pleased to announce the continuation of my &quot;Secrets of the Rockstar Programmers&quot; project in the form of a podcast. This latest stage in the project is delivered using a guest-episode format graciously hosted by my good friends at The Java OffHeap Podcast.</summary></entry><entry><title type="html">Notes from Neil Ford Microservices at UJUG March 2017</title><link href="/blog/2017/06/10/neil-ford-microservices-ujug-march-2017.html" rel="alternate" type="text/html" title="Notes from Neil Ford Microservices at UJUG March 2017" /><published>2017-06-10T10:00:00-04:00</published><updated>2017-06-10T10:00:00-04:00</updated><id>/blog/2017/06/10/neil-ford-microservices-ujug-march-2017</id><content type="html" xml:base="/blog/2017/06/10/neil-ford-microservices-ujug-march-2017.html">&lt;p&gt;One of the great things about working at Oracle is the high calibre
of one's coworkers, and one of the best is my
colleague &lt;a href=&quot;http://www.manorrock.com /blog/&quot;&gt;Manfred Riem&lt;/a&gt;.
Manfred shared this &lt;a href=&quot;http://ujug.org/about/&quot;&gt;UJUG&lt;/a&gt; recording
of &lt;a href=&quot;https://twitter.com/neal4d&quot;&gt;Neal Ford's&lt;/a&gt; talk at their
March meeting:
&amp;lt;&lt;a href=&quot;https://www.periscope.tv/UtahJava/1OdJrgAkgRnxX?t=11m59s&quot;&gt;https://www.periscope.tv/UtahJava/1OdJrgAkgRnxX?t=11m59s&lt;/a&gt;&amp;gt;.
  This blog post covers my notes and impressions of the session.&lt;/p&gt;

&lt;h2&gt;Introduction: What came before Microservices&lt;/h2&gt;

&lt;p&gt;Microservices cannot be divorced from the engineering practices, such as
DevOps.&lt;/p&gt;

&lt;p&gt;Contrast Microservices with what came before: SOA.  Microservices is a label
not description.  Contrast to SOA: which is gargantuan.&lt;/p&gt;

&lt;p&gt;SOA: abstract enterprise-level coarse-grained services.&lt;/p&gt;

&lt;p&gt;Implementation of these services: reusable as possible.  Enable the
business users to compose the services because the services have been
written so well to be reusable.&lt;p&gt;

&lt;p&gt;Some one-off services as well: authentication, identity, etc.&lt;/p&gt;

&lt;p&gt;Message Bus: really important to enable this reuse.&lt;/p&gt;

&lt;p&gt;Why build these?  &quot;Resume driven development&quot;?  Goal: maximize reuse.
Maximize canonicalitym aka DRY.  Aside: this appears to be a
manifestation of Eric Evan's UNIVERSAL LANGUAGE concept.&lt;/p&gt;

&lt;p&gt;Constraints of SOA: incremental change is hard with SOA.  The context in
which SOA grew up.  Predated Open Source.  Everything was proprietary.
OS were very heavyweight: resources and licenses.  Operation was very
complex.&lt;/p&gt;

&lt;p&gt;&quot;&lt;a href=&quot;http://nealford.com/memeagora/2015/03/30/architecture_is_abstract_until_operationalized.html&quot;&gt;Architecture
is an abstraction until you operationalize it.&lt;/a&gt;&quot;&lt;/p&gt;

&lt;p&gt;I like how he explicitly called out that a key aspect of the
architecture is how it interacts with the environment around it.
Analogy of taking the deployed system, unplugging it, putting it in the
closet, waiting a year, and plugging it back in.  This brings in the
dimension of time (2D -&amp;gt; 3D -&amp;gt; 4D) to the architecture.  This is
what he means by operationalized.&lt;/p&gt;

&lt;h2&gt;What problem are we trying to solve with Microservices?&lt;/h2&gt;

&lt;p&gt;Plug for Evans DDD and Vaughn Vernon Implementing DDD.&lt;/p&gt;

&lt;p&gt;Defines the Bounded Context idea.  It's a business process, such as
  &quot;customer checkout&quot;.  No one outside the context is able to know the
  impl details of the inside.  Combine this with Humble and Farley
  (Continuous Delivery) and you get the Microservices Architecture.&lt;/p&gt;

&lt;p&gt;Diagram that shows API layer.  This is optional, but acts as a
  facade that imposes the bounded context boundary.  It is not a part
  of an ESB.  This is where he delivers the &quot;everyone provides their
  own persistence&quot; requirement. &lt;/p&gt;

&lt;h2&gt;Characteristics&lt;/h2&gt;

&lt;p&gt;Monoliths vs. Microservices.  Difference in how the achieve scale.
Monoliths, everyone shares the same stuff, so you achieve scale through
clustering.  In Microservices, how you achieve scale is to add more
instances.  This is a manifestation of the importance if putting things
  in the right place.  In the SOA: scaling is an architectural
  problem.  Really, it should be an ops problem.&lt;/p&gt;

&lt;p&gt;Products, not Projects.  This is the Conway's law thing.  You build
  it, you run it.  Teams do not span products.  Teams maintain the same
  product for their lifetime.  This responsibility makes people confront
  the consequences of their actions.  &lt;code&gt;It eliminates the ability
  to &lt;a href=&quot;http://www.wisegeek.com/what-are-externalized-costs.htm&quot;&gt;externalize
  costs&lt;/a&gt;&lt;/code&gt;.  He notes as an aside that propogating model changes
  across services is very hard, though.&lt;/p&gt;

&lt;p&gt;&quot;Inverse Conway Movement&quot; Organize teams by bounded contexts, rather
  than skillset.  Accept Conway's law as a fact of life, build teams
  accordingly.&lt;/p&gt;

&lt;p&gt;Smart endpoints and dumb pipes.  REST or messaging (what about
  gRPC?) Whatever you choose, you do have to standardize on it.
  Embrace polyglot solutions where sensible.  (Plugs Sam Newman's
  book).&lt;/p&gt;

&lt;p&gt;Aside on the challenges of &quot;everyone provides their own persistence&quot;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt;
  vs. &lt;a href=&quot;https://en.wikipedia.org/wiki/Eventual_consistency&quot;&gt;BASE&lt;/a&gt;
  (CAP Theorem).  &quot;We have made our users think that transactions are a
  natural part of the universe, but they are not.&quot;  Starbucks example.
  ATM example: batch reconciliation.  He takes pot shots at the need for
  transactions, saying &quot;maybe seats on an airplane&quot; need them.  I
  disagree.  Transactions are useful in any case where there is a lot of
  contention: event tickets, auctions, manufacturing automation and
  more.  But, with Microservices, you want to try to avoid transactions.
  That I agree with.  &lt;code&gt;When defining bounded contexts, when you get
  to the point when you say, &quot;if we get any smaller than that, we'll
  have to do a distributed transaction,&quot; that's when you stop
  and &lt;a href=&quot;https://www.reddit.com/r/gratefuldead/comments/1cxxk1/whats_your_favorite_rendition_of_take_a_step_back/&quot;&gt;take
  a step back&lt;/a&gt; and that's where you have a boundary.&lt;/code&gt;  This is
  more reliable than your class diagram.&lt;/p&gt;

&lt;p&gt;Decentralized governance: an aside that you can change your
  persistence within a bounded context and no-one outside it cares.
  Without this, because everyone shares everything, we have to choose an
  RDBMS that works for the aspect of the system that has the hardest
  problems, while the rest of the system may not need that much
  power.  Same for all aspects (MQ, etc).  Everyone is suffering from
  the maximum complexity.  Microservices allows more fine grained
  rightsizing.&lt;/p&gt;

&lt;p&gt;Brief plug for CICD.&lt;/p&gt;

&lt;p&gt;Microservices tries to avoid having something like a &quot;customer
  service&quot;.  Rather, each service has its own notion of customer.  It
  turns out this is not as bad as you might think, because the right
  decomposition of bounded contexts means that the notion of customer
  can be conveyed as messages, without defining a customer as a
  service.  &lt;/p&gt;

&lt;p&gt;&quot;The more resuable code it is, the less usable it is.&quot;  In other
  words, the more cases it serves, the less it is for one case.
  Mentioned the old IBM San Francisco Project, which gave birth to
  J2EE.  Neal felt it was the stupidest idea ever.  Well, I don't know
  about that, but the idea did have very big consequences.&lt;/p&gt;

&lt;p&gt;Service orchestration.  This is necessary because we don't have
  transactions.  This
  is &lt;a href=&quot;http://microservices.io/patterns/data/event-sourcing.html&quot;&gt;Chris
  Richardson's saga concept&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;Benefits of Microservices&lt;/h3&gt;

&lt;p&gt;Maximize easy evolution.  Make changes without breaking
  stuff.  &lt;code&gt;Microservices is the first architecture style developed
  after the acceptance of continuous delivery (aka DevOps)&lt;/code&gt;.
  Also allows you to optimize only what matters.&lt;/p&gt;

&lt;p&gt;Tends to be asynchronous from birth.  This allows amazon to stay
  within their boredom threshold, the point where users will lose
  interest and go somewhere else, which is lost money.  &quot;Prefer timely
  partial over slow complete&quot;.&lt;/p&gt;

&lt;p&gt;Integration vs. disintegration.  &quot;Complected deployments&quot; to
  intertwine things.  Components are deployed and features are released.
  This allows us to monitor traffic and see which features are actually
  needed, allowing empirical determination of which features you can
  safely disintegrate.  (Economically, because features are teams, this
  also means which employees you can lay off because they are not
  delivering value.  I argue this is a more compelling reason for
  companies.)&lt;/p&gt;

&lt;p&gt;How big?  The more services you have, the lower you drive down your
  risk per service release.  But this does not address the complexity
  tax of having all those services.&lt;/p&gt;

&lt;h3&gt;Engineering Practices&lt;/h3&gt;

&lt;p&gt;Design for failure, monitoring.  Monitoring is harder in
  Microservices, but at least there is good tool support: ELK, etc.
  This includes log aggregation.&lt;/p&gt;

&lt;p&gt;Mention of &quot;synthetic transactions&quot;.  This plus monitoring is how
  you debug.&lt;/p&gt;

&lt;p&gt;Mention of &quot;correlation ids&quot;.  Again, debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pragprog.com/book/mnee/release-it&quot;&gt;Release It!&lt;/a&gt;
  &quot;Everything in this book is considered bible in this world&quot; Circuit
  Breakers, bulkheads, timeouts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Engineering consistency.  Share nothing except: how the services
  integrate (REST vs message bus vs. RPC).  The other is actual system
  services technologies: monitoring, logging, identity.  This is the
  &quot;service template&quot; idea.  Dropwizard or SpringBoot help with
    this.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Testing.  The testing pyramid.  Unit, Integration, Component,
  End-to-end, exploratory.  Unit testing: sociable (real live objects)
  and solitary (mocks).  Integration testing: gateway, protocol level.
  Database integration.  Component testing: build a diagnostic mode into
  your services.  Inproctester or plasma.  Consumer Driven Contracts:
  Each endpoint defines the contract that the other side must adhere to
  and codifies that into a test, which is a release gate for the other
  endpoint.  This appears to be the microservices equivalent of an IDE
  alerting you that when you change the signature of a method all the
  callsites that now break.  Pact, Pacto, Janus.  Implicit assumption
  that you have sufficient engineering maturity.  Eveyone is good at
  writing tests, keeping the build green, etc.  End-to-end testing:
  focus on personas and user journeys.  &lt;/p&gt;

&lt;p&gt;Deployment technologies.  As advanced as Docker containers or as
  simple as executable jars.&lt;/p&gt;

&lt;p&gt;Don't let changes build up, get things into production as quickly as
possible.  With all the other CD stuff, deploying is actually anti
  risky, since you have feature toggles or routes.&lt;/p&gt;

&lt;p&gt;Service discovery: Consul, etcd, zookeeper.  Why service discovery?
Neal says it's for elastic scaling.  I would have liked to have seen
  more on this.&lt;/p&gt;

&lt;p&gt;Service visualization: Spigo, from Netflix.&lt;/p&gt;

&lt;p&gt;Tools: Plug
  for &lt;a href=&quot;http://devopsbookmarks.com/&quot;&gt;http://devopsbookmarks.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neal asserts you must be doing all the things in Humble and Farley
  before you even attempt microservices.  He enumerated what can happen
  if you attempt it before mastery of Humble and Farley.  &quot;If you get
  sloppy, it gets bad fast&quot;. (A rescue consultant's
  dream) See &lt;a href=&quot;http://www.codingthearchitecture.com/presentations/sa2015-modular-monoliths&quot;&gt;Simon
  Brown's Modular Monoliths&lt;/a&gt;
  and &lt;a href=&quot;http://www.adam-bien.com/roller/abien/entry/the_perfect_javaee_microservice&quot;&gt;Adam
  Bien's Java EE Microservice&lt;/a&gt; for some things you might want to
  look at before taking the jump to Microservices.  In both cases, the
  question, &quot;if you can't build a monolith correctly, what makes you
  think that Microservices are the answer?&quot; is implicitly asked.&lt;/p&gt;

&lt;p&gt;Is there a middle ground between SOA and Microservices?  Yes:
  &lt;a href=&quot;https://www.infoq.com/news/2016/10/service-based-architecture&quot;&gt;service
  based architectures&lt;/a&gt;.  You have much fatter services.  The &quot;every
  service has its own persistence&quot; rule is relaxed.  Integration
  hub: the mere introduction of an ESB to a system. &lt;/p&gt;

&lt;p&gt;More migration paths.  Partitioning along natural boundaries.  Use
  tools like xray or jdepend to anaylze your monolith to see how to
  start decomposing.  Look at the transactional boundaries to see the
  bounded contexts.  If your system relies heavily on transactions, it
  may not be a good candidate for Microservices.  Maybe consider
  service-based.  Start with a small number of larger services first.
  Get the low hanging fruit.&lt;/p&gt;

&lt;p&gt;Trotted out the realestate.com.au example from Newman.  A great
  example but I won't cover it here.&lt;/p&gt;

&lt;p&gt;Efferent coupling: first time I've heard this term since college.  I
  must be two deep inside OS, language and runtime vendors.  Having low
  efferent coupling means having a minimal number of dependencies.&lt;/p&gt;

&lt;p&gt;Neal's new
  book: &lt;a href=&quot;http://evolutionaryarchitecture.com/&quot;&gt;Evolutionary Architecture&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">One of the great things about working at Oracle is the high calibre of one's coworkers, and one of the best is my colleague Manfred Riem. Manfred shared this UJUG recording of Neal Ford's talk at their March meeting: &amp;lt;https://www.periscope.tv/UtahJava/1OdJrgAkgRnxX?t=11m59s&amp;gt;. This blog post covers my notes and impressions of the session.</summary></entry><entry><title type="html">Java Offheap Podcast Future of Java Part II at Goto Chicago 2017</title><link href="/blog/2017/06/05/javaoffheap-goto-part2.html" rel="alternate" type="text/html" title="Java Offheap Podcast Future of Java Part II at Goto Chicago 2017" /><published>2017-06-05T08:00:00-04:00</published><updated>2017-06-05T08:00:00-04:00</updated><id>/blog/2017/06/05/javaoffheap-goto-part2</id><content type="html" xml:base="/blog/2017/06/05/javaoffheap-goto-part2.html">&lt;p&gt;I had the honor to be a guest
on &lt;a href=&quot;http://www.javaoffheap.com/&quot;&gt;Java OffHeap&lt;/a&gt;
(&lt;a href=&quot;http://www.twitter.com/offheap&quot;&gt;@offheap&lt;/a&gt;) while
attending &lt;a href=&quot;/blog/2017/04/19/goto-chicago-picks.html&quot;&gt;Goto Chicago 2017&lt;/a&gt;.  I am also
happy to announce that I am in talks with the OffHeap guys to have an
occasional guest segment on their program, tentatively called &quot;Mark and
Sweep&quot; where we will feature audio content from the existing interviews
from my book &lt;a href=&quot;http://ridingthecrest.com/purchase.html&quot;&gt;Secrets
of the Rockstar Programmers&lt;/a&gt; as well as new interviews with
additional thought leaders.&lt;/p&gt;

&lt;p&gt;The link to the episode
is &lt;code&gt;&amp;lt;&lt;a href=&quot;http://www.javaoffheap.com/2017/05/episode-24-nothing-like-sweet-home.html&quot;&gt;http://www.javaoffheap.com/2017/05/episode-24-nothing-like-sweet-home.html&lt;/a&gt;&amp;gt;&lt;/code&gt;,
but this post is my summary and notes, including the segment with
&lt;a href=&quot;https://twitter.com/javaFXpert&quot;&gt;Jim Weaver&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/deanwampler&quot;&gt;Dean Wampler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Part I, with &lt;a href=&quot;https://twitter.com/gsaab&quot;&gt;Georges Saab&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/edburns&quot;&gt;I&lt;/a&gt;, is
&lt;a href=&quot;/blog/2017/05/25/javaoffheap-goto-part1.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Part II: Dean Wampler and Jim Weaver&lt;/h2&gt;

&lt;p&gt;51:18 Introductions&lt;/p&gt;

&lt;p&gt;53:38 Bob polls the audience about alternative JVM languages.&lt;/p&gt;

&lt;p&gt;54:12 What happens if JDK 9 flops?  Dean asserts the microservices
movement is a threat to the JVM because it exposes how bloated JVM apps
typically are.  Go and Rust: are a factor of 10/100 smaller.  55:04 But
why does it matter if it's not a cost savings?  55:42 Dean points out
that it matters at google scale.  56:00 Bob: jlink can help with this.
56:50 Freddy: if we use jlink with Jigsaw, will Scala be smaller?  57:24
Dean answers, but not quite, and points out that Lightbend does track
JDK releases closely, citing lambda integration in a recent Scala
  release.&lt;/p&gt;

&lt;p&gt;57:15 Freddy: other threats? 57:46
  Bob: &lt;a href=&quot;https://www.meetup.com/en-AU/ChicagoJUG/events/237330076/&quot;&gt;Azul's
  Paul Nauman&lt;/a&gt;: complexity of the JVM is the JVM's worst enemy.
  58:28 Freddy, but that's true for every language.&lt;/p&gt;

&lt;p&gt;59:20 Dean: another risk: Apparent with SPARK: the appeal of DSLs.
  1:00:00 Bob: but what about debugging?  Also, SPARK and massive heap
  sizes.  1:01:20 SPARK realized the JMM is great for general purpose,
  but if you have a billion of the same thing, there is no need for that
  complexity.  1:02:30 Bob: Code rot is another risk to the ecosystem.
  People stop maintaining stuff, but the stuff is still very widely
  used.  1:03:26 Freddy tells his JavaScript story: there's three of
  everything: npm, bower do the same thing.  In spite of this JavaScript
  is still #1.  1:05 Dean: npm is using Rust for its scalability behind
  the scenes.  1:06:15 It's the old open vs. closed argument.&lt;/p&gt;

&lt;p&gt;1:08:07 Bob ASF: Not a problem to have multiple projects that do the
  same thing.  But you still need the JCP side to guarantee
  interoperability. 1:08:49 Jim Weaver adds that competition is good.
  1:09:50 when you run JDK on AWS, it is OpenJDK.  1:10:26 Bob: there
  are things in place in the JDK to prevent fragmentation.&lt;/p&gt;

&lt;p&gt;1:11:30 Freddy asks: What is your opinion of 9?  Dean: They try to
track the latest version of Java for their Scala users.  1:12:50 Lambdas
did slow the adoption of Scala because it took away the worst pain
point.  1:13:20 Jim: the Spring mantra make jar not war is well
supported by jigsaw.  1:14:31 Bob points out that Spring uses a lot of
reflection, but Jigsaw allows blocking code execution across package
boundaries, won't that cause problems?  1:15:33 Freddy points out that 9
lets you get close to that 20M mark on size, but notes that with Spring
boot, you may add a lot on top of that.  Jim did not address this.
&lt;code&gt;1:17:00 Freddy lists a nice process for optimization that starts
with coarse grained and ends up with using JMH.  This is a very valuable
  nugget.&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;1:19:24 Freddy asks to what extent Pivotal is going into machine
learning.  Jim answered that Pivotal is into data flows, such as Spring
  cloud data flow, which works with DeepLearning4J or Tensor Flow.&lt;/p&gt;

&lt;p&gt;1:20:50 Freddy asks how Lightbend is doing machine learning.  They
are looking at how to make it accessible to their developers. 1:22:04
Bob ask how many are using Hadoop and is surprised with the small number
  of hands.&lt;/p&gt;

&lt;p&gt;1:23:25 Freddy asks Dean to share the Lightbend strategy for world
dominance.  Answer: the tools they built, Akka, Play!, Lagom.  An
opinionated microservices framework.  What they want to do is promote
best practices and give them the tools to do it.  Bob: we need to figure
out a better way to structure the ideas so that regular developers can
use it.  1:25:44 Freddy observes how hard it is to do the reactive
  manifesto correctly.&lt;/p&gt;

&lt;p&gt;1:27:00 Discussion about the need to get knowledge out about best
practices.  1:29:35 Bob observes that organizations need to change to
adopt them.&lt;/p&gt;

&lt;p&gt;1:32:10 Freddy asks, why is it so hard to get microservices right?
James: 1:32:31 data is the hard part.  1:33:55 Dean: each microservices
has its own persistence, but this poses a problem when you evolve a
  system and data needs to change.&lt;/p&gt;

&lt;p&gt;1:35:55 How have alternative JVM languages played out?  At Expedia,
85% is just regular Java.  They do use a little Scala.  The bit that
they do use, some developers avoid touching because they are not
familiar with Scala.  1:37:40 Dean: about half of their devs use Scala.
90% of the JVM usage is Java.  1:38:12 Container management and
orchestration: Freddy: it's wild west right now.  1:39:45 Jim has a
counter argument: perhaps use build packs instead of containers.
1:40:10 Freddy, I wish we could settle down with the Docker stuff.&lt;/p&gt;</content><author><name></name></author><summary type="html">I had the honor to be a guest on Java OffHeap (@offheap) while attending Goto Chicago 2017. I am also happy to announce that I am in talks with the OffHeap guys to have an occasional guest segment on their program, tentatively called &quot;Mark and Sweep&quot; where we will feature audio content from the existing interviews from my book Secrets of the Rockstar Programmers as well as new interviews with additional thought leaders.</summary></entry></feed>