<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2017-03-28T20:07:12+02:00</updated><id>/blog/</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">JavaLand 2017 gRPC 101</title><link href="/blog/2017/03/28/javaland-gprc-101.html" rel="alternate" type="text/html" title="JavaLand 2017 gRPC 101" /><published>2017-03-28T14:30:00+02:00</published><updated>2017-03-28T14:30:00+02:00</updated><id>/blog/2017/03/28/javaland-gprc-101</id><content type="html" xml:base="/blog/2017/03/28/javaland-gprc-101.html">&lt;p&gt;Raw nots from &lt;a href=&quot;http://twitter.com/saturnism&quot;&gt;Ray Tsang&lt;/a&gt;'s talk about &lt;a href=&quot;http://twitter.com/grpcio&quot;&gt;gRPC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally was able to get to a session before it
  started.  &lt;a href=&quot;http://www.http2demo.io/&quot;&gt;HTTP/2 Demo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gave definition of saturnism: lead poisoning.&lt;/p&gt;

&lt;p&gt;Trend: revisit: breaking down monolith into Microservices.  Or
creating microservices in greenfield.  A lot of overhead for this
  approach: distributed systems problems.  Need additional tooling.&lt;/p&gt;

&lt;p&gt;Referenced &lt;a href=&quot;http://www.ejbtutorial.com/&quot;&gt;CORBA tutorial
    here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RPC has a bad rep.  But he spoke highly of RMI.  Everything just
works.  But you have to be in Java on both sides.  To fix this, we came
up with SOAP, which lead to REST.  Why RPC: efficient and strongly type.
REST: everything is CRUDy.  What about how to represent, for example, a
bank account transfer operation?  On REST, you also have to write client
  libraries.  RPC can be great if it is simple and interoperable.&lt;/p&gt;

&lt;p&gt;At Google, they use Stubby.  It does O(10&lt;super&gt;10&lt;/super&gt;).  They
wanted to open source Stubby.  Square used to have their own RPC thing.
They combined and made gRPC.  Owned by the cloud native foundation.  The
  G in GPRC means GRPC.&lt;/p&gt;

&lt;p&gt;Transport is in HTTP/2: binary protocol.  Gave a little talk over
HTTP/2 features: binary, streams, HPACK, PUSH.  Protobuffer 3.
  Marshalling and unmarshalling data.&lt;/p&gt;

&lt;p&gt;Showed a graph showing throughput/cpu core: binary is faster than
  text.  It is also better for battery life.&lt;/p&gt;

&lt;p&gt;gRPC supports: C++, Objective C, PHP, Java.&lt;/p&gt;

&lt;p&gt;Finished the slideware at 14 minutes in.&lt;/p&gt;

&lt;p&gt;Protofile is the IDL file.  There you define the message payloads,
  messages, etc.  Must define request and response payloads.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

    syntax = &quot;proto3&quot;;

    package com.example.grpc;

    option java_multiple_files = true;

    enum Sentiment {
    HAPPY = 0;
    SAD = 1;
    }

    message HelloRequest {
    string firstname = 1;
    string lastmame = 2;
    int64 age = 3;
    Sentiment sentiment = 4;
    repeated string hobbies = 5;
    map&amp;lt;string, string&amp;gt; bagOfTricks = 6;
    
    }

    message HelloResponse {
    string greeting = 1;
    }

    service GreetingService {
    rpc greeting([stream] HelloRequest) returns ([stream] HelloResponse);
    }
    
&lt;/code&gt;  &lt;/pre&gt;

&lt;p&gt;To run it, include mvn dependencies.  There are also stub generation
  plugins.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    public class GreetingImpl extends GreetingServiceGrpc.GreetingServiceImplBase {
    public void greeting(HelloRequest, StreamObserver response);
    
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Automatically supports &lt;code&gt;onNext, onCompleted, onError&lt;/code&gt;.
All builder based.  &lt;/p&gt;

&lt;p&gt;The client uses channels.  Supports client side interceptors.
Supports load balancing.  Round robin.  Supports deadlines for calls.
This is kind of a built-in circuit breakers.  &lt;/p&gt;</content><author><name></name></author><summary type="html">Raw nots from Ray Tsang's talk about gRPC.</summary></entry><entry><title type="html">JavaLand 2017 Serverless AWS</title><link href="/blog/2017/03/28/javaland-serverless-aws.html" rel="alternate" type="text/html" title="JavaLand 2017 Serverless AWS" /><published>2017-03-28T14:00:00+02:00</published><updated>2017-03-28T14:00:00+02:00</updated><id>/blog/2017/03/28/javaland-serverless-aws</id><content type="html" xml:base="/blog/2017/03/28/javaland-serverless-aws.html">&lt;p&gt;Raw nots from Niko K&amp;ouml;bler's talk.&lt;/p&gt;

&lt;p&gt;Arrived late due to lunch choice.&lt;/p&gt;

&lt;p&gt;API Gateway.  Hides possible multiple service calls.  Kinda like
  ESB.&lt;/p&gt;

&lt;p&gt;DynamoDB. Fully managed NoSQL datasource.  Document oriented.  Pay by
  read/write/capacity units and used storage, not by time.&lt;/p&gt;

&lt;p&gt;Used with Amazon Alexa.  Programs in Alexa are called &quot;skills&quot;.&lt;/p&gt;

&lt;p&gt;Amazon Lambda has some competition: AzureFunctions, Google
CloudFunctions, IBM Bluemix with OpenWhisk.  Each offers different
  language bindings.&lt;/p&gt;

&lt;p&gt;Introducing the &lt;a href=&quot;http://serverless.com&quot;&gt;Serverless
    Framework&lt;/a&gt;.  Looks pretty clean.&lt;/p&gt;

&lt;p&gt;Showed how it looks using the AWS web UI.  Then went into postman and
  showed how to interact with the API.&lt;/p&gt;

&lt;p&gt;I liked how there is no Docker in this whole thing.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://twitter.com/serverlessbuch&quot;&gt;@serverlessbuch&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Raw nots from Niko K&amp;ouml;bler's talk.</summary></entry><entry><title type="html">JavaLand 2017 Lambdas</title><link href="/blog/2017/03/28/javaland-lambda.html" rel="alternate" type="text/html" title="JavaLand 2017 Lambdas" /><published>2017-03-28T11:00:00+02:00</published><updated>2017-03-28T11:00:00+02:00</updated><id>/blog/2017/03/28/javaland-lambda</id><content type="html" xml:base="/blog/2017/03/28/javaland-lambda.html">&lt;p&gt;Raw nots from Simon Ritter's talk.&lt;/p&gt;

&lt;p&gt;We had support for some functional programming in JDK 1.0: anonymous
  inner classes.  Lambdas do it much more cleanly.&lt;/p&gt;

&lt;p&gt;You can use lambdas where ever the type is a &lt;code&gt;Functional
Interface&lt;/code&gt;.  It has a single abstract method: accept.&lt;/p&gt;

&lt;p&gt;A lambda looks like a method, but it is not associated with a class.
  Therefore you can't call it a method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(parameters) -&amp;gt; body&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There was a lot of debate of whether it should be =&amp;gt;.&lt;/p&gt;

&lt;p&gt;Lambdas are closures over values, not types.  This means state cannot
be modified in a lambda.  This means you can only refer to variables in
the surrounding scope, they have to be effectively final.  Effectively
means either explicitly marked final, or it's value cannot be
changeable.&lt;/p&gt;

&lt;p&gt;Method references let us reuse a method as a lambda expression.
Three different ways of using them.  Static method.  Instance method of
  an arbitrary type. Instance method of an existing type.&lt;/p&gt;


&lt;p&gt;Performance implications.  Anonymous inner classes force the compiler
to generate funny class names, type pollution, must be loaded at
runtime.  Originally, lambdas were implemented this way.  Better way is
to use invokedynamic.  Original idea of invokedymanic was to improve
performance of dynamically typed languages on the JVM.  Defers
implementation of the Lambda to the runtime.  It was the first thing
added to the JVM bytecode since Java 1.0.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java.lang.LambdaMetaFactory&lt;/code&gt; returns an instance of the
lambda functional interface type.  Can divide lambdas into two groups.
Non-capturing lambdas: no surrounding scope being used; simple
conversion to static method.  Capturing lambdas: does use surrounding
scope: static method with captured variables prepended as
  parameters or synthetic instance method of class using Lambda. &lt;/p&gt;

&lt;p&gt;Went over some impl performance differences between lambdas and
anonymous inner classes.  Also for capture vs. instantiation of
anonymous inner classes.  The latter has heap implications.  &lt;b&gt;Unused
lambdas have no overhead.  Non-capturing lambdas automatically optimise.
Method references are slightly more
optimal.  &lt;code&gt;-XX:+TieredCompilation&lt;/code&gt; gives beter
    lambdas.  &lt;/b&gt; This is the default.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Alonso Church, the Lambda Calculus (1936).  A way of having a
mathematical definition for having functions and calling them.  He was
  Alan Turing's PhD advisor.&lt;/p&gt;

&lt;p&gt;Java programmers are typically imperative programmers.  Functional
programming is not imperative: no side effects.  Lambda calculus and
Turing machines are equivalent.  What can we do &lt;b&gt;only&lt;/b&gt; using Lambda
  expressions?&lt;/p&gt;</content><author><name></name></author><summary type="html">Raw nots from Simon Ritter's talk.</summary></entry><entry><title type="html">JavaLand 2017 Greeting</title><link href="/blog/2017/03/28/javaland-intro.html" rel="alternate" type="text/html" title="JavaLand 2017 Greeting" /><published>2017-03-28T10:00:00+02:00</published><updated>2017-03-28T10:00:00+02:00</updated><id>/blog/2017/03/28/javaland-intro</id><content type="html" xml:base="/blog/2017/03/28/javaland-intro.html">&lt;p&gt;Fried Saacke, kicked off JavaLand 2017 today.  It's totally full, and
in a new theater within Fantasialand.  We have 110 lectures, 8 workshop
sessions, and 16 community activities this year.  He admitted that not
everything will go as smoothly as we might like, but we are doing the
  best.  The biggest practical challenge is throughput.&lt;/p&gt;

&lt;p&gt;He talked about DukeCon, which may be a separate conference, but
  currently is an online sidecar with JavaLand.&lt;/p&gt;

&lt;p&gt;Tobias Frech talked about the community activities: exchange with
  eachother.  In the Quantum show floor.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Java Innovation Lab
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Meet the JUGS
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Early Adapter's Area
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Workshops
	  &lt;/p&gt;&lt;/li&gt;
          
          
	&lt;/ul&gt;

&lt;p&gt;16:30, Group photo outside Quantum&lt;/p&gt;

&lt;p&gt;Use the #JavaLand twitter handle.&lt;/p&gt;

&lt;p&gt;German speaking JavaLand slack group
#jlca.  &lt;a href=&quot;https://slackin-jvm-german.herokuapp.com/&quot;&gt;Click
    here&lt;/a&gt;.  Ask here where you can win a robot.&lt;/p&gt;

&lt;p&gt;This year they had a JavaLand4Kids day before the conference.&lt;/p&gt;

&lt;p&gt;Some more numbers about speakers, staff, exhititors,
  sponsors, student helpers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He specially called out that he invited Oracle to be a sponsor, but
    they declined.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Digitialization of the REWE Group&lt;/p&gt;

&lt;p&gt;Mentioned the importance of being a good server leader.  So glad to
  see him mention this.&lt;/p&gt;

&lt;p&gt;Three big digitializaion efforts before joining REWE.  Related his
recruitment story from REWE group.  Key point: never compromise, at all.
But this is in conflict with the notion of being a servant leader.  He
keeps mentioning that life is short.  Mentions you are only as good as
  you think you are.&lt;/p&gt;

&lt;p&gt;Listed some business numbers for REWE.  Lines of business: Food
  retail, Tourism, DIY.&lt;/p&gt;

&lt;p&gt;Car analogy: if the car keeps driving ok, why fix it?&lt;/p&gt;

&lt;p&gt;What does he mean by digitalizaion?  Related ProMarkt story: Metaphor
of Bezos cuckold story.  Basically: take on the &quot;software is eating the
world&quot; meme and reorganize the company according to it.  Story: how he
asked them to change the company car policy.  This is an example of the
  changes he was trying to bring.&lt;/p&gt;

&lt;p&gt;Similar story: the corporate suite and the whiteboard: he did not
  compromise.&lt;/p&gt;

&lt;p&gt;I would like to him to give more details of what they do from day to
  day.  It was all about the environment.&lt;/p&gt;

&lt;p&gt;Now he gets to it.  Slide showing non-digital businesses and
corresponding digitalized business.  Old: World of Music, ProMarkt,
Gortz, Morrisons.  New: iTunes, Spotify, amazon, zalando, ocado.
Mentioned the he will sell his Morrisons shares short.  Morrisons: they
compromised by partnering with Ocado and Amazon.  They are giving all of
their knowledge away to someone who is going to eat you in the next
years.&lt;/p&gt;

&lt;p&gt;Have to rethink the whole business.  Starting with: what is a store?
He thinks of it as a mini warehouse that is perfectly positioned in
neighborhoods.  Difference between self service business and service
business.  Gave an aside: build your technology yourself.  Don't buy
  from vendors, otherwise you become too constrained.&lt;/p&gt;</content><author><name></name></author><summary type="html">Fried Saacke, kicked off JavaLand 2017 today. It's totally full, and in a new theater within Fantasialand. We have 110 lectures, 8 workshop sessions, and 16 community activities this year. He admitted that not everything will go as smoothly as we might like, but we are doing the best. The biggest practical challenge is throughput.</summary></entry><entry><title type="html">Devoxx JAX-RS 2.1</title><link href="/blog/2017/03/23/devoxx-jax-rs.html" rel="alternate" type="text/html" title="Devoxx JAX-RS 2.1" /><published>2017-03-23T19:00:00+01:00</published><updated>2017-03-23T19:00:00+01:00</updated><id>/blog/2017/03/23/devoxx-jax-rs</id><content type="html" xml:base="/blog/2017/03/23/devoxx-jax-rs.html">&lt;p&gt;Raw notes from &lt;a href=&quot;https://twitter.com/spericas&quot;&gt;Santiago Pericas-Geertsen's&lt;/a&gt; JAX-RS 2.1 Reloaded&lt;/p&gt;

&lt;p&gt;Quick update on this latest &quot;minor revision&quot;.&lt;/p&gt;

&lt;p&gt;Reactive Extensions.  Fits really well with JAX-RS API.&lt;/p&gt;

&lt;p&gt;Server-Sent Events&lt;/p&gt;

&lt;p&gt;Non-Blocking IO&lt;/p&gt;

&lt;h2&gt;Reactive Extensions&lt;/h2&gt;

&lt;p&gt;Asynchronous Processing in 2.0&lt;/p&gt;

&lt;p&gt;Server Side &lt;code&gt;@Suspended&lt;/code&gt;
  and &lt;code&gt;AsyncResponse&lt;/code&gt;. Resume execution on a different thread.&lt;/p&gt;

&lt;p&gt;Client side &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt;.
  And &lt;code&gt;InvocationCallback&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use of &lt;code&gt;async&lt;/code&gt; in the midst of builders allows the delay
  of the invocation.  Future doesn't allow you to know when it is safe
  to call &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;InvocationCallback&lt;/code&gt; allows you to pass in the thing to
call when it effectively is safe to call get.  But this doesn't easily
allow composition: where the value for step 1 needs to be taken into
  account in step 2, for example.  &quot;pyramid of doom&quot;.&lt;/p&gt;

&lt;p&gt;Some more use cases: composition, combining values, consume values of
  asyncronous tasks.&lt;/p&gt;

&lt;p&gt;Now we can use &lt;code&gt;CompletionStage&amp;lt;&amp;gt;&lt;/code&gt;.  This fit really
well bscause we didn't have to invent a new type, as we did
  with &lt;code&gt;InvocationCallback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Turns out that you might want to use RxJava, or some other Rx
  thing.&lt;/p&gt;

&lt;p&gt;Two step process.  1. register a provider, 2. Override the default
Invoker.&lt;/p&gt;

&lt;p&gt;The ability to do this is an extension for JAX-RS.  Impls are not
  required.&lt;/p&gt;

&lt;h2&gt;Server-Sent Events&lt;/h2&gt;

&lt;p&gt;Wanted to add in JAX-RS 2, now getting to it in 2.1.&lt;/p&gt;

&lt;p&gt;Reviewed the basics of SSE.  Now maintained by WHATWG.&lt;/p&gt;

&lt;p&gt;Client API: get an &lt;code&gt;SseEventSource&lt;/code&gt; target.  Subscribe to
it, passing in the handler.  Open the event source.  It
  is &lt;code&gt;AutoClosable&lt;/code&gt;, so you can use try with resources.&lt;/p&gt;

&lt;p&gt;Server API: &lt;code&gt;SseEventSink&lt;/code&gt; and &lt;code&gt;Sse&lt;/code&gt;.  These
can be passed to resource methods as &lt;code&gt;@Context&lt;/code&gt; annotated
arguments.  &lt;code&gt;SseBroadcaster&lt;/code&gt; and &lt;code&gt;@Singleton&lt;/code&gt;
annotation.  The former is created by your application, not the runtime.
You can use it to connect clients to the sse pipe, and also use it to
  broadcast events when you have them.&lt;/p&gt;

&lt;h2&gt;Non-Blocking IO&lt;/h2&gt;

&lt;p&gt;Motivation: enable higher throughput and more control over IO.&lt;/p&gt;

&lt;h2&gt;NIO Server&lt;/h2&gt;

&lt;p&gt;The existing &lt;code&gt;StreamingOutput&lt;/code&gt; was still blocking.&lt;/p&gt;

&lt;p&gt;Showed some iterations of NIO proposals.  They suffered from
operating at the level of byte streams, also it was hard to integrate
  with the JAX-RS pipeline.&lt;/p&gt;

&lt;p&gt;Current proposal: Java 9 Flows.  We want to use it.  So we are
creating copies of the required APIs.  You don't have to use bytes.  You
  can use objects.  You can integrate with third party libraries.&lt;/p&gt;

&lt;p&gt;Pattern: Publisher, Subscriber, Processor.  How does this relate to
  JAX-RS?&lt;/p&gt;

&lt;p&gt;Why and how to NIO?  It's more complicated code.  But it's useful for
large payloads, which often involve collections.  A collection of Pojos
  is a &lt;code&gt;Publisher&amp;lt;Pojo&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Added a
new &lt;code&gt;MessageBodyReader&lt;/code&gt;: &lt;code&gt;NioBodyReader&lt;/code&gt;.  Same
  for writer.&lt;/p&gt;

&lt;p&gt;What about Filters and Interceptors?  Still being discussed, but he
  did commit to having the feature in there.&lt;/p&gt;

&lt;h3&gt;NIO Clients&lt;/h3&gt;

&lt;p&gt;Need a new &lt;code&gt;Invoker&lt;/code&gt;.  Add &lt;code&gt;nio()&lt;/code&gt; method you
  can throw in the builder chain, and then use the normal Flow API.&lt;/p&gt;

&lt;h2&gt;Naming&lt;/h2&gt;

&lt;p&gt;Publisher = Source, Subscriber = Sink.  This lends itself to SSE.
  You can think of SSE as a special case of NIO.  An SSE connection is
  just a Flow of SSE Events.&lt;/p&gt;</content><author><name></name></author><summary type="html">Raw notes from Santiago Pericas-Geertsen's JAX-RS 2.1 Reloaded</summary></entry><entry><title type="html">Devoxx Deep Learning</title><link href="/blog/2017/03/22/deep-learning.html" rel="alternate" type="text/html" title="Devoxx Deep Learning" /><published>2017-03-22T23:25:00+01:00</published><updated>2017-03-22T23:25:00+01:00</updated><id>/blog/2017/03/22/deep-learning</id><content type="html" xml:base="/blog/2017/03/22/deep-learning.html">&lt;p&gt;Raw notes from &lt;a href=&quot;https://twitter.com/agibsonccc&quot;&gt;Adam
Gibson's&lt;/a&gt; Deep Learning in Production.&lt;/p&gt;

&lt;p&gt;Defining Production: It's different for a startup from an enterprise,
and different from academia.  Each have their own set of tools and
  expectations.&lt;/p&gt;

&lt;p&gt;GPU clusters.  On prem research: something flexible and quick.  Not
much need for complexity management.  Python HPC stack.  C sometimes
  used for new neural networks.&lt;/p&gt;

&lt;p&gt;Cloud research: AWS/Azure spin up resources as needed.&lt;/p&gt;

&lt;p&gt;On Prem production: HPC, Video transcoding.  They use a lot of GPUs.
  They also use resource schedulers: MESOS and YARN.&lt;/p&gt;

&lt;p&gt;I must have missed when he talked about how GPUs are essential for
  this space.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hadoop: HDFS and ZooKeeper.  16:39.&lt;/p&gt;

&lt;p&gt;Two modes: training and inference (using a model as an API).  GPUs
  are specialized for matrix computations.&lt;/p&gt;

&lt;p&gt;It started to become difficult to follow due to lots of hopping
  around without defining the terms well enough, or at all.  It must be
  my ignorance of the space.&lt;/p&gt;

&lt;p&gt;At least he showed us how to pronounce Lagom.  It's log-AHM.&lt;/p&gt;

&lt;p&gt;Training models is difficult and expensive.  This is why you need a
  specialized chip.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ETL: Extract Transform Load.&lt;/p&gt;

&lt;p&gt;Neural nets are made up of Tensors. &lt;a href=&quot;https://en.wikipedia.org/wiki/MNIST_database&quot;&gt;MNIST&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Problems to think about on a GPU cluster:&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Memory management.  Each GPU doesn't have that much
	      RAM, so you have to shard your problem.&lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Throughput
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Resource provisioning
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;GPU allocation for job.
	  &lt;/p&gt;&lt;/li&gt;

	&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CUDA&quot;&gt;CUDA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Raw notes from Adam Gibson's Deep Learning in Production.</summary></entry><entry><title type="html">Devoxx Cloud Debugging</title><link href="/blog/2017/03/22/cloud-debugging.html" rel="alternate" type="text/html" title="Devoxx Cloud Debugging" /><published>2017-03-22T23:20:00+01:00</published><updated>2017-03-22T23:20:00+01:00</updated><id>/blog/2017/03/22/cloud-debugging</id><content type="html" xml:base="/blog/2017/03/22/cloud-debugging.html">&lt;p&gt;Raw notes from Cloud Debugging
with &lt;a href=&quot;http://twitter.com/patricknflynn&quot;&gt;Patrick Flynn&lt;/a&gt;.  Java
Tools Tech Lead on Java Cloud Platform.&lt;/p&gt;

&lt;p&gt;Picture from good old days, 2003.  Hardware was very manual.
Purchase orders, procurement, six months later.  Cork board to separate
  motherboards.&lt;/p&gt;

&lt;p&gt;Tooling was also not good back then.&lt;/p&gt;

&lt;p&gt;Did show of hands about who is doing deployments by hand.&lt;/p&gt;

&lt;p&gt;Today, we can provision in a matter of seconds.  Great network
infrastructure, great physical security, but if you are deploying
  manually, you are still not getting all the benefits.&lt;/p&gt;


&lt;p&gt;Asserts that spring boot is the platform of choice in the community
right now.  Deployed as jars, not wars.  Demo.
Takes &lt;code&gt;DataStore&lt;/code&gt;, a google cloud platform feature.  Puts a
  value to the data store and displays it.&lt;/p&gt;

&lt;p&gt;Mutates the demo to add translation.  It is a available as a maven
dependency in maven central.  Had to look up the javadoc, out of the
IDE.  Restarted spring boot because of dependency added.  Added language
  detection iteratively.&lt;/p&gt;

&lt;p&gt;Google cloud tools for intellij has support for a number of services.
  Plugged these heavily.  Cloud source repositories, for example.&lt;/p&gt;

&lt;p&gt;App Engine Flex.  Create Deployment Configuration: Went through lots
of the fields in this dialog.  Points: Good maven support.  Need an
appengine-web.xml.  On build, this actually orchestrates a Docker build.
The system looks at the project type and chooses the right Docker image
  to run it.  This is a bit slower than App Engine Standard.&lt;/p&gt;

&lt;p&gt;Mentioned the vendor lock in concern.  App Engine Flex is not a
walled garden.  It allows running arbitrary APIs.  Because it depends on
  Docker, you can take your output to any other cloud.&lt;/p&gt;

&lt;p&gt;Google built Borg as a container running service.  Kubernetes was
informed by the design of Borg.  How do you run the Spring Boot demo on
Kubernetes?  He went into the gcloud CLI and created a bunch of stuff to
  run it.  This is entirely separate from App Engine Flex.  &lt;/p&gt;


&lt;p&gt;Showed how the debugger gets enabled: Adding the cloud debugger agent
into the Dockerfile.  The service name and the project file are included
  in the dockerfile so the debugger knows about it.&lt;/p&gt;

&lt;p&gt;Supports GitHub integration.&lt;/p&gt;

&lt;p&gt;Demo used the spotify Docker Maven Plugin.  Need to include
source-context.json and source-contexts.json.  Demo also includes a
docker push to the container registry for the google cloud
  project.  Did the mvn deploy from the cloud platform machine.&lt;/p&gt;

&lt;p&gt;Additional kubernetes steps: Expose load balancer.  &lt;/p&gt;

&lt;p&gt;Showed lots of mutations of the config on kubernetes and App Engine
Flex.  Showed how easy traffic splitting, canary testing, and
  versioning works.&lt;/p&gt;


&lt;p&gt;Used Apache Bench to generate load.&lt;/p&gt;

&lt;p&gt;With no time left, he finally got to the debugging.  Bug: reporting
wrong user agent.  Shows how in Intellij you can attach to running
instances.  It syncs the source to what is actually running in the
cloud.  This works because the agent captures what the breakpoints are,
captures the sample at the time when it is hit.  It is not interactive
debugging.  You can't step.  But it's still better than nothing.&lt;/p&gt;</content><author><name></name></author><summary type="html">Raw notes from Cloud Debugging with Patrick Flynn. Java Tools Tech Lead on Java Cloud Platform.</summary></entry><entry><title type="html">Devoxx Baratine</title><link href="/blog/2017/03/22/baratine.html" rel="alternate" type="text/html" title="Devoxx Baratine" /><published>2017-03-22T03:09:00+01:00</published><updated>2017-03-22T03:09:00+01:00</updated><id>/blog/2017/03/22/baratine</id><content type="html" xml:base="/blog/2017/03/22/baratine.html">&lt;p&gt;Raw notes from Baratine talk.  Unfortunately, Simone Bordet and I were
the only two attendees in a very large room.  On the bright side, I can
say that what the room lacked in quantity of attendees, it made up for
in quality, at least in terms of depth of understanding of the space of
Servlet, HTTP/2, and web technologies in general.&lt;/p&gt;

&lt;p&gt;Sean Wiley, from Caucho Resin.&lt;/p&gt;

&lt;p&gt;Architecture Overview&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Described using the same boundaries as SOA.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But these are the same thing as microservices.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Baratine Service&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;strong encapsulation boundaries&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each service has its own thread and efficient lock-free inbox.  Batches to the service.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inside of a service, code can be single threaded.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Persistent services load and store to a document style key/value database&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Services use their data in-memory.  Loading and storing is transparent.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Database persistence.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Built in.  Cannot swap it out.  Called Kraken.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use cases&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;API engine.  Baratine service can operate as a REST service.  Can
shard based on its own data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DEMO: hello world rest service.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Simone asked about performance.  He answered: they use the disruptor
pattern in the implementation.&lt;/p&gt;

        &lt;p&gt;Has its own set of annotations similar to JAX-RS.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DEMO 2: Bookstore&lt;/p&gt;

    &lt;p&gt;Showed how persistence can be enabled with two simple single annotations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;REST service details&lt;/p&gt;

    &lt;p&gt;Gave some performance numbers to show 2x performance over RESTEasy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“faster because it removes the database from the critical path”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do you do backpressure?&lt;/p&gt;

    &lt;p&gt;The inbox concept allows them to do backpressure.  Requests are
journaled into the inbox.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Performance is achieved from implicit batching.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use case 2: Auction Microservice https://github.com/baratine/auction A
complete worked example.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Baratine can be used as a library, or embedded for fat-jar style.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Bottom line analysis.  Baratine looks like a good solution if you can
afford to live within in a proprietary stack.*sh&lt;/p&gt;</content><author><name></name></author><summary type="html">Raw notes from Baratine talk. Unfortunately, Simone Bordet and I were the only two attendees in a very large room. On the bright side, I can say that what the room lacked in quantity of attendees, it made up for in quality, at least in terms of depth of understanding of the space of Servlet, HTTP/2, and web technologies in general.</summary></entry><entry><title type="html">Devoxx Java EE 8</title><link href="/blog/2017/03/21/java-ee-8.html" rel="alternate" type="text/html" title="Devoxx Java EE 8" /><published>2017-03-21T19:00:00+01:00</published><updated>2017-03-21T19:00:00+01:00</updated><id>/blog/2017/03/21/java-ee-8</id><content type="html" xml:base="/blog/2017/03/21/java-ee-8.html">&lt;p&gt;Raw notes from Linda DeMichiel's Java EE 8 talk.&lt;/p&gt;

&lt;p&gt;What was in EE 7: Actually a very action packed release, with the
usual themes: simplicity, platform cohesion, embracing contemporary
  standards.&lt;/p&gt;

&lt;p&gt;EE8: Admit the impact of the hiatus.  The original plan had to be
  scaled back from 12 to 9 JSRs.  Really not a big scale back.&lt;/p&gt;

&lt;p&gt;Two net new JSRs: Security and JSON-B.  Revisions for Servlet, JSF,
  JSON-P, JAX-RS.&lt;/p&gt;


&lt;p&gt;JSON-P.  JSON-Pointer: String syntax for referencing into a JSON
  document.  &lt;a href=&quot;https://tools.ietf.org/html/rfc6901&quot;&gt;RFC-6901&lt;/a&gt;.
  Would be nice if there was EL integration.  JSON Patch: Ability to
  mutate a JSON
  document.  &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;RFC-6902&lt;/a&gt;.
  This has a builder API.  JSON-Merge Patch: Conditionally apply the
  patch.  &lt;a href=&quot;https://tools.ietf.org/html/rfc7386&quot;&gt;RFC-7386&lt;/a&gt;.  &lt;strong&gt;Also
  includes seamless integration with Java SE 8 Lambda and
    Strings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON-B.  Like JAX-B, but for JSON.  This is the missing piece for
  JSON in standard Java.  &lt;code&gt;JsonbBuilder&lt;/code&gt; is the client entry
  point.  &lt;code&gt;Jsonb&lt;/code&gt; the thing you actually manipulate.  Allows
  you to annotate your Java Pojo to control how it is mapped to JSON.
  The &lt;code&gt;JsonBConfig&lt;/code&gt; allows you to do this control.  The RI is
  called &lt;a href=&quot;http://json-b.net/&quot;&gt;Yasson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JAX-RS.  New features: Reactive Client API, Server Sent Events,
  NIO.  I have more on this at &lt;a href=&quot;/blog/2017/02/22/jax-rs-2_1-new-feature-introduction.html&quot;&gt;a previous
  post&lt;/a&gt;.  Linda's talk had more structure on Server Sent Events.  I
  am glad she emphasized the value JAX-RS brings in sending SSE to both
  client and server when doing REST.&lt;/p&gt;

&lt;p&gt;Servlet. But first set the context with some plain content on HTTP/2.
  When talking about the binary framing, she mentioned that frames were
  self describing, which was a nice observation. &lt;/p&gt;

&lt;p&gt;JSF. A mature technology.  An enormous number of community requested
  fixes.  She did address why we are continuing JSF while we are not continuing MVC.  This was nice to hear.  &lt;/p&gt;

&lt;p&gt;CDI 2.0.  Mostly about how to use CDI in Java SE environments,
  outside of Java SE.  This is hugely important for fat-jar style
  Microservices.  Some enhancements to CDI events.  In 1.1, events are
  invoked synchronously, without regard for priority.  2.0 allows
  prioritization and ordering.  Adds async
  events: &lt;code&gt;event.fireAsync()&lt;/code&gt; and &lt;code&gt;@ObserveAsync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;BeanValidation 2.0.  Continuing the theme with JSF, adds support for
  a number of Java SE 8 features.  Adds some new constraints.  Add
  ability to apply constraints on insertion into &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Security 1.0.  Three new APIs &lt;code&gt;SecurityContext,
  HttpAuthenticationMechanism, IdentityStore&lt;/code&gt;.  The first is under
  debate about whether or note the first is actually
  necessary.  &lt;code&gt;SecurityContext&lt;/code&gt; is intended to supercede APIs
  in several of the other EE technologies.  I like the
  idea.  &lt;code&gt;HttpAuthenticationMechanism&lt;/code&gt;, modeled on JASPIC,
  and JASPIC is intended to delegate to this.  It is used to
  authenticate callers of web applications.  &lt;code&gt;IdentityStore&lt;/code&gt;
  has methods for authentication and authorization.&lt;/p&gt;

&lt;p&gt;Summary: Target release date of this summer!&lt;/p&gt;

&lt;!--

&lt;h3&gt;Personal notes&lt;/h3&gt;

&lt;p&gt;What is it about a presentation that makes it easier to take
notes?&lt;/p&gt;


--&gt;</content><author><name></name></author><summary type="html">Raw notes from Linda DeMichiel's Java EE 8 talk.</summary></entry><entry><title type="html">Devoxx US 2017 Picks</title><link href="/blog/2017/03/20/devoxx-us-2017-picks.html" rel="alternate" type="text/html" title="Devoxx US 2017 Picks" /><published>2017-03-20T06:59:00+01:00</published><updated>2017-03-20T06:59:00+01:00</updated><id>/blog/2017/03/20/devoxx-us-2017-picks</id><content type="html" xml:base="/blog/2017/03/20/devoxx-us-2017-picks.html">&lt;p&gt;I've been around the block a bit when it comes to Java developer
conferences and for some reason Silicon Valley USA is a tough nut to
crack, for the conference organizer.  This difficulty flies in the face
of the obvious surplus of top tier talent in the area, but for some
reason it's been hard to replicate the success of European conferences
in the hometown of US tech.  That hasn't stopped the big names from
trying, though.  In 2011, S&amp;S Media launched the
one-and-done &lt;a href=&quot;https://jaxenter.com/jaxconf-the-fulminant-future-of-java-103423.html&quot;&gt;JAX
Conf 2011&lt;/a&gt;.  I was not blessed with the honor of speaking or
presenting, but I have heard from multiple sources that it was not a
success.  This is very surprising, since S&amp;S run a great show and are
very well organized.  This week, the Devoxx folks are having their go.
I am fortunate to have the opportunity to
attend &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt;.  I've spoken at
  JavaPolis and Devoxx Antwerp, and these shows have a well-deserved
  reputation for excellence.  Devoxx US looks like it could be great
  as well.  Here, then, are my session picks.&lt;/p&gt;

&lt;h3&gt;Tuesday  &amp;mdash; Conference Day One&lt;/h3&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;10:30 Grand Ballroom
	  220A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/BML-2361/Java_EE_8_Work_in_Progress&quot;&gt;Java
	        EE 8 Work in Progress&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I'm very excited about Java EE 8, and I'm proud to
            represent the Servlet and JSF communities as they deliver
            two key parts of the most mature and stable enterprise
            computing platform.  Linda's talk will give the lowdown on
              this long overdue update.&lt;/p&gt;

          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;11:30 LL 20 B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/XIA-0432/Cloud_Native_Java&quot;&gt;Cloud Native Java&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;The
            inimitable &lt;a href=&quot;https://twitter.com/starbuxman&quot;&gt;Josh
            Long&lt;/a&gt; is fronting a compelling story at Pivotal and he
              knows his stuff.  Worth a look in.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;14:00 LL 20 C &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/CMC-8089/Hands-on_with_Kubernetes_-_from_basic_to_advanced_features&quot;&gt;Hands-on with Kubernetes - from basic to advanced features&lt;/a&gt;
	    &lt;/p&gt;

          &lt;p&gt;Readers of my blog will know that I'm a big fan
          of &lt;a href=&quot;https://twitter.com/saturnism&quot;&gt;Ray Tsang&lt;/a&gt;, so
          I'm recommending this hands on lab.  Unfortunately I will
          probably not be able to attend due to time constraints, but I
          wish I could.  As such, I am going to list a regular session
            talk in this slot as well.&lt;/p&gt;

            &lt;p&gt;14:00 Grand Ballroom 220B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/IWQ-3294/Code_Review_vs._Pull_Requests&quot;&gt;Code Review vs. Pull Requests&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;We've fought with Gerrit in my group, even though I'm
            personally in favor of it.  I'm also a fervant backer of
            Atlassian products, especially as a counter to the GitHub
            hegemony. &lt;/p&gt;

          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;15:00 LL 21 B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/KEX-2264/What's_New_in_Java_EE_Security:_JSR-375_and_Beyond&quot;&gt;What's New in Java EE Security: JSR-375 and Beyond&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I know how hard it is to bring a JSR to completion, and I
            know how hard this problem is, so I have great respect for
            Will and his JSR team.  I'm looking forward to seeing what
            is in store for security in Java EE 8.&lt;/p&gt;

          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;16:30 LL 20 D &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/BCC-2224/Keeping_your_data_sane_with_Bean_Validation_2.0&quot;&gt;Keeping your data sane with Bean Validation 2.0&lt;/a&gt;&lt;/p&gt;


            &lt;p&gt;I was on the Bean Validation 1.0 and 1.1 Expert Groups, so this is a great chance to see what they've been up to.&lt;/p&gt;

          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;17:30 LL 20 A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/JOQ-8664/Operational_Service_Views_-_Reactive_Web_Programming_with_Baratine&quot;&gt;Operational Service Views - Reactive Web Programming with Baratine&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I know nothing about Baratine or Sean Wiley, but the
            abstract hit on an important fundamental point: The need for
            server side web frameworks to be aggregators and also be
              asynchronous.  Let's see what Baratine has to offer.&lt;/p&gt;

          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;20:30 LL 21 C &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/FTT-9366/Getting_Started_with_Apache_Spark_2.0_and_MLlib,_for_Java_developers&quot;&gt;Getting Started with Apache Spark 2.0 and MLlib, for Java developers&lt;/a&gt;
	    &lt;/p&gt;

            &lt;p&gt;This is a hard-core timeslot, but the speakers will make
            it worth your while.  I know Ellen and Bob from the
            Dataverse days with JSF.  They are both excellent speakers
            who bring their from-the-trenches experience to the topic at
            hand.&lt;/p&gt;

          &lt;/li&gt;

	&lt;/ul&gt;

&lt;h3&gt;Wednesday  &amp;mdash; Conference Day Two&lt;/h3&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;10:20 Grand Ballroom 220B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/AQV-5329/Let%E2%80%99s_Get_Lazy:_Explore_the_Real_Power_of_Streams&quot;&gt;Let’s Get Lazy: Explore the Real Power of Streams&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;Streams are one of the most powerful features in Java 8.
            Though it's perfectly possible to program in Java without
            them, learning to master them is worth the effort.  Venkat
            is sure to leave you with a working knowledge of
            streams.&lt;/p&gt;

          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;11:20 Grand Ballroom 220B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/MNS-9892/gRPC_101_for_Java_Developers_-_building_fast_and_efficient_microservices&quot;&gt;gRPC 101 for Java Developers - building fast and efficient microservices&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;In spite of all the hype about REST, I've always looked
            askance it its textyness.  I'm glad to see gRPC catching on,
            not the least because it encourages HTTP/2.  And, of course,
              Ray Tsang.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;12:20 LL 21 C &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/TNH-8065/Adopting_the_Right_DevOps_Tools_for_You,_Your_Team_and_Your_Organization&quot;&gt;Adopting the Right DevOps Tools for You, Your Team and Your Organization&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;DevOps.  Ah, DevOps.  Doing more with less, the essence
            of boosting GDP.  Well, let's see if Mr. Makai can make this
            pill easier to swallow.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;14:30 LL 21 C &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/NLT-3821/Debugging_Java_in_Production_on_Google_Cloud_Platform&quot;&gt;Debugging Java in Production on Google Cloud Platform&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;In spite of what hard core old school develeopers say,
            using printf to debug your app is not a good use of your
            time.  Let's see what Google has to say about source level
            debugging in the cloud.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;15:30 LL 21 B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/YLN-6781/Tackling_Performance_Issues_with_YourKit&quot;&gt;Tackling Performance Issues with YourKit&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;YourKit has been in the performance game for a long time.
            Let's see what it has to offer for me.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;16:30 Grand Ballroom 220B &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/RQN-6498/Deep_Learning_in_Production&quot;&gt;Deep Learning in Production&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I have it on good authority that this talk is well worth
            your time.  The presenter is talking on behalf of &quot;the most
            popular open-source deep-learning framework for the
              JVM&quot;!&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;20:00 LL 21 A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/POJ-2981/Hacking_Hiring&quot;&gt;Hacking Hiring&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;It's so great to see a BOF about hiring, from the
            employee's perspective.  This looks great.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;21:00 LL 20 D &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/CAP-9084/The_rise_of_the_machine_-_is_Skynet_closer_than_ever%3F&quot;&gt;The rise of the machine - is Skynet closer than ever?&lt;/a&gt;&lt;/p&gt;


            &lt;p&gt;This fun session...is a great opportunity to see what a
            real insider has to say about the societal impact of AI.
            I'm looking forward to it.&lt;/p&gt;

          &lt;/li&gt;

	&lt;/ul&gt;

        &lt;h3&gt;Thursday  &amp;mdash; Conference Day Three&lt;/h3&gt;

        &lt;ul&gt;

&lt;li&gt;&lt;p&gt;10:00 LL 20 A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/TYE-5741/Machine_learning_at_scale:_Tensorflow_in_the_cloud&quot;&gt;Machine learning at scale: Tensorflow in the cloud&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;I've never attended a machine learning talk before.  It's high time
    I did and now seems like a good time.&lt;/p&gt;

&lt;/li&gt;

&lt;li&gt;&lt;p&gt;LL 21 A 11:00 &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/GFN-6657/JAX-RS_2.1_Reloaded&quot;&gt;JAX-RS 2.1 Reloaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know I just said that I looked askance at the textyness of REST,
but REST is still extremely popular and powerful, and JAX-RS is the best
way to do it.  This talk is a followup to my DevNexus session about
JAX-RS 2.1.&lt;/p&gt;
  
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;12:00 LL 20 A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/QKV-7768/Developing_microservices_with_aggregates&quot;&gt; microservices with aggregates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chris has taken the &quot;aggregates&quot; content from the DDD book and turned
it into a talk.  On the surface, that is not very compelling.  However,
when you add Chris's experience and delivery style, it is very
compelling.&lt;/p&gt;

&lt;/li&gt;

&lt;li&gt;&lt;p&gt;13:50 Grand Ballroom 220A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/BDX-6295/The_Seven_(More)_Deadly_Sins_of_Microservices&quot;&gt;The Seven (More) Deadly Sins of Microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daniel Bryant is a powerbroker at QCon.  His abstract includes
&quot;today’s shiny technology is tomorrow’s legacy,&quot;.  I'm sold.&lt;/p&gt;

&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;14:50 Grand Ballroom 220 C &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/XFT-7496/Maven_v_Gradle:_Dawn_of_Project_Automation&quot;&gt;
Maven v Gradle: Dawn of Project Automation
Tools-in-Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This talk will share the Israeli-Estoninan axis of Java build
technology.  Well worth a look.&lt;/p&gt;

          &lt;/li&gt;

&lt;li&gt;&lt;p&gt;15:30 Grand Ballroom 220 C &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/GZF-1081/Deploying_Docker_Containers_with_Netflix's_Spinnaker_on_Kubernetes_and_Titus._&quot;&gt;Deploying Docker Containers with Netflix's Spinnaker on Kubernetes and Titus&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;I've never heard of Spinnaker, but it's claim to be a &quot;multi-cloud
  continuous delivery platform built by Netflix in partnership with
    Google, Microsoft, and others&quot; is worth a look.&lt;/p&gt;

&lt;/li&gt;

&lt;li&gt;&lt;p&gt;17:00 Grand Ballroom 220A &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/PME-8361/JavaPosse_LIVE_podcast&quot;&gt;JavaPosse LIVE podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was present at the birth of the JavaPossee during Sun's Project
Rave.  I was present at the death of JavaPossee at Devoxx 2014.  I may
as well be present at this reboot.&lt;/p&gt;

&lt;/li&gt;

          



        
        
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I've been around the block a bit when it comes to Java developer conferences and for some reason Silicon Valley USA is a tough nut to crack, for the conference organizer. This difficulty flies in the face of the obvious surplus of top tier talent in the area, but for some reason it's been hard to replicate the success of European conferences in the hometown of US tech. That hasn't stopped the big names from trying, though. In 2011, S&amp;S Media launched the one-and-done JAX Conf 2011. I was not blessed with the honor of speaking or presenting, but I have heard from multiple sources that it was not a success. This is very surprising, since S&amp;S run a great show and are very well organized. This week, the Devoxx folks are having their go. I am fortunate to have the opportunity to attend Devoxx US. I've spoken at JavaPolis and Devoxx Antwerp, and these shows have a well-deserved reputation for excellence. Devoxx US looks like it could be great as well. Here, then, are my session picks.</summary></entry></feed>