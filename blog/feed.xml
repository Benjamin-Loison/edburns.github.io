<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2018-12-18T15:13:31-05:00</updated><id>/blog/</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">Annoyance about learning Swift</title><link href="/blog/2018/12/18/swift-annoyance.html" rel="alternate" type="text/html" title="Annoyance about learning Swift" /><published>2018-12-18T14:30:00-05:00</published><updated>2018-12-18T14:30:00-05:00</updated><id>/blog/2018/12/18/swift-annoyance</id><content type="html" xml:base="/blog/2018/12/18/swift-annoyance.html">&lt;p&gt;I’m pretty sure this is a tell about my mental capacity, but I gotta say
that several features in Swift have the following annoying pattern, at
least in the way they are explained in the official
&lt;a href=&quot;https://docs.swift.org/swift-book/&quot;&gt;Swift Book&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;They explain the full syntax of the feature.  This is very nice,
compact, and readily grasped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But wait, you can do the same thing but simpler with this more
concise syntax.  This starts to get obtuse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But wait, you can do it even more simply with this super concise
syntax.  At this point the syntax itself makes little sense and I
find it hard to grasp.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps it would be better to not spring the 2 and 3 level
simplifications on the reader until they have firmly grasped 1?&lt;/p&gt;

&lt;h2 id=&quot;case-1-closures&quot;&gt;Case 1: Closures&lt;/h2&gt;

&lt;p&gt;The Swift Book helpfully provides the full syntax of closures right at
the front.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(parameters)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, they then go through several, progressively more compact (and
less readily grasped for a beginner) iterations.  At each step along the
way, they point out why the more compact syntax still works, but you
have to keep in your mind other language concepts that are in play to
enable the simplification.  Then there is this cheeky statement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s actually an even shorter way to write the closure expression above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reversedNames = names.sorted(by: &amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, you know all that parameter list, arrow, return type, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; keyword?
In some special cases, you simply don’t need ‘em.  Perhaps if I get
heavily into Swift I will come to like the fact that all that seemingly
important stuff can sometimes be omitted, but for now I would rather not
have to learn when it’s possible to use the compact syntax and just have
to do the verbose syntax all the time.  Stuff like this just seems like
the language is taking on some things I usually let the IDE do.&lt;/p&gt;

&lt;h2 id=&quot;case-2-computed-properties&quot;&gt;Case 2: Computed Properties&lt;/h2&gt;

&lt;p&gt;The Swift Book again shows the full syntax of a computed property, but
only by example.  Then it says, “By the way, if your computed property
happens to be read-only, you can simplify the declaration of a read-only
computed property by removing the get keyword and its braces.”&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is certainly not new to Swift.  Indeed I’ve lamented the same thing
about &lt;a href=&quot;/blog/2010/03/03/perils-8220there8217s-more-one-way-do-it8221.html&quot;&gt;Perl&lt;/a&gt;.  I just
think this “look at how powerful my syntax is with the beautiful
abstractions I’ve made that allow me to state things so simply”
mentality can be taken a bit too far.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m pretty sure this is a tell about my mental capacity, but I gotta say that several features in Swift have the following annoying pattern, at least in the way they are explained in the official Swift Book.</summary></entry><entry><title type="html">Inline RxSwift Observer implementation</title><link href="/blog/2018/12/11/rxswift-observer-inline-impl.html" rel="alternate" type="text/html" title="Inline RxSwift Observer implementation" /><published>2018-12-11T16:00:00-05:00</published><updated>2018-12-11T16:00:00-05:00</updated><id>/blog/2018/12/11/rxswift-observer-inline-impl</id><content type="html" xml:base="/blog/2018/12/11/rxswift-observer-inline-impl.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;My ignorance of the Swift custom of using the &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; feature to
explode the definition of a single protocol across several source files
lead me to misunderstand how to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method in RxSwift.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;As I’ve said &lt;a href=&quot;/blog/2017/06/10/neil-ford-microservices-ujug-march-2017.html&quot;&gt;before&lt;/a&gt;, one of the
things I love about working on my current team at Oracle is the
opportunity to learn new things and put them in practice.  Currently
this means learing Swift and RxSwift.  While doing the usual TDD, I
needed to write several tests that exercise the contract of Rx.  This
required a concise way to pass an argument to the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; that allowed making assertions for the &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; cases.  As I say in my talk “Programming
Platform Growth: Table Stakes or Deal Makes?” (which I am blessed to be
giving as a keynote at
&lt;a href=&quot;https://programm.javaland.eu/2019/#/scheduledEvent/570246&quot;&gt;JavaLand 2019&lt;/a&gt;),
a key ingredient of programming platform growth is the welcoming culture
of its developer community.  I have a concrete example here that speaks
well of the Swift community in that regard.&lt;/p&gt;

&lt;p&gt;I was looking for examples of passing an obsever to the &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt;
method, but all of them passed a single &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt; handler.
&lt;a href=&quot;http://swiftpearls.com/RxSwift-for-dummies-1-Observables.html&quot;&gt;This post&lt;/a&gt;
while educational, is indicative of what I could find.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;observable.subscribe(onNext: {(element) in
  print(element)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What I wanted was to pass a complete implementation of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ObserverType&lt;/code&gt; with inline methods for its &lt;code class=&quot;highlighter-rouge&quot;&gt;onNext&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onCompleted&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;onError&lt;/code&gt; functions.  I posed the question in the
&lt;a href=&quot;https://rxswift.slack.com/archives/C051G5Y6T/p1544558825273100&quot;&gt;RxSwift slack channel&lt;/a&gt;
and the
&lt;a href=&quot;https://forums.swift.org/t/closure-or-dynamic-protocol-implementation/18739/2&quot;&gt;Swift #Using forum&lt;/a&gt;
and received helpful answers from each.  As a beginner, I failed to
grasp that what looks like an anonymous interface implementation in Java
is actually in invocation of an overloaded method.  You see, in Swift,
it is common to spread out the actual surface area of an API over many
different source files using the Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; feature.  This was
pointed out to me in the swift.org forum post from Adrian Zubarev.  So,
there is an overloaded &lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; method defined in
&lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableType+Extensions.swift&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public func subscribe(onNext: ((E) -&amp;gt; Void)? = nil,
                      onError: ((Swift.Error) -&amp;gt; Void)? = nil,
                      onCompleted: (() -&amp;gt; Void)? = nil,
                      onDisposed: (() -&amp;gt; Void)? = nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is simply a bunch of optional closure parameters, each with their
own signature and default value of &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, on the real-time help front, danielt1263 and Jeremy offered
some very helpful answers that supplement the answer from swift.org, and
which I actually decided to use.  They suggested using the variant of
&lt;code class=&quot;highlighter-rouge&quot;&gt;subscribe&lt;/code&gt; that takes a closure that takes an &lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt; and returns
&lt;code class=&quot;highlighter-rouge&quot;&gt;Void&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;smalltalk&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;let sub &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;try&lt;/span&gt; getObservable&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #00007f;&quot;&gt;subscribe&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#123;&lt;/span&gt; event in&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;switch event &lt;span style=&quot;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;case let .&lt;span style=&quot;color: #00007f;&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #00007f;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;:&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #00007f;&quot;&gt;onNextCalled&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #7f007f;&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;case let .&lt;span style=&quot;color: #00007f;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #00007f;&quot;&gt;error&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;:&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #00007f;&quot;&gt;onErrorCalled&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: #7f007f;&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;case .&lt;span style=&quot;color: #00007f;&quot;&gt;completed&lt;/span&gt;:&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #00007f;&quot;&gt;onCompletedCalled&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight:bold;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #00007f;&quot;&gt;&lt;/span&gt;true&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;span style=&quot;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Git Tags and Semver</title><link href="/blog/2018/11/13/semvergittags.html" rel="alternate" type="text/html" title="Git Tags and Semver" /><published>2018-11-13T06:41:00-05:00</published><updated>2018-11-13T06:41:00-05:00</updated><id>/blog/2018/11/13/semvergittags</id><content type="html" xml:base="/blog/2018/11/13/semvergittags.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;Debugging a Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt; problem that turned out to be
incorrectly git tags that did not sort correctly with respect to semver.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;I was trying to run the steps in an internal README to create a “Hello
World” for a simple Swift project and could not understand why some code
that had been removed from an internal dependency was still showing up
in the “Hello World”.  This code had been removed from the most recent
release of the internal dependency.  Upon investigation it turned out
that the git tags for the internal dependency, when sorted using
&lt;a href=&quot;https://semver.org/&quot;&gt;semver&lt;/a&gt;, showed an old release as the most
recent.&lt;/p&gt;

&lt;p&gt;I found it useful to create an alias that outputs the git tags sorted by
semver.  I used the handy &lt;code class=&quot;highlighter-rouge&quot;&gt;semver&lt;/code&gt; npm module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install --verbose --global semver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and with that the following bash function works:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function semvergittags() {
  semver `git tag -l | tr '\n' ' '`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ejburns$ semvergittags
0.1.11
1.0.0-ea07-b0
1.0.0-ea07-b1
1.0.0-ea08-b1
1.0.0-ea11-b1
1.0.0-ea12-b1
1.0.0-ea13
1.0.0-ea14
1.0.0-ea15
1.0.0-ea16
1.0.0-ea17
1.0.0-ea18
1.0.0-ea19
1.0.0-ea20
1.0.0-ea21
1.0.0-ea22
1.0.0-ea23
1.0.0-ea24
1.0.0-ea25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I fixed the git tags using this
&lt;a href=&quot;https://stackoverflow.com/questions/1028649/how-do-you-rename-a-git-tag&quot;&gt;answer from stack overflow&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag new old
git tag -d old
git push origin :refs/tags/old
git push --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I gave the answer an upvote because they shared this additional tip:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, make sure that the other users remove the deleted tag. Please
tell them (co-workers) to run the following command:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --prune --tags&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s the sort of thing that could easily be forgotten and cause more
head scratching.&lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Getting Started with Wireshark</title><link href="/blog/2018/10/29/wireshark-getting-started.html" rel="alternate" type="text/html" title="Getting Started with Wireshark" /><published>2018-10-29T14:00:00-04:00</published><updated>2018-10-29T14:00:00-04:00</updated><id>/blog/2018/10/29/wireshark-getting-started</id><content type="html" xml:base="/blog/2018/10/29/wireshark-getting-started.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;I had never used Wireshark in earnest before today.  Here are some notes
for the next time I have to use it.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;h3 id=&quot;create-a-launcher-that-lets-you-run-multiple-wireshark-windows-at-the-same-time&quot;&gt;Create a launcher that lets you run multiple Wireshark windows at the same time.&lt;/h3&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;Automator&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;run shell script&lt;/code&gt; action to execute this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open -n /Applications/Wireshark.app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Put this in the dock.  Bonus points for using the Cmd-i copy/paste icon
trick.&lt;/p&gt;

&lt;h3 id=&quot;configure-some-useful-columns&quot;&gt;Configure some useful columns&lt;/h3&gt;

&lt;p&gt;This five minute
&lt;a href=&quot;http://quietube7.com/v.php/http://www.youtube.com/watch?v=FHO8SdKighY&quot;&gt;YouTube&lt;/a&gt;
video shows some tips for initial setup of Wireshark.&lt;/p&gt;

&lt;h3 id=&quot;make-sure-you-set-it-up-to-capture-http2&quot;&gt;Make sure you set it up to capture HTTP2&lt;/h3&gt;

&lt;p&gt;From
&lt;a href=&quot;https://github.com/tony612/grpc-elixir/wiki/How-to-capture-HTTP2-packages-using-Wireshark&quot;&gt;this blog post&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    gRPC is based on HTTP/2. So we have to analyze packages to solve some
    difficult problems related to the protocol. This wiki introduces how
    to do this using Wireshark because capturing packages of HTTP/2 is a
    little different with HTTP/TCP.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   Download Wireshark of recent versions.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       Add your port to HTTP protocols:
           Open Preferences
           Select Protocols&amp;gt;HTTP. HTTP2 works too, but HTTP is enough
           Add your HTTP/2 port like(50051) to TCP ports
           Click OK to save the config
       Select(Double click) your network interfaces like Loopback: lo0(local)
       Input http2 in the filter
       Run your gRPC applications
       Stop(Capture&amp;gt;Stop). Then you can analyze the packages or save to a file for using later.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;how-does-it-work-in-general&quot;&gt;How does it work in general?&lt;/h3&gt;

&lt;p&gt;When you start Wireshark, it asks you to select which network
interface(s) from which to capture packets.  If you’re doing localhost
stuff, just doubleclick &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.  It will start showing data.
You can quickly type some text in the “Apply a display filter …” text
area at the top to constrain what sort of information is shown.  For
example, type &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;http2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc&lt;/code&gt; and press enter.  From this
point on, only traffic related to those protocols is shown.  The filter
language is incredibly rich and powerful.&lt;/p&gt;

&lt;h3 id=&quot;using-wireshark-to-debug-grpc-traffic&quot;&gt;Using Wireshark to debug gRPC traffic&lt;/h3&gt;

&lt;p&gt;My current project involves gRPC.  My mentor
&lt;a href=&quot;http://www.notshabby.net/author/Ryan/&quot;&gt;Ryan Lubke&lt;/a&gt; shared the
follomwing tip when using Wireshark to inspect gRPC traffic, distilled
here as an ordered list.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start Wireshark using the launcher above&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Double click &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;..using this filter&lt;/code&gt; text area and press enter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start your gRPC traffic generation.  The window should look like the
following.  Every row in the top pane is a packet of traffic that
passes the filter above.  &lt;img src=&quot;/blog/assets/20181029-wireshark-01.png&quot; alt=&quot;Wireshark image showing gRPC packets&quot; title=&quot;Wireshark with
gRPC packets&quot; /&gt; Note that the title of the window is &lt;code class=&quot;highlighter-rouge&quot;&gt;Loopback: lo0&lt;/code&gt;.
Each Wireshark session listens on one network interface.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To see the actual gRPC traffic, right click one packet (row) in the
top pane, and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Follow &amp;gt; TCP Stream&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/20181029-wireshark-02.png&quot; alt=&quot;Wireshark showing follow TCP&quot; title=&quot;Wireshark showing follow
TCP&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The actual HTTP/2 traffic sent over gRPC is shown here:  &lt;img src=&quot;/blog/assets/20181029-wireshark-03.png&quot; alt=&quot;Wireshark image showing gRPC packets&quot; title=&quot;Wireshark with
gRPC packets&quot; /&gt;  The text search feature is extremely useful.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wireshark is an incredibly powerful tool.  It’s worth your time to learn
it well.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Fetchmail Hangs: Approach to Debugging</title><link href="/blog/2018/10/14/fetchmail-hangs.html" rel="alternate" type="text/html" title="Fetchmail Hangs: Approach to Debugging" /><published>2018-10-14T11:00:00-04:00</published><updated>2018-10-14T11:00:00-04:00</updated><id>/blog/2018/10/14/fetchmail-hangs</id><content type="html" xml:base="/blog/2018/10/14/fetchmail-hangs.html">&lt;h2 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Symptom&lt;/em&gt;: Fetchmail hangs when fetching messages.  When it happens in
fetchmail, it happens in Thunderbird as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cause&lt;/em&gt;: Certain messages seem to cause the &lt;code class=&quot;highlighter-rouge&quot;&gt;stbeehive.oracle.com&lt;/code&gt; IMAP
server to hang when fetching headers with the IMAP
(&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-imap-imap4-06&quot;&gt;RFC-1730&lt;/a&gt;)
&lt;code class=&quot;highlighter-rouge&quot;&gt;FETCH 1 RFC822.HEADER&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Resolution&lt;/em&gt;: This is a cheezy workaround: delete the message that
causes the hang and it seems to unblock the rest of the fetching.  You
can do this in Thunderbird or with IMAP directly.&lt;/p&gt;

&lt;h2 id=&quot;details&quot;&gt;Details&lt;/h2&gt;

&lt;p&gt;For the past fifteen years I have been trying to avoid
&lt;a href=&quot;https://www.poets.org/poetsorg/poem/do-not-go-gentle-good-night&quot;&gt;going quietly into that good night&lt;/a&gt;
of using another email program other than my beloved and highly
customized Emacs/VM.  This means occasionally things will just stop
working as the world around me changes and I try to stay the same (at
least as far as
&lt;a href=&quot;https://searchnetworking.techtarget.com/definition/mail-user-agent&quot;&gt;MUAs&lt;/a&gt;
go).  This happened this week: fetchmail would hang.  I observed that
Thunderbird would hang also.&lt;/p&gt;

&lt;h3 id=&quot;diagnosis-steps&quot;&gt;Diagnosis steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Enable verbose when fetching.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetchmail -v -v -f fetchmailrc-oracle
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Observe the IMAP protocol interaction with the server.  For example:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetchmail: IMAP&amp;gt; A0122 FETCH 1 RFC822.HEADER
fetchmail: IMAP&amp;lt; * 1 FETCH (RFC822.HEADER {734}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;In this the case of this particular bug, it would hang on just such a
  header fetch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Experiment with direct IMAP interaction, using the IMAP protocol
interation from the preceding step as a guide.  Log in to the IMAP
server with the following commands:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl s_client -crlf -connect stbeehive.oracle.com:993
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;With this transcript:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A0001 CAPABILITY
+* CAPABILITY IMAP4REV1 IDLE AUTH=PLAIN
+A0001 OK CAPABILITY completed
A0002 LOGIN &quot;email address&quot; &amp;lt;PASSWORD HERE&amp;gt;
+A0002 OK LOGIN completed
A0003 SELECT &quot;INBOX&quot;
+* 90 EXISTS
+* 0 RECENT
+* OK [UIDVALIDITY 4094122] UID validity status
+* OK [UIDNEXT 326362] Predicted next UID
+* FLAGS (\Seen \Deleted \Answered \Forwarded \Redirected \Flagged \Hidden \Draft $MDNSent)
+* OK [PERMANENTFLAGS (\Seen \Deleted \Answered \Forwarded \Redirected \Flagged \Hidden \Draft $MDNSent)] Permanent flags
+A0003 OK [READ-WRITE] SELECT completed
A0004 EXPUNGE
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This technique enabled me to see what was going on.&lt;/p&gt;</content><author><name></name></author><summary type="html">Executive Summary</summary></entry><entry><title type="html">Secrets of the Rockstar Programmers at Orlando JUG, 6pm Thursday 12 July 2018</title><link href="/blog/2018/07/10/orlando-jug-rockstar.html" rel="alternate" type="text/html" title="Secrets of the Rockstar Programmers at Orlando JUG, 6pm Thursday 12 July 2018" /><published>2018-07-10T13:00:00-04:00</published><updated>2018-07-10T13:00:00-04:00</updated><id>/blog/2018/07/10/orlando-jug-rockstar</id><content type="html" xml:base="/blog/2018/07/10/orlando-jug-rockstar.html">&lt;p&gt;I’m blessed with the opportunity to present the current version of my
“Secrets of the Rockstar Programmers” talk at a special edition of the
Orlando Java User’s Group.  JUG leader Mike Levin is even more blessed
with the opportunity to visit &lt;a href=&quot;http://www.jcrete.org/&quot;&gt;JCrete&lt;/a&gt;, and so
chose to re-schedule the July meeting rather than canceling it.&lt;/p&gt;

&lt;p&gt;As usual, there is free pizza!&lt;/p&gt;

&lt;h2 id=&quot;location&quot;&gt;Location&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intrepid Conference Room
Oracle America, Inc.
7453 TG Lee Boulevard
Orlando, FL 32822-4416
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/maps/QGYSUhGpHFS2&quot;&gt;Map Link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rsvps&quot;&gt;RSVPs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codetown.com/events/orlandojug-secrets-of-the-programming-rock-stars&quot;&gt;CODETOWN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/OrlandoJUG/events/252475286/&quot;&gt;MeetUp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;How in the world can I keep up with all this information coming at me
every day?&lt;/p&gt;

&lt;p&gt;What can I do to ensure that I keep bringing value to my employer or
client and to help ensure continued career success?&lt;/p&gt;

&lt;p&gt;What will the practice of software development look like in ten years
time?&lt;/p&gt;

&lt;p&gt;How do I know where to invest time and effort in stewarding my skillset?&lt;/p&gt;

&lt;p&gt;In 2008, Ed Burns interviewed top programmers from a variety of software
disciplines for the book “Secrets of the Rock Star Programmers”. Now
in 2018, Ed revisits the cross section of secrets (aka character
attributes) exhibited by these rockstars for the current world of
programming.&lt;/p&gt;

&lt;p&gt;Join this session to learn more about these characteristics that can
help you become a better programmer.&lt;/p&gt;

&lt;h2 id=&quot;purpose-of-the-talk&quot;&gt;Purpose of the Talk&lt;/h2&gt;

&lt;p&gt;Ed interviews some of the best programmers of our time and shares their
strategies for success.&lt;/p&gt;

&lt;h2 id=&quot;target-audience&quot;&gt;Target Audience&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Any developer wanting to improve their career skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;audience-takeaway&quot;&gt;Audience Takeaway&lt;/h2&gt;

&lt;p&gt;A set of concrete, actionable steps you can take right now to become a
better developer.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m blessed with the opportunity to present the current version of my “Secrets of the Rockstar Programmers” talk at a special edition of the Orlando Java User’s Group. JUG leader Mike Levin is even more blessed with the opportunity to visit JCrete, and so chose to re-schedule the July meeting rather than canceling it.</summary></entry><entry><title type="html">JavaLand 2018 Holly Cummins</title><link href="/blog/2018/03/12/javaland-holly-cummins.html" rel="alternate" type="text/html" title="JavaLand 2018 Holly Cummins" /><published>2018-03-12T04:45:00-04:00</published><updated>2018-03-12T04:45:00-04:00</updated><id>/blog/2018/03/12/javaland-holly-cummins</id><content type="html" xml:base="/blog/2018/03/12/javaland-holly-cummins.html">&lt;p&gt;Holly leads the &quot;Cloud Garage&quot; at IBM, working with customers to
  create solutions when moving to the cloud.&lt;/p&gt;

&lt;p&gt;Holly gives the summary of the &quot;Cloudy With A Chance Of Meatballs&quot;
  movie.&lt;/p&gt;

&lt;p&gt;Story of the hero who wanted to make the world better, but ended up
  making some mistakes.&lt;/p&gt;

&lt;p&gt;Cites Joseph Campbell, who observed the commonalities among the
world's myths.  He finds the recurring themes among them.  He formed the
idea of the &quot;monomyth&quot;.  There is actually only one story: the
  quest.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;all to action
	  &lt;/p&gt;&lt;/li&gt;

     	  &lt;li&gt;&lt;p&gt;obstacles
	  &lt;/p&gt;&lt;/li&gt;
          
         &lt;li&gt;&lt;p&gt;reward
	  &lt;/p&gt;&lt;/li&gt;

	&lt;/ul&gt;

&lt;p&gt;Observes we are the hero of our own story.&lt;/p&gt;

&lt;p&gt;Some aspects of being that with respect to being a developer.&lt;/p&gt;

&lt;p&gt;Listed some rockstar programmer skills: automate, tools mastery, etc.&lt;/p&gt;

&lt;h2&gt;Hero stories for the cloud&lt;/h2&gt;

&lt;p&gt;Long deploy times.&lt;/p&gt;

&lt;h2&gt;But what about the obstacles&lt;/h2&gt;

&lt;p&gt;Adoption is still not complete.  Relates this to the hero's &quot;call to
  action&quot;.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Security fears&lt;/p&gt;

            &lt;p&gt;Bank: Watson discovery.  The crawler that populates the
              ML by putting all the data in the cloud.&lt;/p&gt;

            &lt;p&gt;But you must encrypt it.&lt;/p&gt;

            &lt;p&gt;In the traditional stack, the dev is responsible for the
            security of their code.  In the cloud, the entire stack,
            including the OS, is the built artifact.  So the developer
            must take responsibility for OS patches, and everything on
            up through the stack.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Cloud-nativeness&lt;/p&gt;

            &lt;p&gt;Definition: it's not just centralized computing.&lt;/p&gt;

            &lt;p&gt;History lesson: tty, mirocomputer, client-server, PC,
            Grid computing, laptops, cloud, edge computing.  She used a
              sine wave to cover what I often depict as a pendulum.&lt;/p&gt;

            &lt;p&gt;CNCF: Containerized, Dynamically orchestrated, microservices
              oriented.&lt;/p&gt;

            &lt;p&gt;Holly adds: elasticity and agility, as well as assuming
              everything is unreliable.&lt;/p&gt;

            &lt;p&gt;JVM considerations: the traditional Rafael Benevides
              concerns: containers get killed.&lt;/p&gt;

            &lt;p&gt;Logging: the need for data analytics simply to get access
              to the logs.  Prometheus.&lt;/p&gt;

            &lt;p&gt;Microservices are hard.  They seem like a great idea, but
            when you try them.  Here is where she brings back in the
              meatball movie.&lt;/p&gt;

            &lt;p&gt;Cost for Kubernetes clusters, especially if you fail to
              tear them down when you are done.&lt;/p&gt;

            &lt;p&gt;Needing a cloud to manage your cloud.&lt;/p&gt;

          &lt;/li&gt;

	&lt;/ul&gt;

        &lt;h3&gt;Trends&lt;/h3&gt;

&lt;p&gt;QaaS quantum as a service&lt;/p&gt;

&lt;p&gt;renewed interest in IaaS because the I can have super expensive
  hardware, such as GPU loaded machines.&lt;/p&gt;

&lt;h3&gt;Cloud Native Thinking&lt;/h3&gt;

&lt;p&gt;Digital Native analogy&lt;/p&gt;</content><author><name></name></author><summary type="html">Holly leads the &quot;Cloud Garage&quot; at IBM, working with customers to create solutions when moving to the cloud.</summary></entry><entry><title type="html">JavaLand 2018 Arun Gupta Service Discovery In Container Orchestration Frameworks</title><link href="/blog/2018/03/12/javaland-arun-gupta.html" rel="alternate" type="text/html" title="JavaLand 2018 Arun Gupta Service Discovery In Container Orchestration Frameworks" /><published>2018-03-12T03:00:00-04:00</published><updated>2018-03-12T03:00:00-04:00</updated><id>/blog/2018/03/12/javaland-arun-gupta</id><content type="html" xml:base="/blog/2018/03/12/javaland-arun-gupta.html">&lt;p&gt;On a cold and wet morning in Phantasialand, my old pal Arun Gupta
gave The first regular session at JavaLand 2018.  There was an
impressive number of attendees, considering the early hour, even before
  the opening greeting from DOAG CEO Fried Saacke.&lt;/p&gt;

&lt;p&gt;Speaker Bio&lt;/p&gt;

&lt;p&gt;The need for service discovery.  How else can services know how to
communicate with other services?  The need for this is even more acute
in the cloud when the location and cardinality of the services is highly
dynamic.  This works best with stateless services.&lt;/p&gt;

&lt;p&gt;Examples: Docker Swarm, Kubernetes, Amazon ECS, Mesosphere&lt;/p&gt;

&lt;h2&gt;Docker Swarm&lt;/h2&gt;

&lt;p&gt;Docker for AWS.  A cloud formation template, automatic multi-host
cluster.  Well integrated with AWS constructs: autoscaling, load
  balancing, logs in CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker service create --replicas 3 --name web jboss/wildfly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The default: master and four nodes.  Three replicas mean you get
  three replicas of the whole five nodes.&lt;/p&gt;

&lt;h3&gt;Routing Mesh&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker service create --replicas 3 --name web -p 8080:8080 jboss/wildfly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The addition of the port configures the load balancer&lt;/p&gt;

&lt;h3&gt;Docker Compose File&lt;/h3&gt;

&lt;p&gt;Defines the docker stack, containing your services.&lt;/p&gt;

&lt;h2&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;CNCF project&lt;/p&gt;

&lt;p&gt;Box diagram of parts of the Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Scheduler and Controller Manager watch the etcd, because the etcd is
  easily watchable.&lt;/p&gt;

&lt;p&gt;The labels are in etcd, this allows the pods and services to be
  loosely coupled.&lt;/p&gt;

&lt;p&gt;We need an ingress LB that allows your service to be seen from the
  outside.&lt;/p&gt;

&lt;p&gt;Arun: 57% of K8s in the world runs on AWS.&lt;/p&gt;</content><author><name></name></author><summary type="html">On a cold and wet morning in Phantasialand, my old pal Arun Gupta gave The first regular session at JavaLand 2018. There was an impressive number of attendees, considering the early hour, even before the opening greeting from DOAG CEO Fried Saacke.</summary></entry><entry><title type="html">JavaOne 2017 Wrap Up</title><link href="/blog/2017/11/30/javaone-2017-wrapup.html" rel="alternate" type="text/html" title="JavaOne 2017 Wrap Up" /><published>2017-11-30T08:00:00-05:00</published><updated>2017-11-30T08:00:00-05:00</updated><id>/blog/2017/11/30/javaone-2017-wrapup</id><content type="html" xml:base="/blog/2017/11/30/javaone-2017-wrapup.html">&lt;p&gt;Last year, at JavaOne 2016, I had the honor of unlocking
the &lt;a href=&quot;https://www.oracle.com/javaone/rock-star-wall-of-fame.html#burns&quot;&gt;JavaOne
Rockstar&lt;/a&gt; achievement.  2017 was my first JavaOne after that, and I
can say that the experience wasn't any different from the previous
sixteen or so years I've been blessed to speak: exhausting, informative
and inspiring.  This blog post reviews the sessions I attended and
  presented and shares my thoughts and notes if I have them.&lt;/p&gt;

&lt;h2&gt;Sessions&lt;/h2&gt;

&lt;p&gt;The Sunday of JavaOne has always been a day for the Java community to
  shine and share their work and highlights from the previous year.
  This year, the day was formally labeled &quot;Developer Community Day&quot;.
  Some differences from last year: it was not formally billed as
  &quot;NetBeans Day&quot;, all the talks were from non-Oracle speakers, all from
  the community, there was a whole lot of JUG content, there were
  several &quot;career focused&quot; talks.&lt;/p&gt;

&lt;h3&gt;Sunday&lt;/h3&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON2197&amp;showEnrolled=false&quot;&gt;Java, the JCP, and You [CON2197]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Heather Vancura, director of the JCP, asked me to co-present at this
session about how to get involved in the JCP, the official way that the
community brings its ideas into the Java platform.  The JCP is better
than ever at this job, so with Java EE moving to the Eclipse Foundation
as EE4J, it is a very exciting time for the Java Community Process.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://oracle.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON5074&quot;&gt;Event Sourcing with JVM Languages [CON5074]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Rahul Somasunderam shared his experiences working with Event
Sourcing, a technique of treating logs as the source of truth for a
software system, rather than some other kind of persistent store such as
a database.  Rahul has created
the &lt;a href=&quot;https://github.com/rahulsom/grooves&quot;&gt;Grooves&lt;/a&gt; framework
to provide this abstraction.  Here are my raw notes.  The presentation
  is available in the content catalog link above.  The presentation source is available at &lt;a href=&quot;https://bit.ly/2017-es&quot;&gt;bit.ly/2017-es&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  
&lt;p&gt;Needed a java based event sourcing solution, looked around in 2016,
  nothing fit.&lt;/p&gt;

&lt;p&gt;Definition: treat your database like you treat your logs.&lt;/p&gt;

&lt;p&gt;Everyone is comfortable looking at logs.  Log files: you can create
  entrys and read them.  You cannot update or delete entries.&lt;/p&gt;

&lt;p&gt;Bad example 1: bank account balance.  @Transactional usage.&lt;/p&gt;

&lt;p&gt;Scan of old school German bank passbook.  Great example of a log.
  This is what event sourcing should be doing in any domain.&lt;/p&gt;

&lt;p&gt;But that was banking.  If you look at your logs and debug your
application, you are doing event sourcing in your mind.  Banks defined
  their business model hundreds of years ago.&lt;/p&gt;

&lt;p&gt;Aggregate: Account.  Events: Transcation, AtmWithdrawl.  Snapshot:
  AccountSummary.&lt;/p&gt;

&lt;p&gt;Computing snapshots: S sub N = f(S0, E1..EN)&lt;/p&gt;

&lt;p&gt;The way to take your log and play it forward.&lt;/p&gt;

&lt;p&gt;Incremental snapshots.  Use an existing Snapshot as an input entry in
  computing a new snapshot.&lt;/p&gt;

&lt;p&gt;Revert.  You can't delete events but you can have new events that
  represent deletes.&lt;/p&gt;

&lt;p&gt;Bad Example 2: Joins in event sourcing.&lt;/p&gt;

&lt;p&gt;Grooves domain objects: Aggregates.  Also uses RxJava
  Observables.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;Some code examples that basically show how to do ORM using
	  this thing.
	  &lt;/li&gt;


          &lt;li&gt;&lt;p&gt;There is an API for querying, creating snapshots, using
          annotations.
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Handling Errors.  Allows best effort approach.
	  &lt;/p&gt;&lt;/li&gt;


	&lt;/ul&gt;


&lt;p&gt;Great example: Lance Armstrong Tour de France victories.  Question:
How many Tour de France victories does he have?  The answer depends on
  when you ask the question.&lt;/p&gt;

&lt;p&gt;Be very careful what your events look like.  It's very hard to modify
  them.&lt;/p&gt;

&lt;p&gt;Non event sources of data.  When the intent of the user is not clear
  from the datasource.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Other Sessions of Note:&lt;/p&gt;

&lt;p&gt;Mon: 17:30 CON7474 ES, Distributed Systems, and CQRS with Java EE.&lt;/p&gt;

&lt;p&gt;Tue: 13:15 CON4083 Async by Default, Synchronous when Necessary&lt;/p&gt;

&lt;p&gt;Wed: 14:45 CON4277 Three Microservices Patterns to Tear Down Your Monoliths&lt;/p&gt;

&lt;p&gt;Needed a java based event sourcing solution, looked around in 2016,
  nothing fit.&lt;/p&gt;

&lt;p&gt;Definition: treat your database like you treat your logs.&lt;/p&gt;

&lt;p&gt;Everyone is comfortable looking at logs.  Log files: you can create
  entrys and read them.  You cannot update or delete entries.&lt;/p&gt;

&lt;p&gt;Bad example 1: bank account balance.  @Transactional usage.&lt;/p&gt;

&lt;p&gt;Scan of old school German bank passbook.  Great example of a log.
  This is what event sourcing should be doing in any domain.&lt;/p&gt;

&lt;p&gt;But that was banking.  If you look at your logs and debug your
application, you are doing event sourcing in your mind.  Banks defined
  their business model hundreds of years ago.&lt;/p&gt;

&lt;p&gt;Aggregate: Account.  Events: Transcation, AtmWithdrawl.  Snapshot:
  AccountSummary.&lt;/p&gt;

&lt;p&gt;Computing snapshots: S sub N = f(S0, E1..EN)&lt;/p&gt;

&lt;p&gt;The way to take your log and play it forward.&lt;/p&gt;

&lt;p&gt;Incremental snapshots.  Use an existing Snapshot as an input entry in
  computing a new snapshot.&lt;/p&gt;

&lt;p&gt;Revert.  You can't delete events but you can have new events that
  represent deletes.&lt;/p&gt;

&lt;p&gt;Bad Example 2: Joins in event sourcing.&lt;/p&gt;

&lt;p&gt;Grooves domain objects: Aggregates.  Also uses RxJava
  Observables.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;Some code examples that basically show how to do ORM using
	  this thing.
	  &lt;/li&gt;


          &lt;li&gt;&lt;p&gt;There is an API for querying, creating snapshots, using
          annotations.
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Handling Errors.  Allows best effort approach.
	  &lt;/p&gt;&lt;/li&gt;


	&lt;/ul&gt;


&lt;p&gt;Great example: Lance Armstrong Tour de France victories.  Question:
How many Tour de France victories does he have?  The answer depends on
  when you ask the question.&lt;/p&gt;

&lt;p&gt;Be very careful what your events look like.  It's very hard to modify
  them.&lt;/p&gt;

&lt;p&gt;Non event sources of data.  When the intent of the user is not clear
  from the datasource.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Other Sessions of Note:&lt;/p&gt;

&lt;p&gt;Mon: 17:30 CON7474 ES, Distributed Systems, and CQRS with Java EE.&lt;/p&gt;

&lt;p&gt;Tue: 13:15 CON4083 Async by Default, Synchronous when Necessary&lt;/p&gt;

&lt;p&gt;Wed: 14:45 CON4277 Three Microservices Patterns to Tear Down Your Monoliths&lt;/p&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON7615&amp;showEnrolled=false&quot;&gt;Secrets of Rock Star Developers (and How to Become One!) [CON7615]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I was invited to co-present at this session by my good
friend &lt;a href=&quot;https://code4.life/&quot;&gt;Bruno Souza&lt;/a&gt; regarding some
lessons in my book &lt;a href=&quot;http://ridingthecrest.com/&quot;&gt;Secrets of the
Rock Star Developers&lt;/a&gt;.  Bruno also invited Yuji Kubota, a developer
from NTT in Japan.  Yuji shared his experiences in achieving developer
  proficiency in spite of his complete hearing impairment.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON7624&amp;showEnrolled=false&quot;&gt;Powerful Lessons from Top Java EE Experts [CON7624]
&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I was invited to participate in this panel discussion
by &lt;a href=&quot;http://eldermoraes.com/&quot;&gt;Elder Moraes&lt;/a&gt;, who is now
working for Oracle to continue to advance Java EE 8 in the community in
Brazil.  I was a bit skeptical about the prospects of this panel because
Elder had invited fourteen (14!) people to be panelists.  Perhaps he did
  not expect us all to show up, but 13 of us did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20171001-con7615.jpg&quot; alt=&quot;Image of panelists&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My records show Elder, Adam Bien, Bruno Souza, David Heffelfinger,
Edson Yanaga, Ivar Grimstad, Steve Millidge, Kevin Sutter, Reza Rahman,
and Ruslan Synytsky&lt;/p&gt;

&lt;p&gt;With that large number of people, and only an hour, it was a wonder
we were coherent at all, but I guess it speaks to the quality of the
Java EE community's ability to collaborate that we had a productive and
informative session.  Of course, the big news was the decision by Oracle
to invest in handing off the IP of its Java EE JSRs, as of version Java
EE 8, to the Eclipse Foundation to be the basis of a new top level
project
there: &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j&quot;&gt;EE4J&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Monday&lt;/h3&gt;

&lt;p&gt;I started the day off with booth duty.  This year, the conference was
back at Moscone, but at Moscone West.  The exhibit area was much larger
than the hotel space at the Hilton Union Square from previous years.  My
booth demo was a part of the new Serverless Fn project booth, but it was
only runnable when I was in the booth, as it was a last minute
  addition.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON2022&amp;showEnrolled=false&quot;&gt;Servlet 4.0: A New Twist on an Old Favorite [CON2022]
&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This was one of my three conference sessions I had the opportunity to
present.  The slides are in the content catalog at the previous
link, and the video
is &lt;a href=&quot;https://www.youtube.com/watch?v=k4tSKHH63fE&quot;&gt;at YouTube&lt;/a&gt;.
With the announcement of EE4J, Oracle is getting out of the business of
leading Java EE specs, so this was very likely the last time I presented
about Servlet at JavaOne.  You never know what the future holds, but I
approached it that way and gave it my all.  I hope that comes across in
  the video.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.oracle.com/javaone/keynotes.html#monday&quot;&gt;Java Keynote&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This was the big one.  The full video is
at &lt;a href=&quot;https://www.youtube.com/watch?v=UNg9lmk60sg&quot;&gt;YouTube&lt;/a&gt;.
  Big announcements included:&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;EE4J
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Debut of the &lt;a href=&quot;https://fnproject.io&quot;&gt;Fn Project&lt;/a&gt;
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Demonstration of Project Jafar, Cloud Performance
          Tuning and flight recorder
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Demonstration
	  of &lt;a href=&quot;http://www.wercker.com/java&quot;&gt;Oracle Wercker&lt;/a&gt;
	  cloud container native development pipeline system.  Wercker
	  allows you to build, deploy, and operate Kubernetes based
	  containerized cloud applications.
	  &lt;/p&gt;&lt;/li&gt;
          
	  &lt;li&gt;&lt;p&gt;Java SE 9 final release overview
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Announcement of new release model for Java: every 6th
	  months.  This brought along with it a new naming scheme: YY.M.
	  That means the next release is 18.3.
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;There was also an interesting keynote from Intel VP of
          System Technologies Michael Green.  Mr. Green's keynote starts at &lt;a href=&quot;https://www.youtube.com/watch?v=UNg9lmk60sg#t=34m59s&quot;&gt;34:59&lt;/a&gt;
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;There were some nifty demos at the beginning of the
          keynote.
	  &lt;/p&gt;&lt;/li&gt;

	&lt;/ul&gt;

        &lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON3920&amp;showEnrolled=false&quot;&gt;Building a Serverless State Service for the Cloud with Java 9 [CON3920]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This session is the one I was most excited to give, because it is the
future for me at Oracle.  After being allowed to finish Java EE 8
(thanks in no small part to the community and Oracle's attentiveness to
it), I was given the opportunity to join the team responsible
for &lt;a href=&quot;http://www.oracle.com/technetwork/middleware/coherence/overview/&quot;&gt;Oracle
Coherence&lt;/a&gt;.  This team is building a new state service for the cloud,
based on Coherence, but with a much simpler API.  In fact, you can think
of it as an API-less service since it will be exposed with cloud enabled
implementations of existing Java 8 collections data structures, with
some additions for things not present in the case of an entirely local
collection.  Unfortunately, this talk was not recorded, but the slides
  are available in the content catalog link above.&lt;/p&gt;

&lt;h3&gt;Tuesday&lt;/h3&gt;

&lt;p&gt;I did another spell of booth duty in the morning, as well as a panel
discussion on the DevLive stage with Heather Vancura, Antoine-Sabot
Durand, and Linda DeMichiel.  The interview is
  at &lt;a href=&quot;https://www.youtube.com/watch?v=cTaBUu6C47U&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=IGN7979&amp;showEnrolled=false&quot;&gt;Ignite Session [IGN7979]: Java Your Next Theremin, among other talks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kevin Nilson, leader of the Silicon Valley JUG and wonderful guy
organized an &quot;Ignite Session&quot; again.  I'd never done one before, but
after the one I attended at DevoxxUS in April I felt I could do it.  The
idea with an Ignite session is you get 5 minutes to present your talk.
In that five minutes you get 20 slides, each advancing every 15 seconds,
on auto-advance.  I gave a talk
about &lt;a href=&quot;https://static.rainfocus.com/oracle/oow17/sess/1504978192376001CTLb/PF/20171003-javaone-lightning-theremin_1507731853795001sVbN.pptx&quot;&gt;building
a Theremin&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Wednesday&lt;/h3&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON2023&amp;showEnrolled=false&quot;&gt;Contemporary Java Web Applications with JSF 2.3 [CON2023]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This was the most monentous talk for me personally.  Fifteen years,
six months, and seven days after giving my first JavaOne talk about JSF
I gave what is likely to be my last, for the same reason as with
Servlet.  But don't dismay, the future is bright for JSF.  JSF is in the
first batch of projects to be handed off to EE4J, and it will very
  likely be taken forward by JSF community expert Arjan Tijms.&lt;/p&gt;

&lt;p&gt;Slides are above and video is &lt;a href=&quot;https://www.youtube.com/watch?v=yshXLB_HdhU&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Thursday&lt;/h3&gt;

&lt;p&gt;Not having to deliver any sessions, speak to any customers, do any
booth duty, or sit-in for any guest spots, I was able to attend sessions
  today.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://www.oracle.com/javaone/keynotes.html#thursday&quot;&gt;Java Community Keynote&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20171005-community-keynote.jpg&quot; alt=&quot;Image of Duke's Choice Award Winners&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This fun keynote is available
at &lt;a href=&quot;https://www.oracle.com/javaone/on-demand.html?bcid=5604479599001&quot;&gt;Oracle&lt;/a&gt;.&lt;/p&gt;


&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1706&amp;showEnrolled=false&quot;&gt;Services, Assemble! Apply MVP Principles to Create Microservices Without Chaos [CON1706]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This talk by my friend Mark Heckler talked about how to apply MVP
  (Minimum Viable Product) principles to create cutting-edge
  Microservices without chaos with Spring Cloud/Netflix OSS&lt;/p&gt;

&lt;p&gt;Here are my raw notes.&lt;/p&gt;

	&lt;ul&gt;

&lt;p&gt;@MkHeck&lt;/p&gt;

&lt;p&gt;Glad you're here to the end.&lt;/p&gt;

&lt;p&gt;Listed some Pivotal products: Spring.&lt;/p&gt;

&lt;p&gt;Who am I silde.&lt;/p&gt;

&lt;p&gt;Likes Microservices, becuse it addresses many of the problems of the
  Monoliths.&lt;/p&gt;
&lt;p&gt;Analogy of Microservices to the Avengers.  Together they are more
than the sum of the parts.  They come together to form a resilient
  system.&lt;/p&gt;

&lt;p&gt;Enablers: Monoliths are simpler from the outside.  Microservices
introduces a lot of complexity.  Enablers: Spring Boot and Spring Cloud.
Spring Boot is your onramp in becoming productive in the cloud.  Any
  place you can deploy a JVM, you can deploy Spring Boot.&lt;/p&gt;

&lt;p&gt;Spring Cloud OSS&lt;/p&gt;

&lt;p&gt;Operational: config, service registry, circuit breaker, load
balancer, intelligent router, asyc messaging, distributed tracing,
security/oauth.&lt;/p&gt;

&lt;p&gt;Impl: Spring Cloud Config, Netflix Eureaka, Netflix Hystrix, Netflix
Ribbon, Netflix Zuul, Spring Cloud Stream, Spring Cloud Sleuth, Spring
  Cloud Security&lt;/p&gt;

&lt;p&gt;With a good circuit breaker, you can nest them.&lt;/p&gt;

&lt;p&gt;Demo: start.spring.io.  Lots of extolling the virtues of this web
  app.&lt;/p&gt;


&lt;p&gt;application.properties, renamed to bootstrap.properties&lt;/p&gt;

&lt;p&gt;Pointed out 80/20 rule.&lt;/p&gt;

&lt;p&gt;Zuul plays a role of deompising a monolith.&lt;/p&gt;

&lt;/ul&gt;


&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1439&amp;showEnrolled=false&quot;&gt;Container: Check! But What About Persistent Data, Big Data, and Fast Data?! [CON1439]&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This session, by two of the engineers behind Mesosphere and Apache
Mesos, used the 16 bit video game &quot;The Secret of Monkey Island&quot; to
explore the challenges in running stateless services at scale in the
  real world that has state.  Here are my raw notes.&lt;/p&gt;

	&lt;ul&gt;

&lt;p&gt;Joerg Schad and Johaness Unterstein&lt;/p&gt;

&lt;p&gt;Monkey Island theme.&lt;/p&gt;

&lt;p&gt;It all began with a monolith&lt;/p&gt;

&lt;p&gt;Hardware, OS, app&lt;/p&gt;

&lt;p&gt;Hardware, OS, web app&lt;/p&gt;

&lt;p&gt;add horizontal scaling: Hardware, OS, app&lt;/p&gt;

&lt;p&gt;add services under web app.&lt;/p&gt;

&lt;p&gt;Add VMs under OS, and IaaS underVMs&lt;/p&gt;

&lt;p&gt;Replace web app with finer services: Microservices.  Predefined
  interfaces where each is defined to do one thing pretty good.&lt;/p&gt;

&lt;p&gt;Add containers on top of OS: Put more services on each OS
node. Spreadsheet scheduling.&lt;/p&gt;

&lt;p&gt;Container scheduling comes into play.  Resource management.&lt;/p&gt;

&lt;p&gt;Service management: collections of containers.  Excellent pictures of
  containers from container ships sitting in row boats.&lt;/p&gt;

&lt;p&gt;Health and readiness checks.  Health check, &quot;I am ready to serve
  traffic&quot;.&lt;/p&gt;

&lt;p&gt;But how do we get containers into production&lt;/p&gt;

&lt;p&gt;DC/OS maven plugin: mvn docker:build docker:push dcos:deploy&lt;/p&gt;

&lt;p&gt;Or mvn package dcos:uploadArtifact dcos:deployUCR&lt;/p&gt;

&lt;p&gt;MapReduce is crunching Data&lt;/p&gt;

&lt;p&gt;Data Processing: SMACK stack.  1. Events 2. Ingest (Kafka) 3. Store
  (Cassandra) 4. Analyze (Spark) 5. Act (Akka)&lt;/p&gt;

&lt;p&gt;Demo of running DC/OS on AWS.  &lt;/p&gt;

	&lt;/ul&gt;

&lt;h4&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON1416&amp;showEnrolled=false&quot;&gt;Modern Java Recipes [CON1416]&lt;/a&gt;&lt;/h4&gt;
        
&lt;p&gt;The last session of the show, for me, and for many folks, was given
by my fripnd and
fellow &lt;a href=&quot;https://www.facebook.com/nullpointersband/&quot;&gt;NullPointer&lt;/a&gt;
Ken Koussen.  Ken is an excellent instructor and is so good at
explaining complex topics.  Ken has a new book of the same name as this
talk, and he was kind enough to sport me a copy in exchange for a meal
at
cash-only &lt;a href=&quot;https://www.yelp.com/biz/tommys-joynt-san-francisco&quot;&gt;Tommy's
Joynt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are my raw notes.&lt;/p&gt;

&lt;ul&gt;

  &lt;p&gt;Ken Koussen&lt;/p&gt;

&lt;p&gt;A few slides of self promition.&lt;/p&gt;

&lt;p&gt;github.com/koussen/java_8_recipes&lt;/p&gt;

&lt;p&gt;github.com/koussen/java_9_recipes&lt;/p&gt;

&lt;p&gt;The Basics&lt;/p&gt;

&lt;p&gt;streams, lambdas, method references&lt;/p&gt;

&lt;p&gt;Beyond the basics&lt;/p&gt;

&lt;p&gt;Lazy Streams&lt;/p&gt;

&lt;p&gt;The peek method&lt;/p&gt;

&lt;p&gt;Strings as Streams&lt;/p&gt;

&lt;p&gt;anyMatch, allMatch, noneMatch&lt;/p&gt;

&lt;p&gt;collect and reduce&lt;/p&gt;

&lt;p&gt;flatMap vs. Map&lt;/p&gt;

&lt;p&gt;Optional&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Functional interfaces&lt;/p&gt;

&lt;p&gt;taken as given&lt;/p&gt;

&lt;p&gt;Steam produces sequence of elements.  Does not store them.  Does not
  modify them.  Produces new items.  Operations lazy when possible.
  Once you hit a terminal, that stream is done.&lt;/p&gt;

&lt;p&gt;If you use a stream in a method, it should be created in that method.&lt;/p&gt;

&lt;p&gt;operations from source to pipeline.  No items are pulled from source
  until terminal operation is reached.&lt;/p&gt;

&lt;p&gt;Shows the lazyness.  findFirst() is a short circuiting terminal
  operations.&lt;/p&gt;

&lt;p&gt;Debugging with the peek() method.  IntelliJ has a nice plugin called
  StreamDebugger.&lt;/p&gt;

&lt;p&gt;peek() is like .map(n -&gt; { sop(n.entry); } );&lt;/p&gt;

&lt;p&gt;Strings as Streams&lt;/p&gt;

&lt;p&gt;aside: of() method.&lt;/p&gt;

&lt;p&gt;Workaround.  chars() and codePoints() on String.&lt;/p&gt;

&lt;p&gt;codePoints() returns a stream.  &lt;/p&gt;

&lt;code&gt;&lt;pre&gt;
    s.toLowerCase().codePoints().filter().collect(appendCodePoint).toString()
&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;Three argument Collect.&lt;/p&gt;

&lt;/ul&gt;

&lt;p&gt;I was literally the last person to leave the conference baggage area,
as shown in this pic of my lone bag with a member of the Marriott Hotel
  Staff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20171005-last-bag.jpg&quot; alt=&quot;Ed's Bag Is Last&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Goodbye JavaOne.  I hope to see you again next year.&lt;/p&gt;</content><author><name></name></author><summary type="html">Last year, at JavaOne 2016, I had the honor of unlocking the JavaOne Rockstar achievement. 2017 was my first JavaOne after that, and I can say that the experience wasn't any different from the previous sixteen or so years I've been blessed to speak: exhausting, informative and inspiring. This blog post reviews the sessions I attended and presented and shares my thoughts and notes if I have them.</summary></entry><entry><title type="html">JAX-RS 2.1 New Feature Introduction: Server Sent Events Update</title><link href="/blog/2017/10/16/jax-rs-2_1-new-feature-update.html" rel="alternate" type="text/html" title="JAX-RS 2.1 New Feature Introduction: Server Sent Events Update" /><published>2017-10-16T10:00:00-04:00</published><updated>2017-10-16T10:00:00-04:00</updated><id>/blog/2017/10/16/jax-rs-2_1-new-feature-update</id><content type="html" xml:base="/blog/2017/10/16/jax-rs-2_1-new-feature-update.html">&lt;p&gt;I don't know what this says about my memory, but I was doing a little
JAX-RS programming today and when I googled to remind myself of the
particular feature I was using, I ran into &lt;a href=&quot;/blog/2017/02/22/jax-rs-2_1-new-feature-introduction.html&quot;&gt;my own blog
post&lt;/a&gt; about that feature.  It took me a moment to recall that I had
  written that earlier blog post.  I wonder if I'll forget writing this
  one as well?&lt;/p&gt;

&lt;p&gt;Anyhow, both that post and the other one I found, written
  by &lt;a href=&quot;https://www.linkedin.com/in/pavel-bucek-16284614/&quot;&gt;JAX-RS
  Spec Lead Pavel Bucek&lt;/a&gt;
  &amp;lt;&lt;a href=&quot;https://blogs.oracle.com/pavelbucek/jax-rs-21-server-sent-events&quot;&gt;https://blogs.oracle.com/pavelbucek/jax-rs-21-server-sent-events&lt;/a&gt;&amp;gt;
  are now stale with respect to the final version of JAX-RS 2.1.  I
  looked into
  the &lt;a href=&quot;https://github.com/javaee/glassfish-samples&quot;&gt;GlassFish
  Samples&lt;/a&gt; for a similar and simple example, but found none, so I
  took the opportunity to add two samples based on updated content from
  Pavel's and my blog posts.  Please clone it to see the full source
  code.  This blog post documents these two super simple samples.&lt;/p&gt;

&lt;h2&gt;The Simplest JAX-RS SSE Example&lt;/h2&gt;

&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;@Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; SSESimpleResource &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Resource&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; ManagedExecutorService executor&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @GET&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;eventStream&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Produces&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;MediaType.&lt;span style=&quot;color: #006633;&quot;&gt;SERVER_SENT_EVENTS&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; eventStream&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; SseEventSink eventSink,&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; Sse sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; executor.&lt;span style=&quot;color: #006633;&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;SseEventSink sink &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; eventSink&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;event1&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;event2&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;event3&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Athrowable+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Throwable&lt;/span&gt;&lt;/a&gt; e&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; e.&lt;span style=&quot;color: #006633;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Asystem+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;System&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

  &lt;p&gt;Line 4 is a magic injection of
  the &lt;code&gt;&lt;a href=&quot;https://javaee.github.io/javaee-spec/javadocs/javax/enterprise/concurrent/ManagedExecutorService.html&quot;&gt;ManagedExecutorService&lt;/a&gt;&lt;/code&gt;.
  This class is only available in the full profile of Java EE, not the
  web profile.  This sort of service is essential for doing SSE because
  it's the easiest way to hand off the socket for the incoming SSE
  subscription request to a service that can handle the scale of such a
  resource intensive thing.&lt;/p&gt;

  &lt;p&gt;Line 9 and neighboring annotations make it so the HTTP GET Request
  to &quot;/eventStream&quot; will return content-type text/event-stream.  Lines
  11 and 12 are more magic to get handles to the JAX-RS 2.1 APIs for
  SSE.  &lt;code&gt;SseEventSink&lt;/code&gt; lets you send stuff down to the
  browser.  &lt;code&gt;Sse&lt;/code&gt; is a factory for other classes in the SSE
  API.  Line 14 is a try-with-resources that lets the sink be
    autoclosable.&lt;/p&gt;

&lt;p&gt;Let's take a look at the corresponding HTML.&lt;/p&gt;

&lt;div class=&quot;xml&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; if(typeof(EventSource) !== &amp;quot;undefined&amp;quot;) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var source = new EventSource(&amp;quot;app/eventStream&amp;quot;);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; source.onmessage = function(event) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML += event.data + &amp;quot;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;br&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML = &amp;quot;Sorry, your browser does not support server-sent events...&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;/script&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;h1&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;SSE sample&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;/h1&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;=&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;lt;/div&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;The JavaScript on lines 1 - 10 connects to the server when the page
  loads and installs an SSE event handler that appends the data of each
  SSE to the div on line 14.&lt;/p&gt;

&lt;h2&gt;Broadcasting to Multiple Clients&lt;/h2&gt;

&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;@Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; SSEBroadcastResource &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; Sse sse&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; SseBroadcaster sseBroadcaster&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @PostConstruct&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; postConstruct&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; SseBroadcaster getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;Sse sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;==&lt;/span&gt; sseBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sseBroadcaster &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; sse.&lt;span style=&quot;color: #006633;&quot;&gt;newBroadcaster&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; sseBroadcaster&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @GET&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;subscribe&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Produces&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;MediaType.&lt;span style=&quot;color: #006633;&quot;&gt;SERVER_SENT_EVENTS&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; subscribe&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;@&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Acontext+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Context&lt;/span&gt;&lt;/a&gt; SseEventSink eventSink&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; eventSink.&lt;span style=&quot;color: #006633;&quot;&gt;send&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEvent&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;welcome!&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;register&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;eventSink&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @POST&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Path&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;broadcast&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; @Consumes&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;MediaType.&lt;span style=&quot;color: #006633;&quot;&gt;APPLICATION_FORM_URLENCODED&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; broadcast&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;@FormParam&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt; event&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; getBroadcaster&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;broadcast&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;sse.&lt;span style=&quot;color: #006633;&quot;&gt;newEventBuilder&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;data&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Astring+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;String&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt;, event&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Another example in Pavel's Blog that didn't quite work as written is
  the &lt;code&gt;SseBroadcaster&lt;/code&gt; example.  Above is one that works.  Note the use of the static &lt;code&gt;getBroadcaster()&lt;/code&gt; method and forcing it to be pre-invoked before the resource is put into service through the use of &lt;code&gt;@PostConstruct&lt;/code&gt; on lines 7 - 10.&lt;/p&gt;

&lt;p&gt;As with the first example, the GET request sets up the SSE, sending
  an initial event.  The new hting is handing off the servicing of the
  SSE to the handy &lt;code&gt;SseBroadcaster&lt;/code&gt; on line 24.&lt;/p&gt;

&lt;p&gt;This resource also listens for POST requests, on lines 27 - 32.  It
  takes the form data and simply broadcasts it out to the SSE.  The HTML
  is next.&lt;/p&gt;

&lt;div class=&quot;html4strict&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/script.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;script&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; var i = 1;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; if(typeof(EventSource) !== &amp;quot;undefined&amp;quot;) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var source = new EventSource(&amp;quot;app/subscribe&amp;quot;);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; source.onmessage = function(event) {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML += event.data + &amp;quot;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/br.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;br&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;input&amp;quot;).value = i++ + &amp;quot; &amp;quot; +&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; navigator.userAgent;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&amp;quot;result&amp;quot;).innerHTML = &amp;quot;Sorry, your browser does not support server-sent events...&amp;quot;;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; function submit() {&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var params = &amp;quot;data=&amp;quot; + document.getElementById(&amp;quot;input&amp;quot;).value;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var url = document.getElementById(&amp;quot;form&amp;quot;).action;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var xhr = new XMLHttpRequest();&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xhr.open(&amp;quot;POST&amp;quot;, url);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xhr.setRequestHeader(&amp;quot;Content-type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xhr.send(params);&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/script.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;script&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/form.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;form&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;method&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;action&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;app/broadcast&amp;quot;&lt;/span&gt; &amp;nbsp;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/input.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;input&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/form.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;form&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/button.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;button&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;type&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000066;&quot;&gt;onclick&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;submit()&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;POST&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/button.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;button&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/h1.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;h1&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;SSE sample&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/h1.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;h1&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;lt;&lt;a href=&quot;http://december.com/html/4/element/div.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;div&lt;/span&gt;&lt;/a&gt; &lt;span style=&quot;color: #000066;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color: #66cc66;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&quot;color: #66cc66;&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;http://december.com/html/4/element/div.html&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;div&lt;/span&gt;&lt;/a&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Lines 1 - 12 are mostly the same as in the first example.  Lines 14 -
  20 are new.  The &lt;code&gt;submit()&lt;/code&gt; function uses Ajax to send a
  POST to the server (lines 23 - 28 in the Java listing).  The value of
  the &lt;code&gt;data&lt;/code&gt; form data comes from the hidden field, and
  is initialized on line 7.  I just
  use &lt;code&gt;navigator.userAgent&lt;/code&gt; for novelty.&lt;/p&gt;

&lt;p&gt;Each click of the &lt;code&gt;POST&lt;/code&gt; button causes a POST to be sent
  to the server, which in turn causes an SSE to be sent back to the
  client.  For extra fun, you could open up two tabs on the same page
  and see that pressing POST on one causes the data to be updated on
  both pages.&lt;/p&gt;

&lt;p&gt;Thanks to Pavel Bucek
  and &lt;a href=&quot;https://www.linkedin.com/in/santiago-pericas-geertsen-905685/&quot;&gt;Santigo
  Pericas-Geertsen&lt;/a&gt; for stewarding the JAX-RS community to deliver a
  very useful piece of Java EE 8.&lt;/p&gt;</content><author><name></name></author><summary type="html">I don't know what this says about my memory, but I was doing a little JAX-RS programming today and when I googled to remind myself of the particular feature I was using, I ran into my own blog post about that feature. It took me a moment to recall that I had written that earlier blog post. I wonder if I'll forget writing this one as well?</summary></entry></feed>