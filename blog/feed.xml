<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2019-05-23T14:26:30-04:00</updated><id>/blog/</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">Joining Microsoft</title><link href="/blog/2019/05/23/joining-microsoft.html" rel="alternate" type="text/html" title="Joining Microsoft" /><published>2019-05-23T14:01:00-04:00</published><updated>2019-05-23T14:01:00-04:00</updated><id>/blog/2019/05/23/joining-microsoft</id><content type="html" xml:base="/blog/2019/05/23/joining-microsoft.html">&lt;p&gt;I am so excited to be joining Microsoft as Principal Java Architect in
their Java Tooling and Experiences team.  I hope to help to make the
future Java on Azure, by establishing Azure as the preferred cloud for
all Java workloads.&lt;/p&gt;

&lt;p&gt;I’ve been fortunate to have worked at Sun during their heyday, and I
recall from that time a great admiration for the way Microsoft focused
on developers (developers developers developers).  In particular, the
Project Rave/JavaStudio Creator effort was heavily influenced by
VisualBasic and its associated tooling.  I look forward to being a part
of that kind of company again.&lt;/p&gt;

&lt;p&gt;I will be working with my old pal and colleague Reza Rahman to enable
Java EE and Jakarta EE developers on Azure.  We’re hoping to also
support Microprofile as well.&lt;/p&gt;

&lt;p&gt;There is a mountain of new stuff for me here, so if I’ve ever asked you
for technical help in the past, I will likely ask you again in the very near
future, and I’ll offer the same help in return, as best I can.&lt;/p&gt;</content><author><name></name></author><summary type="html">I am so excited to be joining Microsoft as Principal Java Architect in their Java Tooling and Experiences team. I hope to help to make the future Java on Azure, by establishing Azure as the preferred cloud for all Java workloads.</summary></entry><entry><title type="html">Leaving Oracle</title><link href="/blog/2019/05/23/leaving-oracle.html" rel="alternate" type="text/html" title="Leaving Oracle" /><published>2019-05-23T14:00:00-04:00</published><updated>2019-05-23T14:00:00-04:00</updated><id>/blog/2019/05/23/leaving-oracle</id><content type="html" xml:base="/blog/2019/05/23/leaving-oracle.html">&lt;p&gt;It’s still unreal to me that I’m writing this, but here it is.  After
over 22 years at Oracle (13 at Sun), I’m moving on to another company.
In my time at Oracle, I have had a chance to help shape technologies
that have had a positive impact on our industry and lives.&lt;/p&gt;

&lt;p&gt;I’m not into bragging, humble or otherwise, but I do want to call out a
few projects with which I am especially thankful to have been involved.
I am not going to name names for fear of leaving someone out, but I am
deeply thankful for all my friends who have helped me over the years.&lt;/p&gt;

&lt;h2 id=&quot;anything-to-do-with-jcp&quot;&gt;Anything to do with JCP&lt;/h2&gt;

&lt;p&gt;I’m very glad for my chance to contribute to and validate the Java
Community Process (&lt;a href=&quot;https://jcp.org/&quot;&gt;JCP&lt;/a&gt;) as a demonstrably successful way to allow a broad
spectrum of contributors to practically influence the Java they use in
their own jobs.  Oracle practices a culture of diversity, and this is
one area where the practice was apparent.&lt;/p&gt;

&lt;p&gt;The most rewarding part of my career so far was working on JSF as part
of the JCP.  The technology we built, and the community we built around
it, is very special.  There have been many highpoints but one that
sticks out for me personally was the gathering at my house after
the JSFSummit in December 2008 in Orlando.&lt;/p&gt;

&lt;p&gt;There are several other JCP specs that I’ve had the chance to work on,
including Servlet and Bean Validation.  Those have been very rewarding
as well.&lt;/p&gt;

&lt;h2 id=&quot;conference-speaking&quot;&gt;Conference Speaking&lt;/h2&gt;

&lt;p&gt;I had my first taste of conference speaking at JavaOne 2002, and my
&lt;a href=&quot;https://javaserverfaces.github.io/presentations/w-jax-keynote-de-en.pdf&quot;&gt;first keynote opportunity&lt;/a&gt;
in 2005.  Since then I’ve been very blessed to continue speaking.&lt;/p&gt;

&lt;h2 id=&quot;book-opportunities&quot;&gt;Book Opportunities&lt;/h2&gt;

&lt;p&gt;I’m very grateful for the chance to co-author several books about Java
technologies.  Those opportunities were possible thanks to the awesome
community around Java.&lt;/p&gt;

&lt;h2 id=&quot;nullpointers&quot;&gt;NullPointers&lt;/h2&gt;

&lt;p&gt;If you’ve ever seen my Rockstar talk, you know about my fondness for
Buckaroo Banzai and his part-time rockstar ways.  Having a chance to act
that out during some fun times at JavaOne, GoTo, and DevNexus was the
fulfillment of a career dream.&lt;/p&gt;

&lt;h2 id=&quot;netscape-6-and-oji&quot;&gt;Netscape 6 and OJI&lt;/h2&gt;

&lt;p&gt;Back in the heady days of the &lt;a href=&quot;http://edition.cnn.com/TECH/computing/9811/24/aolnetjava.idg/index.html?_s=PM:TECH&quot;&gt;Sun-Netscape-AOL
Alliance&lt;/a&gt;,
I was part of a small group of people from Sun that went into the client
side of that deal.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AOL and Sun together will develop the next version of Netscape’s
Navigator and Communicator software clients and AOL will use Java in
its e-commerce offerings, the company said.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gave me a first hand look at the birth of JavaScript and the
management decisions around Java in the browser that eventually lead to
the rise and fall of Applet, JavaFX, and even Java on the desktop.&lt;/p&gt;

&lt;h2 id=&quot;creating-opportunities&quot;&gt;Creating Opportunities&lt;/h2&gt;

&lt;p&gt;Finally, I’m very thankful to work on technologies that create
opportunities for others to create things.  Those of us who work on
programming platforms can honestly say that we allow individuals and
entrepeneurs to create their own businesses (often employing many
people, sometimes paying a very good wage) that create solutions for
&lt;em&gt;their&lt;/em&gt; customers.  This position in at a lower-level of the value chain
is a great place to be.&lt;/p&gt;

&lt;p&gt;Oracle was and is a great place to work, and they have trusted me to
contribute in the above areas and several others.  In return, I have
deep trust in my management chain at Oracle.  I have nothing but good
things to say about working there.&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s still unreal to me that I’m writing this, but here it is. After over 22 years at Oracle (13 at Sun), I’m moving on to another company. In my time at Oracle, I have had a chance to help shape technologies that have had a positive impact on our industry and lives.</summary></entry><entry><title type="html">TDC 2019 Florianópolis: Raw Notes: Serverless with Knative: Mete Atamel</title><link href="/blog/2019/04/25/tdc-floripa-knative.html" rel="alternate" type="text/html" title="TDC 2019 Florianópolis: Raw Notes: Serverless with Knative: Mete Atamel" /><published>2019-04-25T09:45:00-04:00</published><updated>2019-04-25T09:45:00-04:00</updated><id>/blog/2019/04/25/tdc-floripa-knative</id><content type="html" xml:base="/blog/2019/04/25/tdc-floripa-knative.html">&lt;p&gt;&lt;img src=&quot;/blog/assets/tdc-logo.png&quot; alt=&quot;I'm speaking at TDC 2019&quot; title=&quot;I'm speaking at TDC 2019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Talk from &lt;a href=&quot;https://twitter.com/meteatamel&quot;&gt;Mete Atamel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also take a look at &lt;a href=&quot;https://github.com/meteatamel/knative-tutorial&quot;&gt;his
tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pronounced “kay native”.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;K8s open source building blocks for serverless.&lt;/p&gt;

&lt;p&gt;Points out that K8s is all about servers.  But Knative hides that.&lt;/p&gt;

&lt;p&gt;What is Serverless?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Servers are someone else’s problem&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functions should be idomatic, meaning already familiar to you&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Event driven&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Portable to other clouds&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asserts Knative ticks all these boxes.&lt;/p&gt;

&lt;h2 id=&quot;gave-a-bit-of-kubernetes-background&quot;&gt;Gave a bit of Kubernetes Background&lt;/h2&gt;

&lt;p&gt;How K8s uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; with a stable IP…&lt;/p&gt;

&lt;p&gt;Developers want serverless.  Operators want Kubernetes.  Knative tries
to bridge the gap.&lt;/p&gt;

&lt;p&gt;Knative is open source &lt;a href=&quot;http://github.com/knative&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;picture-high-level-diagram&quot;&gt;Picture: high level Diagram&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20190425-tdc-floripa-knative-01-stack.JPG&quot; alt=&quot;Knative Stack&quot; title=&quot;Knative Stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uses Istio for network, but he feels Istio is too heavyweight for what
they use it for, so they now use Gloo, but even he did not know what
that is.  (This space is moving so fast).&lt;/p&gt;

&lt;h2 id=&quot;how-to-install&quot;&gt;How to install&lt;/h2&gt;

&lt;p&gt;Cloud Run or Cloud Run on GKE or Knative Everywhere&lt;/p&gt;

&lt;p&gt;A bunch of steps at the command line, mostly with &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The different parts of knative run in different namespaces.&lt;/p&gt;

&lt;h2 id=&quot;one-part-is-knative-serving&quot;&gt;One part is Knative Serving?&lt;/h2&gt;

&lt;p&gt;Rapid deployment of serverless containers.  Automatic scaling, traffic
routing, including directing per revisions.  I guess this means it
supports canary, etc.&lt;/p&gt;

&lt;h2 id=&quot;picture-serving-primitives&quot;&gt;Picture: Serving Primitives&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20190425-tdc-floripa-knative-02-serving-primitives.JPG&quot; alt=&quot;Knative Serving Primitives&quot; title=&quot;Knative Serving Primitives&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;going-through-steps-in-tutorial&quot;&gt;Going through steps in tutorial&lt;/h2&gt;

&lt;p&gt;Before we’ve even seen any functions, we have a ton of network stuff to
do.  I would like to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;helloworld-csharp&lt;/code&gt; C#
Service.&lt;/p&gt;

&lt;p&gt;It’s been a while since I worked with &lt;code class=&quot;highlighter-rouge&quot;&gt;Fn&lt;/code&gt;, but Knative seems to have a
lot more friction.  For example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Fn&lt;/code&gt; command line tool builds the
docker container around your function for you.  Here you appear to have
to do that yourself.&lt;/p&gt;

&lt;p&gt;He used the term “traffic splitting” instead of “blue green” or some
other term.&lt;/p&gt;

&lt;p&gt;I don’t understand whey he is doing a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply&lt;/code&gt; to set it
up instead of them having Helm chart(s) for this.  I can understand
using &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; for quick updates when the service is already deployed and
you want to update it.&lt;/p&gt;

&lt;p&gt;He didn’t mention anything about the overhead, if any, of C# in a
serverless environment.&lt;/p&gt;

&lt;p&gt;Showed how &lt;code class=&quot;highlighter-rouge&quot;&gt;annotations&lt;/code&gt; are used to convey autoscaling.&lt;/p&gt;

&lt;h2 id=&quot;fun-show-integration-with-twilio&quot;&gt;Fun: Show integration with Twilio.&lt;/h2&gt;

&lt;p&gt;Learned that you can put a comma separated list as the argument to
&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;knative-eventing&quot;&gt;Knative Eventing&lt;/h1&gt;

&lt;p&gt;Connect producers to consumers with stuff in the middle.&lt;/p&gt;

&lt;p&gt;Example 1 was not interesting.&lt;/p&gt;

&lt;p&gt;Example 2: Integrate Cloud Storage to Vision API&lt;/p&gt;

&lt;p&gt;Here comes something like the license plate demo!&lt;/p&gt;

&lt;p&gt;All of his examples are in C#.  Is that the only language supported?&lt;/p&gt;

&lt;h1 id=&quot;knative-build&quot;&gt;Knative Build&lt;/h1&gt;

&lt;p&gt;Enables you to build and push the images &lt;em&gt;within your K8s cluster&lt;/em&gt;.
This is a novel idea.  I talked to &lt;a href=&quot;http://twitter.com/yanaga&quot;&gt;Edson
Yanaga&lt;/a&gt; last night, he was saying this is the
thing that makes Jenkins obsolete.&lt;/p&gt;

&lt;p&gt;RedHat has a &lt;a href=&quot;https://blog.openshift.com/knative-building-your-serverless-service/&quot;&gt;tutorial on this&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">TDC 2019 Florianópolis: Career Tips from Someone Who Knows a lot of Rockstar Programmers 02: Timesheets</title><link href="/blog/2019/04/23/tdc-floripa-career-tips-from-someone-who-knows-a-lot-of-rockstar-programmers-2019-02.html" rel="alternate" type="text/html" title="TDC 2019 Florianópolis: Career Tips from Someone Who Knows a lot of Rockstar Programmers 02: Timesheets" /><published>2019-04-23T08:00:00-04:00</published><updated>2019-04-23T08:00:00-04:00</updated><id>/blog/2019/04/23/tdc-floripa-career-tips-from-someone-who-knows-a-lot-of-rockstar-programmers-2019-02</id><content type="html" xml:base="/blog/2019/04/23/tdc-floripa-career-tips-from-someone-who-knows-a-lot-of-rockstar-programmers-2019-02.html">&lt;p&gt;&lt;img src=&quot;/blog/assets/tdc-logo.png&quot; alt=&quot;I'm speaking at TDC 2019&quot; title=&quot;I'm speaking at TDC 2019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my talk at 14:10 South Center Career Track, &lt;a href=&quot;http://www.thedevelopersconference.com.br/tdc/2019/florianopolis/trilha-carreiras-e-mentoria&quot;&gt;Career Tips from Someone
Who Knows a Lot of Rockstar
Programmers&lt;/a&gt;,
I will share some of the lessons I learned from the people I interviewed
for the &lt;a href=&quot;/&quot;&gt;Secrets of the Rockstar Programmers&lt;/a&gt; book, and
also include some tips of my own.  Though I don’t claim to be a rockstar
programmer myself (or the newer term: “10x programmer”), I can honestly
say I know plenty of people that who are.&lt;/p&gt;

&lt;p&gt;I have been extremely blessed to have been a full time telecommuter
since 2002, first for Sun, and now for Oracle.  Working in this way
presents some unique challenges, and over the years I have developed
some techniques to maintain productivity and forward career momentum,
preserving the personal benefits of telecommuting while continuing to
give the company value for their money.  Perhaps I can do another post
on the broader topic of telecommuting tips, but this post is about one
practical technique that applies to telecommuters and office workers
alike: keeping a personal timesheet.&lt;/p&gt;

&lt;p&gt;Here’s the basic idea.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Have a spreadsheet that is set up as a timesheet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each time a new month comes around, save the previous month as the
current month.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep track of all of the time you spend working and a couple words
about what you did.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve been doing this since I started telecommuting in 2002, so I have
seventeen years of monthly spreadsheets.  Here is a sample spreadsheet you can download and customize: &lt;a href=&quot;/blog/assets/201904-timesheet.xlsx&quot; title=&quot;201904-timesheet.xlsx&quot;&gt;201904-timesheet.xlsx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like my previous post about status reports, this seems mundane and
annoying, but over time, it adds up to a valuable searchable resource.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">TDC 2019 Florianópolis: Career Tips from Someone Who Knows a lot of Rockstar Programmers 01: Communicating Your Value Add</title><link href="/blog/2019/04/21/tdc-floripa-career-tips-from-someone-who-knows-a-lot-of-rockstar-programmers.2019.html" rel="alternate" type="text/html" title="TDC 2019 Florianópolis: Career Tips from Someone Who Knows a lot of Rockstar Programmers 01: Communicating Your Value Add" /><published>2019-04-21T18:00:00-04:00</published><updated>2019-04-21T18:00:00-04:00</updated><id>/blog/2019/04/21/tdc-floripa-career-tips-from-someone-who-knows-a-lot-of-rockstar-programmers.2019</id><content type="html" xml:base="/blog/2019/04/21/tdc-floripa-career-tips-from-someone-who-knows-a-lot-of-rockstar-programmers.2019.html">&lt;p&gt;&lt;img src=&quot;/blog/assets/tdc-logo.png&quot; alt=&quot;I'm speaking at TDC 2019&quot; title=&quot;I'm speaking at TDC 2019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my talk at 14:10 South Center Career Track, &lt;a href=&quot;http://www.thedevelopersconference.com.br/tdc/2019/florianopolis/trilha-carreiras-e-mentoria&quot;&gt;Career Tips from Someone
Who Knows a Lot of Rockstar
Programmers&lt;/a&gt;,
I will share some of the lessons I learned from the people I interviewed
for the &lt;a href=&quot;/&quot;&gt;Secrets of the Rockstar Programmers&lt;/a&gt; book, and
also include some tips of my own.  Though I don’t claim to be a rockstar
programmer myself (or the newer term: “10x programmer”), I can honestly
say I know plenty of people that who are.&lt;/p&gt;

&lt;p&gt;Working for big companies such as IBM, SGI, Sun, and Oracle, I’ve had
the chance to sample many useful corporate trainings.  Even the most
mundane of these, such as “Insider Trading”, offer at least one nugget
of novelty.  The corporate training I want to talk about here is one I
took at Sun at least twelve years ago.  It was called “Communicating
Your Value Add” and it was all about how to articulate your contribution
to your company at performance review time.  The class included a handout,
“Behavior/Performance-Based Questions” whose complete text I reproduce
below.  For discussion and reference, let’s call this &lt;code class=&quot;highlighter-rouge&quot;&gt;perf_handout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the basic idea.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get in the habit of producing written weekly status reports as simple
text files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Annnotate some of the things you’ve done with &lt;code class=&quot;highlighter-rouge&quot;&gt;perf_handout.N&lt;/code&gt; Where
&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is the number of the corresponding list item below.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When performance review time comes around, you can grep through your
status reports for &lt;code class=&quot;highlighter-rouge&quot;&gt;perf_handout&lt;/code&gt; and your performance review
practically writes itself.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, if I successfully introduced a new code review process, my
weekly status report would have a line like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;perf_handout.6: Designed and implemented a new code review process.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you do this for a month or so, you’ll notice some areas you are
missing.  Try to fill those in, or if you can’t try to partner with
someone who you observe is able to do those things and learn from them.&lt;/p&gt;

&lt;p&gt;Here now is the complete &lt;code class=&quot;highlighter-rouge&quot;&gt;perf_handout&lt;/code&gt; content.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;behaviorperformance-based-questions&quot;&gt;Behavior/Performance-Based Questions&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   A sampling of the types of questions that might be used to explore
   your level of accomplishment for specific skills are listed below.
   These questions provide a platform for *communcating your
   achievements* in skill areas such as leadership, decision-making,
   persuasiveness, coping, creativity, tolerance for ambiguity,
   organizational savvy, technical knowledge, and influencing.
   
   1. Describe a time when voicing your opinion was uncomfortable or
   could have had serious consequences, but you did it because you
   believed so strongly in the value of your perspective.
   
   2. What was the most creative idea you introduced on the job?  How
   did you persuade your superior?.
   
   3. Give me an example of the most complex project/assignment you have
   had, including your role and the outcome.
   
   4. Describe a situation at work when you had to make a decision and
   were uncertain about the outcome.
   
   5. What do you when you are communicating with someone and it becomes
   apparent that they don't understand what you are saying or vice
   versa?
   
   6. Describe a situation in which you developed a group into a strong
   working team?
   
   7. Communication and leadership go hand in hand.  Tell me about a
   time when your communication skills enabled you to influence the way
   others thought or acted, even in a very difficult situation.
   
   8. What important goals have you set in the past, and how were you
   able to work towards accomplishing them successfully?
   
   9. Describe how you delegate responsibility in your current job.
   
   10. Have you ever had to take over a leadership role unexpectedly?
   How did it work out?
   
   11. Sometimes it is important to disagree with others, particularly
   your boss, in order to prevent a mistake from being made.  Tell me
   about a time when you were willing to disagree with another person in
   order to build a positive outcome.
   
   12. Describe a time when you had to sell an idea to your boss or
   another authority figure.
   
   13. Give me an example taken from your experiences in report writing,
   preparation of memos, or general correspondence which illustrates
   the extent of your written communication skills.
   
   14. Building rapport can be a very challenging thing to do.  Give an
   example of a time when you were able to build rapport with an
   individual or group at work, even when the situation was difficult
   and the odds were against you.
   
   15. Solving problems requires more than good plans, it means taking
   action.  Give me an example of a time when you were able to take
   meaningful action in resolving a problem.
   
   16. In many problem situations, it is often tempting to jump to a
   conclusion to build a solution quickly.  Tell me about at time when
   you resisted this temptation and obtained all the facts about the
   problem before coming to a decision.
   
   17. Sometimes it is necessary to work in unsettled or rapidly
   changing circumstances.  When have you found yourself in this
   position?  Tell me exactly whay you did.
   
   18. Solving a problem often necessitates evalutation of alternative
   solutions. Give me an example of a time when you actively defined
   several solutions to a single problem using any tools such as
   research, brainstorming, or mathematics.
   
   19. Just about anybody can give a routine, standard answer to common
   problems; however, the payoff is often in the development of unique
   solutions to common problems.  Give me an example of one of your
   unique problem solutions.
   
   20. Describe an assigmnent that represented a unique challenge to
   you.
   
   21. Tell me about a time when you had to cope with strict deadlines
   or time demands.
   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;performance-review-questions&quot;&gt;Performance Review Questions&lt;/h3&gt;

&lt;p&gt;The pre-discussion forms include the questions below which are listed
   under the following categories: Results, Quality, Reliability,
   Leadership, Decision Making, Functional/Technical Skills &amp;amp; Knowledge,
   Communication and Teamwork, and Resourcefulness &amp;amp; Creativity.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
   22. Based on established goals and objectives, for our group, what
   results did you achieve?  If a goal changed, how much progress did
   you make toward the revised goal?
   
   23. What additional contributions did you make?  Were there
   accoplishments that were definitely outstanding?
   
   24. What examples can you recall of instances in which you were
   responsive to your customer or successful in completing a quality
   job?
   
   25. What leadership and decision making abilities have you
   demonstrated?
   
   26. Give me an example of a major decision you've made and the
   outcome.
   
   27. Give me an example of any project you have led and the outcome.
   
   28. How have you improved existing processes and procedures?
   
   29. In what ways have you added unique value to your job?
   
   30. Give me an example of when you have demonstrated technical or
   functional expertise.
   
   31. Tell me about what measures you have taken to ensure that your
   skills are state-of-the-art.
   
   32. Give me an example of an effective presentation you have made.
   
   33. Give me an example of how cooperative interaction with other
   members of the Sun team have been a part of your work.
   
   34. Give me an example of a time when others have been able to count
   on your &quot;being-there&quot; time after time, project after project.
   
   35. Give me an example of when you used strategic thinking in moving
   toward achieving a goal.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">TDC 2019 Florianópolis</title><link href="/blog/2019/04/20/tdc-floripa-2019.html" rel="alternate" type="text/html" title="TDC 2019 Florianópolis" /><published>2019-04-20T14:00:00-04:00</published><updated>2019-04-20T14:00:00-04:00</updated><id>/blog/2019/04/20/tdc-floripa-2019</id><content type="html" xml:base="/blog/2019/04/20/tdc-floripa-2019.html">&lt;p&gt;&lt;img src=&quot;/blog/assets/tdc-logo.png&quot; alt=&quot;I'm speaking at TDC 2019&quot; title=&quot;I'm speaking at TDC 2019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am blessed to have the opportunity to speak for the &lt;a href=&quot;http://purl.oclc.org/NET/edburns/speaking-engagements/&quot;&gt;fourth
time&lt;/a&gt; at the
GlobalCode Developer’s conference.  My last time there was in November
2009!  I can’t believe it’s been that long.  It was a huge event then,
and it’s even bigger now.  It’s the largest software developer
conference, by number of attendees, in Brazil, and that’s saying a lot.
There are at &lt;a href=&quot;http://www.thedevelopersconference.com.br/tdc/2019/florianopolis/trilhas&quot;&gt;least &lt;strong&gt;49&lt;/strong&gt;
tracks&lt;/a&gt;
over &lt;strong&gt;five days&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here are some links to my two talks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;10:10 STADIUM and Java Architecture Track &lt;a href=&quot;http://www.thedevelopersconference.com.br/tdc/2019/florianopolis/trilha-arquitetura-java&quot;&gt;Table Stakes, Deal Makes: Programming Language Platform Growth&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;14:10 South Center Career Track &lt;a href=&quot;http://www.thedevelopersconference.com.br/tdc/2019/florianopolis/trilha-carreiras-e-mentoria&quot;&gt;Career Tips from Someone Who Knows a Lot of Rockstar Programmers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Raw Notes: Revisiting Effective Java in 2019</title><link href="/blog/2019/03/19/javaland-effective-java-picks.html" rel="alternate" type="text/html" title="Raw Notes: Revisiting Effective Java in 2019" /><published>2019-03-19T13:45:00-04:00</published><updated>2019-03-19T13:45:00-04:00</updated><id>/blog/2019/03/19/javaland-effective-java-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-effective-java-picks.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Credentials&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://developers.redhat.com/promotions/migrating-to-microservice-databases&quot;&gt;Plugged his book&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ANZXvXVa1Lg&quot;&gt;Has a three hour version of the talk&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambdas&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Streams&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optionals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Default methods in interfaces&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;try with resources&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;factory methods&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Minimize mutability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comparable(14)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Live coding&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Minimize mutability.  Value object class.  Why?  Easier to reason
about.  Reduces the chance that the system gets into an
inconsistent state.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Make as many of things &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; as possible&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;No ctor, use factory method: &lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt;.  Easier for refactoring.
Allows you to change the cardinality, maybe re-use objects with
an object pool.  Flyweight class.  &lt;code class=&quot;highlighter-rouge&quot;&gt;BigDecimal.valueOf()&lt;/code&gt;
implementation is an example.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;COMMENT: what about making the zero arg ctor private?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;He used Google Guava, but noted that they have violated backward
compatibility in the past.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Advised to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt;. Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Objects&lt;/code&gt;
class in the JDK.  I thas an &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; method.  Handles all that
&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; checking.  But beware of the performance penalty of
autoboxing.  For hashcode, there is &lt;code class=&quot;highlighter-rouge&quot;&gt;Objects.hash&lt;/code&gt;.  This is
even worse for performance.  If you use the generator for
&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcode&lt;/code&gt; make sure to keep the impls up to date
as the class evolved.&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;for hashcode, because it is immutable, you can do it in the
ctor. If you use an object as a key to a hashmap, it must be
immutable.  If you can’t do that, you can make a
&lt;code class=&quot;highlighter-rouge&quot;&gt;toHashKey()&lt;/code&gt; method.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;.  It’s for developers.  Guava
&lt;code class=&quot;highlighter-rouge&quot;&gt;MoreObjects.toStringHelper()&lt;/code&gt;.  Not for “business strings”.
For busness strings, use &lt;code class=&quot;highlighter-rouge&quot;&gt;formatTo&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Formatter&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Formattable&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Comparable&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;Comparator&lt;/code&gt; interface.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Functional Interfaces.  &lt;code class=&quot;highlighter-rouge&quot;&gt;@FunctionalInterface&lt;/code&gt;.  Constrains your
code to conform to functional interfaces.  Favor &lt;em&gt;Strategy&lt;/em&gt; over
&lt;em&gt;Template Method&lt;/em&gt;.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;You should not need to create a new functional interface.  There
are 41 already in the JDK.  It’s likely it will be in there
already.  Learn these six well: &lt;code class=&quot;highlighter-rouge&quot;&gt;UnaryOperator, BinaryOperator,
Predicate, Function, Supplier, Consumer&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Method References.  Five different types&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;static, ie &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer::parseInt()&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;bounded and unbounded method reference.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Enums&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Can use lambdas or function references in enum initializer.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Credentials</summary></entry><entry><title type="html">Raw Notes: Visual Studio Code</title><link href="/blog/2019/03/19/javaland-vscode-picks.html" rel="alternate" type="text/html" title="Raw Notes: Visual Studio Code" /><published>2019-03-19T08:45:00-04:00</published><updated>2019-03-19T08:45:00-04:00</updated><id>/blog/2019/03/19/javaland-vscode-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-vscode-picks.html">&lt;h1 id=&quot;vscode&quot;&gt;VSCode&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Started by saying their goal is not to convert IntelliJ, Eclipse,
NetBeans devs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Editors&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;TextEdit&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SublimeText&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;jEdit&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Had huge plugin ecosystem.  From sourceforge&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom Editor&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the other end of the spectrum you have IDEs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Text editors&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Keyboard centric&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lightweight/fast&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Files/folders&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IDEs&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Project systems&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Integrated build&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Debug&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;VCS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Code understandig&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What about something in the middle?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;VS Code is an editor, but has some capabilities from the IDS&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Code understanding&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Debug&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Everything from the Text editors&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to stick to one editor, VSCode + extensions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Initializr&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IntelliCode&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;AI-assited pattern recognition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demos&quot;&gt;DEMOS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Setting it up.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code --user-dir empty --extensions-dir empty/extensions
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Some basic things you can do&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Maven projects&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Had some demo issues&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring&quot;&gt;Spring&lt;/h1&gt;

&lt;h2 id=&quot;demos-1&quot;&gt;DEMOS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SpringBoot &lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initializr&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Go-to-symbol works with Spring beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;PetClinic&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AzureDevSpaces&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Rapidly iterate and debug containers in Kubernetes&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Showed how you can drop in a new Service-B in the midst of other
existing services.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/vs-code-blog.jpg&quot; alt=&quot;Jakarta EE TImeline&quot; title=&quot;Timeline&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">VSCode</summary></entry><entry><title type="html">Raw Notes: Das Geheimnis erfolgreicher Teams</title><link href="/blog/2019/03/19/javaland-successful-teams-picks.html" rel="alternate" type="text/html" title="Raw Notes: Das Geheimnis erfolgreicher Teams" /><published>2019-03-19T08:45:00-04:00</published><updated>2019-03-19T08:45:00-04:00</updated><id>/blog/2019/03/19/javaland-successful-teams-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-successful-teams-picks.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Successful teams come from successful people&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Jobs, Musk, Zuck&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What makes the diffence between successful teams and normal teams.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Google Project Aristotle researched this.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Team A: very structured&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Team B: very loose&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Google found it does not matter.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Google found teams that talk a lot are successful.  “Psychological Safety”&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Clear structure&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Same mindset&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;Supported by the larger org.&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;COmpeling direction&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Supportive context&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;SHared mindest&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Have a vision: 2 year plan.  Within that, have “themes” to say
what’s important.  Within that Focus areas, for example, “we’re
going to build a mobile app”.  Helps people orgaize around.  Within
that, all of it has to be measured.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;V T F M&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Objective Key Results (OKR)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Objective (not as in vs Subjective, rather as in goal).  It’s an
agile story.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Key results (1000 dailt user)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Score 0.7 (700 users)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stretch goals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Audit quarterly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not too many objectives, with two or three key results.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Make goals transparent for everyone.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strong-structure&quot;&gt;Strong Structure&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Have a common language.  Analogy, making a film, but the actors,
lighting, sound, all sit in different room.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cross functional teams&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Help the developers understand why a particular design was chosen&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Faster + Stronger decisions.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Develop strong teams&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;FIKA drink coffee together, exchange ideas, allow things to be
shared outside of the stress of the regular grind.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Conference Video Fridays&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Team refreshments&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Getting stuff done days.  Work on docs.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Innovation weeks, every six weeks hackathon.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Small things, say thanks, give compliments.  Kudos system.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Welcoming culture for onboarding.  Handholding the new members.
Have a budy system.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trello, acquired by Atlassian,  Showed video.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;supportive-context&quot;&gt;Supportive Context&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Knowledge sharing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;documents, 1:1s, meetings, email: closed systems&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;better: Intranet, Chat,&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Your team space&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Company information&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Pesonal spaces&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Open by default, but of course can be closed.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep decision log, but allow corrections, allow marking obsolete.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make services discoverable, but as much as possible self-service.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shared-mindset&quot;&gt;Shared Mindset&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bug fix rotation, helps share the mindset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feature creation rotation.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Get a feature buddy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;doing-things-right&quot;&gt;Doing things right&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Process is good for that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But it is also important to do the right things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recognize that teams can be very structured or very chaotic.
Create a team playbook.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Looks like design patterns for team activities&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Demo Trust&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Concept Testing&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;(Team) Health Monitor&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;One Fulltime Team Owner&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Balanced Team&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Dependencies&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Values and Metrics&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Velocity&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;End-to-end Demo&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;http://www.atlassianteamplaybook.com/&quot;&gt;http://www.atlassianteamplaybook.com/&lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;right-people--right-tools--right-practices--great-team&quot;&gt;Right people + Right tools + right practices = great team&lt;/h2&gt;</content><author><name></name></author><summary type="html">Successful teams come from successful people</summary></entry><entry><title type="html">Raw Notes: Master your Java Applications in Kubernetes</title><link href="/blog/2019/03/19/javaland-kubernetes-picks.html" rel="alternate" type="text/html" title="Raw Notes: Master your Java Applications in Kubernetes" /><published>2019-03-19T06:45:00-04:00</published><updated>2019-03-19T06:45:00-04:00</updated><id>/blog/2019/03/19/javaland-kubernetes-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-kubernetes-picks.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CV Slide.  History from consulting, banks, insurance, on-prem&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Cloud is not his history, but now he’s all about it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Agenda&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Choose your Java runtime&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Build and execute your app&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Create your image&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run in K8s&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Final thoughts&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to decide to go with k8s&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Top down or bottom up?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;How to integreate?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Slow startup: naieve impl of monolith decomposition.  Take EE app,
put it in container, run on k8s.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;K8s is for horizontal scaling, not vertical scaling&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You can horizontally scale infinitely, until the first bill comes
in!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;More hands working with K8s&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choosing the Java runtime&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Support&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;LTS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Container aware?&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Since 8u131 &amp;amp; JDK 9&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Changes in 8u191 &amp;amp; JDK10&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;CommentL what does he mean with container aware?&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many options out there.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;OpenJ9 is the IBM JDK&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Contributed to Eclipse in 2017&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Take OpenJDK, replace Hotspot&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Small memory footprint and fast startup.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;GraalVM&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Universal VM for running various langauges&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Removes isolation and enables interop&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;How is this related to K8s&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;JVM needs to be aware of containers CPU and memory&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Keep the memory and size footprint small&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Keep it with fast startup time.  You can burn money for no good.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;“Basic” container specific flags&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/k8s-runtime-flags-01.jpg&quot; alt=&quot;Flags 01&quot; title=&quot;Flags 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/k8s-runtime-flags-02.jpg&quot; alt=&quot;Flags 02&quot; title=&quot;Flags 02&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ahead of time compilation (AOT)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application Class Data Sharing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since JDK10 (JEP310)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flag &lt;em&gt;UseAppCDS&lt;/em&gt; (automatically enabled in JDK12)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reduce memory footprint startup time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Needs two prep steps&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;DEMO&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Start a vertx app&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Create AppCDS, &lt;code class=&quot;highlighter-rouge&quot;&gt;class.lst&lt;/code&gt;, but does not include all the classes.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Create archive file from &lt;code class=&quot;highlighter-rouge&quot;&gt;class.lst&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;COMMENT: this is really great.  Explore this.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CDS and AOT in OpenJ9&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;enable class data sharing and AOT is enabled by default&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Looks like it does the preceding for you automatically.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Native compilation&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Based on Graal compiler&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Download GraaLVM&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Build fat jar&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;native-image -jar app.jar &amp;amp;&amp;amp; ./app&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Works with Micronaut, Spark Java, Vert.X.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Not there yet.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Benchmarks: Always do your own&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create your images&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Shrink your images to a minimum&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;FROM openjdk:12-ea-jdk-alpine3.8: as builder&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;jlink –add-modules … –output /opt/jre-minimal&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;COPY –from=builder /opt/jre-minimal /opt-jre-minimal&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Create lean images&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;put most changeable stuff lowest at bottom of Dockerfile&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;FROM adoptopenjdk/openjdk11-openj9:alpine-slim&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Think about your images&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Try to avoid “fat” jars and wars.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choosing your top level FROM image&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Look for vendor-specific images&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Don’t use :latest, or no tag.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DEMO: Graal Native&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;.  Then &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stats&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the app in K8s.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Share your CDS files in K8s&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Set resource request limits.  PodSpec: &lt;code class=&quot;highlighter-rouge&quot;&gt;resources.requests.{memory,cpu}
resources.requests.limits.{memory,cpu}&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Apply quotas on Namepsace level.  &lt;code class=&quot;highlighter-rouge&quot;&gt;kind:ResourceQuota&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;ConfigMaps &amp;amp; Secrets to externalize your config&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final thoughts&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Avoid infrastructure code in your applications&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Service mesh with circuit breaker&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Service discovery using DNS or Labels in K8s&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Configuration via ConfigMap&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Helm charts to ship your application&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Package manager like “apt” in Debian&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Kubernetes Operators helps you manage upgrades, lifecycle, and
insights.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Don’t overlook serverless&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Better utilization of your cluster: accomodate different workloads&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Knative, an operator from Google and Pivotal&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;GraalVM and other projects focusing on low footprint &amp;amp; fast startup&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Why optimize?  COSTS.  Smaller footprint, CPU, cycles, pay per use.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;lifecycle has changed.  Startup is now critical.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">CV Slide. History from consulting, banks, insurance, on-prem</summary></entry></feed>