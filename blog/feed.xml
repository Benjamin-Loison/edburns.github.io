<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2019-03-19T14:47:27-04:00</updated><id>/blog/</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">Raw Notes: Revisiting Effective Java in 2019</title><link href="/blog/2019/03/19/javaland-effective-java-picks.html" rel="alternate" type="text/html" title="Raw Notes: Revisiting Effective Java in 2019" /><published>2019-03-19T13:45:00-04:00</published><updated>2019-03-19T13:45:00-04:00</updated><id>/blog/2019/03/19/javaland-effective-java-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-effective-java-picks.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Credentials&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://developers.redhat.com/promotions/migrating-to-microservice-databases&quot;&gt;Plugged his book&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ANZXvXVa1Lg&quot;&gt;Has a three hour version of the talk&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambdas&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Streams&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optionals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Default methods in interfaces&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;try with resources&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;factory methods&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Minimize mutability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comparable(14)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Live coding&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Minimize mutability.  Value object class.  Why?  Easier to reason
about.  Reduces the chance that the system gets into an
inconsistent state.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Make as many of things &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; as possible&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;No ctor, use factory method: &lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt;.  Easier for refactoring.
Allows you to change the cardinality, maybe re-use objects with
an object pool.  Flyweight class.  &lt;code class=&quot;highlighter-rouge&quot;&gt;BigDecimal.valueOf()&lt;/code&gt;
implementation is an example.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;COMMENT: what about making the zero arg ctor private?&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;He used Google Guava, but noted that they have violated backward
compatibility in the past.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Advised to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt;. Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Objects&lt;/code&gt;
class in the JDK.  I thas an &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; method.  Handles all that
&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; checking.  But beware of the performance penalty of
autoboxing.  For hashcode, there is &lt;code class=&quot;highlighter-rouge&quot;&gt;Objects.hash&lt;/code&gt;.  This is
even worse for performance.  If you use the generator for
&lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcode&lt;/code&gt; make sure to keep the impls up to date
as the class evolved.&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;for hashcode, because it is immutable, you can do it in the
ctor. If you use an object as a key to a hashmap, it must be
immutable.  If you can’t do that, you can make a
&lt;code class=&quot;highlighter-rouge&quot;&gt;toHashKey()&lt;/code&gt; method.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;.  It’s for developers.  Guava
&lt;code class=&quot;highlighter-rouge&quot;&gt;MoreObjects.toStringHelper()&lt;/code&gt;.  Not for “business strings”.
For busness strings, use &lt;code class=&quot;highlighter-rouge&quot;&gt;formatTo&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Formatter&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Formattable&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Comparable&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;Comparator&lt;/code&gt; interface.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Functional Interfaces.  &lt;code class=&quot;highlighter-rouge&quot;&gt;@FunctionalInterface&lt;/code&gt;.  Constrains your
code to conform to functional interfaces.  Favor &lt;em&gt;Strategy&lt;/em&gt; over
&lt;em&gt;Template Method&lt;/em&gt;.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;You should not need to create a new functional interface.  There
are 41 already in the JDK.  It’s likely it will be in there
already.  Learn these six well: &lt;code class=&quot;highlighter-rouge&quot;&gt;UnaryOperator, BinaryOperator,
Predicate, Function, Supplier, Consumer&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Method References.  Five different types&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;static, ie &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer::parseInt()&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;bounded and unbounded method reference.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Enums&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Can use lambdas or function references in enum initializer.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Credentials</summary></entry><entry><title type="html">Raw Notes: Visual Studio Code</title><link href="/blog/2019/03/19/javaland-vscode-picks.html" rel="alternate" type="text/html" title="Raw Notes: Visual Studio Code" /><published>2019-03-19T08:45:00-04:00</published><updated>2019-03-19T08:45:00-04:00</updated><id>/blog/2019/03/19/javaland-vscode-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-vscode-picks.html">&lt;h1 id=&quot;vscode&quot;&gt;VSCode&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Started by saying their goal is not to convert IntelliJ, Eclipse,
NetBeans devs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Editors&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;TextEdit&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SublimeText&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;jEdit&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Had huge plugin ecosystem.  From sourceforge&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom Editor&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the other end of the spectrum you have IDEs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Text editors&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Keyboard centric&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lightweight/fast&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Files/folders&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IDEs&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Project systems&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Integrated build&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Debug&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;VCS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Code understandig&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What about something in the middle?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;VS Code is an editor, but has some capabilities from the IDS&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Code understanding&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Debug&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Everything from the Text editors&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to stick to one editor, VSCode + extensions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Initializr&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IntelliCode&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;AI-assited pattern recognition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demos&quot;&gt;DEMOS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Setting it up.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code --user-dir empty --extensions-dir empty/extensions
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Some basic things you can do&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Maven projects&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Had some demo issues&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;spring&quot;&gt;Spring&lt;/h1&gt;

&lt;h2 id=&quot;demos-1&quot;&gt;DEMOS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SpringBoot &lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Initializr&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Go-to-symbol works with Spring beans&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;PetClinic&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AzureDevSpaces&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Rapidly iterate and debug containers in Kubernetes&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Showed how you can drop in a new Service-B in the midst of other
existing services.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/vs-code-blog.jpg&quot; alt=&quot;Jakarta EE TImeline&quot; title=&quot;Timeline&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">VSCode</summary></entry><entry><title type="html">Raw Notes: Das Geheimnis erfolgreicher Teams</title><link href="/blog/2019/03/19/javaland-successful-teams-picks.html" rel="alternate" type="text/html" title="Raw Notes: Das Geheimnis erfolgreicher Teams" /><published>2019-03-19T08:45:00-04:00</published><updated>2019-03-19T08:45:00-04:00</updated><id>/blog/2019/03/19/javaland-successful-teams-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-successful-teams-picks.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Successful teams come from successful people&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Jobs, Musk, Zuck&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What makes the diffence between successful teams and normal teams.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Google Project Aristotle researched this.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Team A: very structured&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Team B: very loose&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Google found it does not matter.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Google found teams that talk a lot are successful.  “Psychological Safety”&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Clear structure&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Same mindset&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;Supported by the larger org.&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;COmpeling direction&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Supportive context&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;SHared mindest&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Have a vision: 2 year plan.  Within that, have “themes” to say
what’s important.  Within that Focus areas, for example, “we’re
going to build a mobile app”.  Helps people orgaize around.  Within
that, all of it has to be measured.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;V T F M&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Objective Key Results (OKR)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Objective (not as in vs Subjective, rather as in goal).  It’s an
agile story.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Key results (1000 dailt user)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Score 0.7 (700 users)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stretch goals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Audit quarterly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not too many objectives, with two or three key results.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Make goals transparent for everyone.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strong-structure&quot;&gt;Strong Structure&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Have a common language.  Analogy, making a film, but the actors,
lighting, sound, all sit in different room.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cross functional teams&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Help the developers understand why a particular design was chosen&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Faster + Stronger decisions.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Develop strong teams&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;FIKA drink coffee together, exchange ideas, allow things to be
shared outside of the stress of the regular grind.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Conference Video Fridays&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Team refreshments&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Getting stuff done days.  Work on docs.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Innovation weeks, every six weeks hackathon.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Small things, say thanks, give compliments.  Kudos system.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Welcoming culture for onboarding.  Handholding the new members.
Have a budy system.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trello, acquired by Atlassian,  Showed video.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;supportive-context&quot;&gt;Supportive Context&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Knowledge sharing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;documents, 1:1s, meetings, email: closed systems&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;better: Intranet, Chat,&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Your team space&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Company information&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Pesonal spaces&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Open by default, but of course can be closed.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep decision log, but allow corrections, allow marking obsolete.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make services discoverable, but as much as possible self-service.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shared-mindset&quot;&gt;Shared Mindset&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bug fix rotation, helps share the mindset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feature creation rotation.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Get a feature buddy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;doing-things-right&quot;&gt;Doing things right&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Process is good for that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But it is also important to do the right things.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recognize that teams can be very structured or very chaotic.
Create a team playbook.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Looks like design patterns for team activities&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Demo Trust&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Concept Testing&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;(Team) Health Monitor&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;One Fulltime Team Owner&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Balanced Team&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Dependencies&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Values and Metrics&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;Velocity&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;End-to-end Demo&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;a href=&quot;http://www.atlassianteamplaybook.com/&quot;&gt;http://www.atlassianteamplaybook.com/&lt;/a&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;right-people--right-tools--right-practices--great-team&quot;&gt;Right people + Right tools + right practices = great team&lt;/h2&gt;</content><author><name></name></author><summary type="html">Successful teams come from successful people</summary></entry><entry><title type="html">Raw Notes: Master your Java Applications in Kubernetes</title><link href="/blog/2019/03/19/javaland-kubernetes-picks.html" rel="alternate" type="text/html" title="Raw Notes: Master your Java Applications in Kubernetes" /><published>2019-03-19T06:45:00-04:00</published><updated>2019-03-19T06:45:00-04:00</updated><id>/blog/2019/03/19/javaland-kubernetes-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-kubernetes-picks.html">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CV Slide.  History from consulting, banks, insurance, on-prem&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Cloud is not his history, but now he’s all about it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Agenda&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Choose your Java runtime&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Build and execute your app&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Create your image&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run in K8s&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Final thoughts&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to decide to go with k8s&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Top down or bottom up?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;How to integreate?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Slow startup: naieve impl of monolith decomposition.  Take EE app,
put it in container, run on k8s.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;K8s is for horizontal scaling, not vertical scaling&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You can horizontally scale infinitely, until the first bill comes
in!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;More hands working with K8s&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choosing the Java runtime&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Support&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;LTS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Container aware?&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Since 8u131 &amp;amp; JDK 9&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Changes in 8u191 &amp;amp; JDK10&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;CommentL what does he mean with container aware?&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many options out there.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;OpenJ9 is the IBM JDK&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Contributed to Eclipse in 2017&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Take OpenJDK, replace Hotspot&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Small memory footprint and fast startup.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;GraalVM&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Universal VM for running various langauges&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Removes isolation and enables interop&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;How is this related to K8s&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;JVM needs to be aware of containers CPU and memory&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Keep the memory and size footprint small&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Keep it with fast startup time.  You can burn money for no good.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;“Basic” container specific flags&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/k8s-runtime-flags-01.jpg&quot; alt=&quot;Flags 01&quot; title=&quot;Flags 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/k8s-runtime-flags-02.jpg&quot; alt=&quot;Flags 02&quot; title=&quot;Flags 02&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ahead of time compilation (AOT)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application Class Data Sharing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since JDK10 (JEP310)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flag &lt;em&gt;UseAppCDS&lt;/em&gt; (automatically enabled in JDK12)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reduce memory footprint startup time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Needs two prep steps&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;DEMO&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Start a vertx app&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Create AppCDS, &lt;code class=&quot;highlighter-rouge&quot;&gt;class.lst&lt;/code&gt;, but does not include all the classes.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Create archive file from &lt;code class=&quot;highlighter-rouge&quot;&gt;class.lst&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;COMMENT: this is really great.  Explore this.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CDS and AOT in OpenJ9&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;enable class data sharing and AOT is enabled by default&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Looks like it does the preceding for you automatically.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Native compilation&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Based on Graal compiler&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Download GraaLVM&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Build fat jar&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;native-image -jar app.jar &amp;amp;&amp;amp; ./app&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Works with Micronaut, Spark Java, Vert.X.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Not there yet.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Benchmarks: Always do your own&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create your images&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Shrink your images to a minimum&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;FROM openjdk:12-ea-jdk-alpine3.8: as builder&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;jlink –add-modules … –output /opt/jre-minimal&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;COPY –from=builder /opt/jre-minimal /opt-jre-minimal&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Create lean images&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;put most changeable stuff lowest at bottom of Dockerfile&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;FROM adoptopenjdk/openjdk11-openj9:alpine-slim&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Think about your images&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Try to avoid “fat” jars and wars.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choosing your top level FROM image&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Look for vendor-specific images&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Don’t use :latest, or no tag.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DEMO: Graal Native&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;.  Then &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stats&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the app in K8s.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Share your CDS files in K8s&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Set resource request limits.  PodSpec: &lt;code class=&quot;highlighter-rouge&quot;&gt;resources.requests.{memory,cpu}
resources.requests.limits.{memory,cpu}&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Apply quotas on Namepsace level.  &lt;code class=&quot;highlighter-rouge&quot;&gt;kind:ResourceQuota&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;ConfigMaps &amp;amp; Secrets to externalize your config&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Final thoughts&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Avoid infrastructure code in your applications&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Service mesh with circuit breaker&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Service discovery using DNS or Labels in K8s&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Configuration via ConfigMap&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Helm charts to ship your application&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Package manager like “apt” in Debian&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Kubernetes Operators helps you manage upgrades, lifecycle, and
insights.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Don’t overlook serverless&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Better utilization of your cluster: accomodate different workloads&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Knative, an operator from Google and Pivotal&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;GraalVM and other projects focusing on low footprint &amp;amp; fast startup&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Why optimize?  COSTS.  Smaller footprint, CPU, cycles, pay per use.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;lifecycle has changed.  Startup is now critical.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">CV Slide. History from consulting, banks, insurance, on-prem</summary></entry><entry><title type="html">Raw Notes: Community-Controlled Jakarta EE with JAX-RS and MVC</title><link href="/blog/2019/03/19/javaland-jax-rs-mvc-picks.html" rel="alternate" type="text/html" title="Raw Notes: Community-Controlled Jakarta EE with JAX-RS and MVC" /><published>2019-03-19T06:00:00-04:00</published><updated>2019-03-19T06:00:00-04:00</updated><id>/blog/2019/03/19/javaland-jax-rs-mvc-picks</id><content type="html" xml:base="/blog/2019/03/19/javaland-jax-rs-mvc-picks.html">&lt;h3 id=&quot;raw-notes-community-controlled-jakarta-ee-with-jax-rs-and-mvc-christian-kaltepoth-markus-karg-ivar-gramstad&quot;&gt;Raw Notes: Community-Controlled Jakarta EE with JAX-RS and MVC, Christian Kaltepoth, Markus Karg, Ivar Gramstad&lt;/h3&gt;

&lt;h4 id=&quot;jax-rs&quot;&gt;JAX-RS&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Arrived late, Markus was sharing what has happened on the JAX-RS spec
since it was somewhat transferred to Jakarta&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;COMMENT: Could not read the slides.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A fair amount of complaining about the roadblocks.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Oracle is still the official lead&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We must not use the terms “Java” and “JAX-RS”.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Must not publish any new features.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;TCK still not under their control&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Spec doc still under Oracle sole control!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;COMMENT: It seems like this effort is stalled&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting into gear&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Fix the above problems&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;pruning commiters to only active people&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Publish the roadmap.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;COMMENT: again, cannot read the slides.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mvc&quot;&gt;MVC&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Christian Kaltepoth.  Bio.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reviewing the old Java EE 8 survey, the creation of MVC, in 2014!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What happened next&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Relicense under Apache 2&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Migrate project structure&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Finished RI&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Created TCK&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;JCP stuff.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Challenges&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Trademark issues&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Eclipse Development Process (EDP)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Clean intellectual property&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Using the infrastructure from Eclipse.  Works well enough.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What’s next?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Finish the spec thru JCP: in the next month!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Migrate spec and TCK to Eclipse EE4J&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;First real release of Jakarta EE8&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Become a part of Jakarta EE 9!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.mvc-spec.org/&quot;&gt;contribute https://www.mvc-spec.org/&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jakarta-ee&quot;&gt;Jakarta EE&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There is a lot going on, but we have not conveyed it to the community.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;COMMENT: I like how he owns that they need to do better about
communicating the mission.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Loved the timeline.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/jakarta-ee-timeline.jpg&quot; alt=&quot;Jakarta EE TImeline&quot; title=&quot;Timeline&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TCK note: use a bottom up process&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IMPORTANT: Eclipse Foundation Specification Process&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Plan to finalize at the meeting today!  JavaLand is timely again.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Showed the scrum board.  Awesome.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;See &lt;a href=&quot;https://jakarta.ee/&quot;&gt;https://jakarta.ee/&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Especially the &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;blog https://jakartablogs.ee/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Raw Notes: Community-Controlled Jakarta EE with JAX-RS and MVC, Christian Kaltepoth, Markus Karg, Ivar Gramstad</summary></entry><entry><title type="html">JavaLand 2019 Conference Picks</title><link href="/blog/2019/03/11/javaland-2019-picks.html" rel="alternate" type="text/html" title="JavaLand 2019 Conference Picks" /><published>2019-03-11T17:30:00-04:00</published><updated>2019-03-11T17:30:00-04:00</updated><id>/blog/2019/03/11/javaland-2019-picks</id><content type="html" xml:base="/blog/2019/03/11/javaland-2019-picks.html">&lt;p&gt;&lt;img src=&quot;/blog/assets/JavaLand-2019-Banner-800x643-Twitter-Schulungspartner-ENG.jpg&quot; alt=&quot;I'm teaching at JavaLand 2019&quot; title=&quot;I'm teaching at JavaLand 2019&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s time for my favorite of the year: JavaLand!  This year I have the
great blessing to be &lt;a href=&quot;https://www.heise.de/developer/artikel/Ed-Burns-Container-waren-zur-rechten-Zeit-am-rechten-Ort-4303141.html&quot;&gt;giving the Tuesday
keynote&lt;/a&gt;.
I consider it a great honor to be in such esteemed company as Martin
Thompson, Holly Cummins, Adam Gowdiak (though I shan’t be dissing on
anyone’s &lt;a href=&quot;http://www.security-explorations.com/materials/se-javaland.pdf&quot;&gt;security
practices&lt;/a&gt;),
and other past keynote speakers.  I hope I’m up to the task.  I’ve been
&lt;a href=&quot;/blog/2019/01/29/ojug-2019-02-27.html&quot;&gt;practicing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also am very happy to be teaching a class with my long time training
partner Oliver Szymanski.  This year we are teaching about &lt;a href=&quot;https://programm.javaland.eu/2019/#/scheduledEvent/569084&quot;&gt;Docker and
Kubernetes&lt;/a&gt;.
The title of the workshop is “Cloud Perspective: Kubernetes is like an
App Server, but more Cloudy”, but I saw a funny tweet last week that
sums it up more humorously: &lt;a href=&quot;https://twitter.com/spezam/status/1104293618720878595&quot;&gt;Kubernetes is the Websphere of the
millenials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post lists my conference session picks.  I hope to attend as many
of these as possible, but there is so much going on that I may not be
able to make it.  There were many times when multiple sessions that I
want to attend were scheduled at the same time, apologies to the
speakers of the one’s not chosen.  Take a look at &lt;a href=&quot;https://programm.javaland.eu/2019/#/schedule&quot;&gt;program
yourself&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;

&lt;h4 id=&quot;0830-wintergarden---test-driven-architecture---peter-gafert&quot;&gt;08:30 Wintergarden - Test Driven Architecture - &lt;a href=&quot;https://twitter.com/codecholeric&quot;&gt;Peter Gafert&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This talk promises to take what we all love about TDD and apply it to
microservices based architectures.  This seems a tall order, so I’m keen
to see what it’s about.&lt;/p&gt;

&lt;h4 id=&quot;1100-wintergarden---community-controlled-jakarta-ee-with-jax-rs-and-mvc---christan-kaltepoth-and-friends&quot;&gt;11:00 Wintergarden - Community-Controlled Jakarta EE with JAX-RS and MVC - &lt;a href=&quot;https://twitter.com/chkal&quot;&gt;Christan Kaltepoth and friends&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;It’s been more than two years since Jakarta EE was announced and things
are really rolling now.  MVC is a great example of what can be done in
this new approach to developing the standard for enterprise Java.&lt;/p&gt;

&lt;h4 id=&quot;1200-rotunde---master-your-java-applications-in-kubernetes---andy-moncsek&quot;&gt;12:00 Rotunde - Master your Java Applications in Kubernetes - &lt;a href=&quot;https://twitter.com/AndyAHCP&quot;&gt;Andy Moncsek&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ever since seeing Ray Tsang’s talk about &lt;a href=&quot;/blog/2017/02/23/ray-tsang-docker-tips-notes.html&quot;&gt;Docker Tips and Tricks&lt;/a&gt; at
DevNexus 2017, people have been trying to avoid pitfall when combining
Java and Docker.  I think the same things need to be said about Java and
Kubernetes, and I expect Andy will say them.&lt;/p&gt;

&lt;h4 id=&quot;1300-stocks---jenkins-x-continuously-driving-the-kloud---gerd-aschemann&quot;&gt;13:00 STOCKs - Jenkins X Continuously Driving the Kloud - &lt;a href=&quot;https://twitter.com/GerdAschemann&quot;&gt;Gerd Aschemann&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I vividly remember the first time Kohsuke showed my Hudson, back in 2005
or so.  Even back then, it was clear that CI was going to be the way
things work in the future.  Nowadays, the CI space is more crowded than
ever: TravisCI, GitLab, CircleCI, and many many more.  I’d like to see
what Gerd has to say about the state of Jenkins and the new Jenkins X.&lt;/p&gt;

&lt;h4 id=&quot;1400-tie&quot;&gt;14:00 TIE:&lt;/h4&gt;

&lt;p&gt;I can’t let a JavaLand go by without seeing a talk by &lt;a href=&quot;https://twitter.com/dasniko&quot;&gt;Das
Niko&lt;/a&gt;, but on the other hand, &lt;a href=&quot;https://twitter.com/svenpet&quot;&gt;Sven
Peters&lt;/a&gt; is also a very excellent speaker,
with a compelling topic.  So I’ll list both and see which one I can
make.&lt;/p&gt;

&lt;h5 id=&quot;1400-silverado-theater---das-geheimnis-erfolgreicher-teams---sven-peters&quot;&gt;14:00 Silverado Theater - Das Geheimnis erfolgreicher Teams - &lt;a href=&quot;https://twitter.com/svenpet&quot;&gt;Sven Peters&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Having written and thought extensively about so-called Rockstar
Programmers, and in particular their role in successful teams, I want to
hear what Sven has to say about the whole thing.&lt;/p&gt;

&lt;h5 id=&quot;1400-schauspielhaus---container-vs-serverless---the-good-the-bad--the-ugly---das-niko&quot;&gt;14:00 Schauspielhaus - Container vs. Serverless - the Good, the Bad &amp;amp; the Ugly - &lt;a href=&quot;https://twitter.com/dasniko&quot;&gt;Das Niko&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;I love Niko’s talks because he sticks straight to the technical, and
he’s not afraid to challenge conventional wisdom.  That always makes for
a good talk.&lt;/p&gt;

&lt;h4 id=&quot;1500-quantum-12---visual-studio-code-for-java-and-spring-devs---bruno-borges&quot;&gt;15:00 Quantum 1+2 - Visual Studio Code for Java and Spring Devs - &lt;a href=&quot;https://twitter.com/brunoborges&quot;&gt;Bruno Borges&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This quote alone from the abstract is striking for its honesty and
candor: “Installing the right extensions in VS Code results in a
powerful yet lightweight code editing experience that comes close to the
feature richness of existing Java IDEs.”  Having been experienced with
NetBeans and, to a lesser extent IntelliJ idea, I am certainly willing
to try other tools.  Let’s see what VS Code for Java has to show.&lt;/p&gt;

&lt;h4 id=&quot;1600-lecture-tent---datenflut-ertrinken-oder-auf-der-welle-reiten-tanja-schmidt&quot;&gt;16:00 Lecture Tent - Datenflut: Ertrinken oder auf der Welle reiten? &lt;a href=&quot;https://programm.javaland.eu/2019/#/speaker/382558&quot;&gt;Tanja Schmidt&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’m excited to understand how to go fishing in a Data Lake.  I expect
Tanja will explain it all and more.&lt;/p&gt;

&lt;h4 id=&quot;1700-wintergarden---panel-zukunft-java&quot;&gt;17:00 Wintergarden - Panel: Zukunft Java&lt;/h4&gt;

&lt;p&gt;There is a lot to talk about here. Knowing
&lt;a href=&quot;https://twitter.com/hendrikEbbers&quot;&gt;Hendrik&lt;/a&gt; it will be entertaining and
informative.&lt;/p&gt;

&lt;h4 id=&quot;1800-quantum-12---the-future-of-java-and-you---heather-vancura&quot;&gt;18:00 Quantum 1+2 - The Future of Java and You - &lt;a href=&quot;https://twitter.com/heathervc&quot;&gt;Heather Vancura&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you’ve wondered about the continuing role of the JCP in a world where
plain-ole-Open Source (PooS) and the Jakarta Project are also valid
governance choices, this talk should answer your questions.&lt;/p&gt;

&lt;h4 id=&quot;1900-wintergarden---revisiting-effective-java-in-2019-edson-yanaga&quot;&gt;19:00 Wintergarden - Revisiting Effective Java in 2019 &lt;a href=&quot;https://twitter.com/yanaga&quot;&gt;Edson Yanaga&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’ve long felt that Java’s biggest education problem is the challenge of
teaching only the good stuff.  The classic book on which this talk is
based does that very well.  I look forward to hearing Edson’s
perspective on Josh Bloch’s java gem.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;

&lt;h4 id=&quot;0900-rotunde---welcome-failure-leichter-gesagt-als-getan-sabine-wojcieszak&quot;&gt;09:00 Rotunde - Welcome Failure Leichter gesagt als getan! &lt;a href=&quot;https://twitter.com/SabineBendixen&quot;&gt;Sabine Wojcieszak&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’ve never seen a session from this speaker, but she seems like an
excellent speaker and the talk promises to tease apart blame from
responsibility.  It’s an ambitious agenda for 40 minutes, but a great
chance to meet and talk about this important topic more, perhaps over an
ice cream across the way from Quantum 1+2.&lt;/p&gt;

&lt;h4 id=&quot;1000-schauspielhaus---wie-fit-ist-java-für-die-cloud---roland-huß&quot;&gt;10:00 Schauspielhaus - Wie fit ist Java für die Cloud? - &lt;a href=&quot;https://www.twitter.com/ro14nd&quot;&gt;Roland Huß&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I’m choosing this talk just based on the experience of the speaker and
the topic.  Roland is the man behing the Docker Maven Plugin.  I expect
to see a critical assesment of Java and the cloud.&lt;/p&gt;

&lt;h4 id=&quot;1100-silverado---community-keynote-kampf-der-giganten&quot;&gt;11:00 Silverado - Community-Keynote: Kampf der Giganten&lt;/h4&gt;

&lt;p&gt;The community keynote at JavaOne is often a humorous and informative
look at what’s has happened in the Java community in the past year.  I
expect this will be similar.  I’ve been invited to participate!&lt;/p&gt;

&lt;h4 id=&quot;1200-stocks---kubernetes-runtime-security-when-contaniers-go-bad---jen-tong&quot;&gt;12:00 STOCKs - Kubernetes Runtime Security: When Contaniers Go Bad - &lt;a href=&quot;https://twitter.com/MimmingCodes&quot;&gt;Jen Tong&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Knowing how many people allow their Docker &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; to run as root,
I’m curious to see what Jen has to say about security in containers.&lt;/p&gt;

&lt;h4 id=&quot;1300-quantum-12---java-webstart-ist-tot---wie-geht-es-nun-weiter---hendrik-ebbers&quot;&gt;13:00 Quantum 1+2 - Java WebStart ist tot - Wie geht es nun weiter? - &lt;a href=&quot;https://twitter.com/hendrikEbbers&quot;&gt;Hendrik Ebbers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I have nothing to do with client side Java any more, but I remember
really loving Java WebStart back in the day.  I wonder where it will go
now?&lt;/p&gt;

&lt;h4 id=&quot;1400-stocks---when-technology-and-humanly-collides---marieme-jamme&quot;&gt;14:00 STOCKs - When Technology and humanly collides - &lt;a href=&quot;https://twitter.com/mjamme&quot;&gt;Marieme Jamme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;We need more talks like this about the societal impact of what we do as
programmers.  I can’t wait to see this one.  Even though the abstract is
very sparse, I’m sure it’s worth attending.&lt;/p&gt;

&lt;h4 id=&quot;1500-schauspielhaus---java-hacker-und-zwillingsmama---martina-baumer&quot;&gt;15:00 Schauspielhaus - Java-Hacker und Zwillingsmama - &lt;a href=&quot;https://programm.javaland.eu/2019/#/speaker/381980&quot;&gt;Martina Baumer&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Work and life balance was a theme I explored in the Rockstar Programmer
book.  Unfortunately, all the people I interviewed were men.  I can’t
wait to see Martina’s female perspectives on this important topic.&lt;/p&gt;

&lt;h4 id=&quot;1600-quantum-34---testing-java-microservices---andy-gumbrecht&quot;&gt;16:00 Quantum 3+4 - Testing Java Microservices - &lt;a href=&quot;https://twitter.com/AndyGeeDe&quot;&gt;Andy Gumbrecht&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Andy has written an excellent book from which he is extracting this
talk.  I’ve seen it before and it’s great.  You should see it too.&lt;/p&gt;

&lt;h4 id=&quot;1700-wintergarden---the-dark-side-of-java-8---grzegorz-piwowarek&quot;&gt;17:00 Wintergarden - The Dark Side of Java 8 - &lt;a href=&quot;https://twitter.com/pivovarit&quot;&gt;Grzegorz Piwowarek&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;I love to get outside perspectives on the success or failure of our Java
releases.  I’m wondering what he thinks is wrong with the Stream API?
We’ll see!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">I’m Speaking at Orlando JUG on Thursday 7 March</title><link href="/blog/2019/01/29/ojug-2019-02-27.html" rel="alternate" type="text/html" title="I'm Speaking at Orlando JUG on Thursday 7 March" /><published>2019-01-29T18:00:00-05:00</published><updated>2019-01-29T18:00:00-05:00</updated><id>/blog/2019/01/29/ojug-2019-02-27</id><content type="html" xml:base="/blog/2019/01/29/ojug-2019-02-27.html">&lt;p&gt;My local Java User’s Group is getting off to a great start in 2019.  As
was mentioned on
&lt;a href=&quot;https://twitter.com/mgrygles/status/1088190088100700185&quot;&gt;twitter&lt;/a&gt;, we
had &lt;a href=&quot;https://twitter.com/cjug&quot;&gt;Chicago JUG&lt;/a&gt;’s own
&lt;a href=&quot;https://twitter.com/mgrygles&quot;&gt;Mary Grygleski&lt;/a&gt; in January, I’ll be
speaking in March, and shortly thereafter we’ll have my colleage
Santiago Pericas-Geertsen in April.&lt;/p&gt;

&lt;p&gt;My talk is chance to see what I’ll be presenting as a keynote at
&lt;a href=&quot;https://javaland.eu&quot;&gt;JavaLand&lt;/a&gt; this year.  You can read more about it
at the following places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.meetup.com/OrlandoJUG/events/258490920/&quot;&gt;MeetUp&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://codetown.com/events/orlandojug-programming-platform-growth-table-stakes-or-deal-makes&quot;&gt;CodeTown&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But briefly, my talk draws from my 25 years of professional programming
experience, spanning many languages, operating systems, and platforms,
to survey what it takes to make a programming language platform
successful in terms of widespread use. I’ll look at Java, Python,
Node, Go, and Swift and evaluate the ingredients that brought each one
its own form of success. Finally, I’ll draw some lessons that apply
to anyone trying to grow their computing platform, because, at some
level, we are all in the platform business.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thursday 7 March 2019&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;6pm - 8pm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starter Studio Orlando&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.google.com/maps/search/?api=1&amp;amp;query=28.540941%2C-81.381256&quot;&gt;101 South Garland Avenue Suite 108, Orlando, FL&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll have some copies of
&lt;a href=&quot;http://ridingthecrest.com/&quot;&gt;Secrets of the Rockstar Programmers&lt;/a&gt; on
hand for sale for USD $15 each.&lt;/p&gt;

&lt;h2 id=&quot;coming-in-april-project-helidon&quot;&gt;Coming In April: Project Helidon&lt;/h2&gt;

&lt;p&gt;My colleague, and former JAX-RS spec lead, Santiago Pericas-Geertsen
will be presenting the new and exciting
&lt;a href=&quot;https://helidon.io/#/&quot;&gt;Oracle Project Helidon&lt;/a&gt;.  Helidon is a
Microprofile friendly Java powered collection of cohesive libraries for
writing software for the microservices style.  You may also know
Santiago as the man behind the innovative
&lt;a href=&quot;https://www.n-k.de/2014/05/project-avatar-twitterwall-demo.html&quot;&gt;Oracle Project Avatar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Santiago’s talk will be at the same place as my 7 March talk.&lt;/p&gt;</content><author><name></name></author><summary type="html">My local Java User’s Group is getting off to a great start in 2019. As was mentioned on twitter, we had Chicago JUG’s own Mary Grygleski in January, I’ll be speaking in March, and shortly thereafter we’ll have my colleage Santiago Pericas-Geertsen in April.</summary></entry><entry><title type="html">Stacktraces and deinitializers in Swift</title><link href="/blog/2019/01/17/swift-callstack.html" rel="alternate" type="text/html" title="Stacktraces and deinitializers in Swift" /><published>2019-01-17T13:00:00-05:00</published><updated>2019-01-17T13:00:00-05:00</updated><id>/blog/2019/01/17/swift-callstack</id><content type="html" xml:base="/blog/2019/01/17/swift-callstack.html">&lt;p&gt;While continuing to make my way through
&lt;a href=&quot;https://docs.swift.org/swift-book/&quot;&gt;the Swift Book&lt;/a&gt;, I finally reached
the definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Deinitialization&lt;/code&gt;.  The authors wait until almost
halfway through the pagecount before introducing this concept.  Since
this is the first time in the book a code sample has code that is called
by the runtime rather than the reader, I wanted to print a stack trace
in the deinitializer and see what it looked like.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Deinitialization&lt;/code&gt; example from the Swift Book with my call
to print the stack trace on line 25.  I had to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;import
Foundation&lt;/code&gt; to make it compile with that line in there.&lt;/p&gt;

&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #006699;&quot;&gt;Foundation&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Bank &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; var coinsInBank &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; 10_000&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; func distribute&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins numberOfCoinsRequested&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;-&amp;gt;&lt;/span&gt; Int &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; let numberOfCoinsToVend &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; min&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;numberOfCoinsRequested, coinsInBank&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInBank &lt;span style=&quot;color: #339933;&quot;&gt;-=&lt;/span&gt; numberOfCoinsToVend&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; numberOfCoinsToVend&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; func receive&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInBank &lt;span style=&quot;color: #339933;&quot;&gt;+=&lt;/span&gt; coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; Player &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; var coinsInPurse&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; init&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInPurse &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; Bank.&lt;span style=&quot;color: #006633;&quot;&gt;distribute&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; coins&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; func win&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Int&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; coinsInPurse &lt;span style=&quot;color: #339933;&quot;&gt;+=&lt;/span&gt; Bank.&lt;span style=&quot;color: #006633;&quot;&gt;distribute&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; coins&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; deinit &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; debugPrint&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;PlayerOne has left the game&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;a href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Athread+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Thread&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;callStackSymbols&lt;/span&gt;.&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;$&lt;span style=&quot;color: #cc66cc;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Bank.&lt;span style=&quot;color: #006633;&quot;&gt;receive&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; coinsInPurse&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;var playerOne&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; Player&lt;span style=&quot;color: #339933;&quot;&gt;?&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; Player&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;A new player has joined the game with &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;playerOne!.coinsInPurse) coins&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;A new player has joined the game with 100 coins&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;There are now &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;Bank.coinsInBank) coins left in the bank&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;There are now 9900 coins left in the bank&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;playerOne&lt;span style=&quot;color: #339933;&quot;&gt;!&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;win&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;coins&lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #cc66cc;&quot;&gt;2&lt;/span&gt;_000&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;PlayerOne won 2000 coins &amp;amp; now has &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;playerOne!.coinsInPurse) coins&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;PlayerOne won 2000 coins &amp;amp; now has 2100 coins&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;The bank now only has &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;Bank.coinsInBank) coins left&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;The bank now only has 7900 coins left&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;playerOne &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; nil&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;PlayerOne has left the game&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;print&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;The bank now has &lt;span style=&quot;color: #000099; font-weight: bold;&quot;&gt;\(&lt;/span&gt;Bank.coinsInBank) coins&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;// Prints &amp;quot;The bank now has 10000 coins&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;I learned about this call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.callStackSymbols.forEach&lt;/code&gt; on
&lt;a href=&quot;https://stackoverflow.com/questions/30754796/how-to-print-call-stack-in-swift/30814498&quot;&gt;stackoverflow&lt;/a&gt;,
but the more interesting information is in the reference docs for
&lt;a href=&quot;https://developer.apple.com/documentation/foundation/thread&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;&lt;/a&gt;.
You see, &lt;code class=&quot;highlighter-rouge&quot;&gt;callStackSymbols&lt;/code&gt; is an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; and therefore it has
a &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;.  The output from running the above program looks like this:&lt;/p&gt;

&lt;div class=&quot;text&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;ol&gt;&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;A new player has joined the game with 100 coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;There are now 9900 coins left in the bank&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;PlayerOne won 2000 coins &amp;amp; now has 2100 coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;The bank now only has 7900 coins left&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;quot;PlayerOne has left the game&amp;quot;&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;0 &amp;nbsp; ??? &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x00000001153071e5 0x0 + 4650463717&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;1 &amp;nbsp; ??? &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x0000000115307478 0x0 + 4650464376&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;2 &amp;nbsp; libswiftCore.dylib &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0x00000001179bda00 _swift_release_dealloc + 16&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;3 &amp;nbsp; ??? &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x00000001153068d5 0x0 + 4650461397&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;4 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010e8a723d _ZN4llvm5MCJIT11runFunctionEPNS_8FunctionENS_8ArrayRefINS_12GenericValueEEE + 365&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;5 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010e8adc1c _ZN4llvm15ExecutionEngine17runFunctionAsMainEPNS_8FunctionERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEPKPKc + 1004&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;6 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010db0efe4 _ZL14performCompileRN5swift16CompilerInstanceERNS_18CompilerInvocationEN4llvm8ArrayRefIPKcEERiPNS_16FrontendObserverEPNS_20UnifiedStatsReporterE + 52660&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;7 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010dafed35 _ZN5swift15performFrontendEN4llvm8ArrayRefIPKcEES3_PvPNS_16FrontendObserverE + 7717&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;8 &amp;nbsp; swift &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x000000010daa4965 main + 1349&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;9 &amp;nbsp; libdyld.dylib &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0x00007fff79108015 start + 1&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #f0f0f0;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;The bank now has 10000 coins&lt;/div&gt;&lt;/li&gt;
&lt;li style=&quot;background: #fcfcfc;&quot;&gt;&lt;div style=&quot;font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Line 14 of the output, &lt;code class=&quot;highlighter-rouge&quot;&gt;8 swift ... main + 1349&lt;/code&gt;, corresponds exactly to
1349 characters after the start of above code listing, which is
&lt;code class=&quot;highlighter-rouge&quot;&gt;playerOne = nil&lt;/code&gt;.  And indeed that is when the deinitializer is called.&lt;/p&gt;

&lt;p&gt;Looking at the reference documentation, there are some other interesting
properties of &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;.  Some useful class properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;isMultiThreaded: Boolean&lt;/li&gt;
  &lt;li&gt;isMainThread: Boolean&lt;/li&gt;
  &lt;li&gt;name: the name of the thread&lt;/li&gt;
  &lt;li&gt;current: the current thread&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s add this line to the beginning of the code listing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread.current.name = &quot;Main Game Thread&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Modifying the above code to print out these properties, the new output
is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;isMultiThreaded: false
current.isMainThread: true
current.name: Main Game Thread
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we can see that the deinitializer is called on the same thread as the
main code.&lt;/p&gt;

&lt;p&gt;I’m sure there is more to reveal about runtime stack inspection, but
mastering the diagnostic and debugging techniques of a programming
language platform is an important component of proficiency.  It pays to
pick up and save such tips when they come along.&lt;/p&gt;</content><author><name></name></author><summary type="html">While continuing to make my way through the Swift Book, I finally reached the definition of Deinitialization. The authors wait until almost halfway through the pagecount before introducing this concept. Since this is the first time in the book a code sample has code that is called by the runtime rather than the reader, I wanted to print a stack trace in the deinitializer and see what it looked like.</summary></entry><entry><title type="html">Swift and Object Oriented Programming</title><link href="/blog/2018/12/21/swift-and-oo.html" rel="alternate" type="text/html" title="Swift and Object Oriented Programming" /><published>2018-12-21T16:30:00-05:00</published><updated>2018-12-21T16:30:00-05:00</updated><id>/blog/2018/12/21/swift-and-oo</id><content type="html" xml:base="/blog/2018/12/21/swift-and-oo.html">&lt;p&gt;One thing I noticed learning Swift is how it’s approach to object
orientation differs from the classical approach I was taught in college,
back when OO was the dominant way of designing software.  This post&lt;/p&gt;

&lt;p&gt;I can’t find any academic papers about “protocol oriented programming”.
How does it differ from “design by contract”?&lt;/p&gt;

&lt;p&gt;I searched the ACM Digital Library for “Protocol Oriented Programming”.
None of the top 50 hits were about the actual thing that Apple’s Swift
developers are talking about.&lt;/p&gt;</content><author><name></name></author><summary type="html">One thing I noticed learning Swift is how it’s approach to object orientation differs from the classical approach I was taught in college, back when OO was the dominant way of designing software. This post</summary></entry><entry><title type="html">Annoyance about learning Swift</title><link href="/blog/2018/12/18/swift-annoyance.html" rel="alternate" type="text/html" title="Annoyance about learning Swift" /><published>2018-12-18T14:30:00-05:00</published><updated>2018-12-18T14:30:00-05:00</updated><id>/blog/2018/12/18/swift-annoyance</id><content type="html" xml:base="/blog/2018/12/18/swift-annoyance.html">&lt;p&gt;I’m pretty sure this is a tell about my mental capacity, but I gotta say
that several features in Swift have the following annoying pattern, at
least in the way they are explained in the official
&lt;a href=&quot;https://docs.swift.org/swift-book/&quot;&gt;Swift Book&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;They explain the full syntax of the feature.  This is very nice,
compact, and readily grasped.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But wait, you can do the same thing but simpler with this more
concise syntax.  This starts to get obtuse.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;But wait, you can do it even more simply with this super concise
syntax.  At this point the syntax itself makes little sense and I
find it hard to grasp.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps it would be better to not spring the 2 and 3 level
simplifications on the reader until they have firmly grasped 1?&lt;/p&gt;

&lt;h2 id=&quot;case-1-closures&quot;&gt;Case 1: Closures&lt;/h2&gt;

&lt;p&gt;The Swift Book helpfully provides the full syntax of closures right at
the front.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(parameters)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, they then go through several, progressively more compact (and
less readily grasped for a beginner) iterations.  At each step along the
way, they point out why the more compact syntax still works, but you
have to keep in your mind other language concepts that are in play to
enable the simplification.  Then there is this cheeky statement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s actually an even shorter way to write the closure expression above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reversedNames = names.sorted(by: &amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, you know all that parameter list, arrow, return type, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; keyword?
In some special cases, you simply don’t need ‘em.  Perhaps if I get
heavily into Swift I will come to like the fact that all that seemingly
important stuff can sometimes be omitted, but for now I would rather not
have to learn when it’s possible to use the compact syntax and just have
to do the verbose syntax all the time.  Stuff like this just seems like
the language is taking on some things I usually let the IDE do.&lt;/p&gt;

&lt;h2 id=&quot;case-2-computed-properties&quot;&gt;Case 2: Computed Properties&lt;/h2&gt;

&lt;p&gt;The Swift Book again shows the full syntax of a computed property, but
only by example.  Then it says, “By the way, if your computed property
happens to be read-only, you can simplify the declaration of a read-only
computed property by removing the get keyword and its braces.”&lt;/p&gt;

&lt;h2 id=&quot;case-3-property-observers-and-the-default-parameter-name&quot;&gt;Case 3: Property Observers and the default parameter name&lt;/h2&gt;

&lt;p&gt;I like the concept of property observers but wonder why they felt the
need to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;oldValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;newValue&lt;/code&gt; default parameter names for
the getter and setter.  Such as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can specify a name for this parameter as part of your willSet
implementation. If you don’t write the parameter name and parentheses
within your implementation, the parameter is made available with a
default parameter name of newValue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if you implement a didSet observer, it’s passed a constant parameter
containing the old property value. You can name the parameter or use
the default parameter name of oldValue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is certainly not new to Swift.  Indeed I’ve lamented the same thing
about &lt;a href=&quot;/blog/2010/03/03/perils-8220there8217s-more-one-way-do-it8221.html&quot;&gt;Perl&lt;/a&gt;.  I just
think this “look at how powerful my syntax is with the beautiful
abstractions I’ve made that allow me to state things so simply”
mentality can be taken a bit too far.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m pretty sure this is a tell about my mental capacity, but I gotta say that several features in Swift have the following annoying pattern, at least in the way they are explained in the official Swift Book.</summary></entry></feed>