<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/blog/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2017-06-07T13:03:37-04:00</updated><id>/blog//</id><title type="html">Ed Burns Blog</title><subtitle>Ed Burns blogs here, mostly about Java and software, but sometimes about other random things.
</subtitle><entry><title type="html">Java Offheap Podcast Future of Java Part II at Goto Chicago 2017</title><link href="/blog/2017/06/05/javaoffheap-goto-part2.html" rel="alternate" type="text/html" title="Java Offheap Podcast Future of Java Part II at Goto Chicago 2017" /><published>2017-06-05T08:00:00-04:00</published><updated>2017-06-05T08:00:00-04:00</updated><id>/blog/2017/06/05/javaoffheap-goto-part2</id><content type="html" xml:base="/blog/2017/06/05/javaoffheap-goto-part2.html">&lt;p&gt;I had the honor to be a guest
on &lt;a href=&quot;http://www.javaoffheap.com/&quot;&gt;Java OffHeap&lt;/a&gt;
(&lt;a href=&quot;http://www.twitter.com/offheap&quot;&gt;@offheap&lt;/a&gt;) while
attending &lt;a href=&quot;/blog/2017/04/19/goto-chicago-picks.html&quot;&gt;Goto Chicago 2017&lt;/a&gt;.  I am also
happy to announce that I am in talks with the OffHeap guys to have an
occasional guest segment on their program, tentatively called &quot;Mark and
Sweep&quot; where we will feature audio content from the existing interviews
from my book &lt;a href=&quot;http://ridingthecrest.com/purchase.html&quot;&gt;Secrets
of the Rockstar Programmers&lt;/a&gt; as well as new interviews with
additional thought leaders.&lt;/p&gt;

&lt;p&gt;The link to the episode
is &lt;code&gt;&amp;lt;&lt;a href=&quot;http://www.javaoffheap.com/2017/05/episode-24-nothing-like-sweet-home.html&quot;&gt;http://www.javaoffheap.com/2017/05/episode-24-nothing-like-sweet-home.html&lt;/a&gt;&amp;gt;&lt;/code&gt;,
but this post is my summary and notes, including the segment with
&lt;a href=&quot;https://twitter.com/javaFXpert&quot;&gt;Jim Weaver&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/deanwampler&quot;&gt;Dean Wampler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Part I, with &lt;a href=&quot;https://twitter.com/gsaab&quot;&gt;Georges Saab&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/edburns&quot;&gt;I&lt;/a&gt;, is
&lt;a href=&quot;/blog/2017/05/25/javaoffheap-goto-part1.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Part II: Dean Wampler and Jim Weaver&lt;/h2&gt;

&lt;p&gt;51:18 Introductions&lt;/p&gt;

&lt;p&gt;53:38 Bob polls the audience about alternative JVM languages.&lt;/p&gt;

&lt;p&gt;54:12 What happens if JDK 9 flops?  Dean asserts the microservices
movement is a threat to the JVM because it exposes how bloated JVM apps
typically are.  Go and Rust: are a factor of 10/100 smaller.  55:04 But
why does it matter if it's not a cost savings?  55:42 Dean points out
that it matters at google scale.  56:00 Bob: jlink can help with this.
56:50 Freddy: if we use jlink with Jigsaw, will Scala be smaller?  57:24
Dean answers, but not quite, and points out that Lightbend does track
JDK releases closely, citing lambda integration in a recent Scala
  release.&lt;/p&gt;

&lt;p&gt;57:15 Freddy: other threats? 57:46
  Bob: &lt;a href=&quot;https://www.meetup.com/en-AU/ChicagoJUG/events/237330076/&quot;&gt;Azul's
  Paul Nauman&lt;/a&gt;: complexity of the JVM is the JVM's worst enemy.
  58:28 Freddy, but that's true for every language.&lt;/p&gt;

&lt;p&gt;59:20 Dean: another risk: Apparent with SPARK: the appeal of DSLs.
  1:00:00 Bob: but what about debugging?  Also, SPARK and massive heap
  sizes.  1:01:20 SPARK realized the JMM is great for general purpose,
  but if you have a billion of the same thing, there is no need for that
  complexity.  1:02:30 Bob: Code rot is another risk to the ecosystem.
  People stop maintaining stuff, but the stuff is still very widely
  used.  1:03:26 Freddy tells his JavaScript story: there's three of
  everything: npm, bower do the same thing.  In spite of this JavaScript
  is still #1.  1:05 Dean: npm is using Rust for its scalability behind
  the scenes.  1:06:15 It's the old open vs. closed argument.&lt;/p&gt;

&lt;p&gt;1:08:07 Bob ASF: Not a problem to have multiple projects that do the
  same thing.  But you still need the JCP side to guarantee
  interoperability. 1:08:49 Jim Weaver adds that competition is good.
  1:09:50 when you run JDK on AWS, it is OpenJDK.  1:10:26 Bob: there
  are things in place in the JDK to prevent fragmentation.&lt;/p&gt;

&lt;p&gt;1:11:30 Freddy asks: What is your opinion of 9?  Dean: They try to
track the latest version of Java for their Scala users.  1:12:50 Lambdas
did slow the adoption of Scala because it took away the worst pain
point.  1:13:20 Jim: the Spring mantra make jar not war is well
supported by jigsaw.  1:14:31 Bob points out that Spring uses a lot of
reflection, but Jigsaw allows blocking code execution across package
boundaries, won't that cause problems?  1:15:33 Freddy points out that 9
lets you get close to that 20M mark on size, but notes that with Spring
boot, you may add a lot on top of that.  Jim did not address this.
&lt;code&gt;1:17:00 Freddy lists a nice process for optimization that starts
with coarse grained and ends up with using JMH.  This is a very valuable
  nugget.&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;1:19:24 Freddy asks to what extent Pivotal is going into machine
learning.  Jim answered that Pivotal is into data flows, such as Spring
  cloud data flow, which works with DeepLearning4J or Tensor Flow.&lt;/p&gt;

&lt;p&gt;1:20:50 Freddy asks how Lightbend is doing machine learning.  They
are looking at how to make it accessible to their developers. 1:22:04
Bob ask how many are using Hadoop and is surprised with the small number
  of hands.&lt;/p&gt;

&lt;p&gt;1:23:25 Freddy asks Dean to share the Lightbend strategy for world
dominance.  Answer: the tools they built, Akka, Play!, Lagom.  An
opinionated microservices framework.  What they want to do is promote
best practices and give them the tools to do it.  Bob: we need to figure
out a better way to structure the ideas so that regular developers can
use it.  1:25:44 Freddy observes how hard it is to do the reactive
  manifesto correctly.&lt;/p&gt;

&lt;p&gt;1:27:00 Discussion about the need to get knowledge out about best
practices.  1:29:35 Bob observes that organizations need to change to
adopt them.&lt;/p&gt;

&lt;p&gt;1:32:10 Freddy asks, why is it so hard to get microservices right?
James: 1:32:31 data is the hard part.  1:33:55 Dean: each microservices
has its own persistence, but this poses a problem when you evolve a
  system and data needs to change.&lt;/p&gt;

&lt;p&gt;1:35:55 How have alternative JVM languages played out?  At Expedia,
85% is just regular Java.  They do use a little Scala.  The bit that
they do use, some developers avoid touching because they are not
familiar with Scala.  1:37:40 Dean: about half of their devs use Scala.
90% of the JVM usage is Java.  1:38:12 Container management and
orchestration: Freddy: it's wild west right now.  1:39:45 Jim has a
counter argument: perhaps use build packs instead of containers.
1:40:10 Freddy, I wish we could settle down with the Docker stuff.&lt;/p&gt;</content><summary type="html">I had the honor to be a guest
on Java OffHeap
(@offheap) while
attending Goto Chicago 2017.  I am also
happy to announce that I am in talks with the OffHeap guys to have an
occasional guest segment on their program, tentatively called &quot;Mark and
Sweep&quot; where we will feature audio content from the existing interviews
from my book Secrets
of the Rockstar Programmers as well as new interviews with
additional thought leaders.</summary></entry><entry><title type="html">Java Offheap Podcast Future of Java Part I at Goto Chicago 2017</title><link href="/blog/2017/05/25/javaoffheap-goto-part1.html" rel="alternate" type="text/html" title="Java Offheap Podcast Future of Java Part I at Goto Chicago 2017" /><published>2017-05-25T08:00:00-04:00</published><updated>2017-05-25T08:00:00-04:00</updated><id>/blog/2017/05/25/javaoffheap-goto-part1</id><content type="html" xml:base="/blog/2017/05/25/javaoffheap-goto-part1.html">&lt;p&gt;I had the honor to be a guest
on &lt;a href=&quot;http://www.javaoffheap.com/&quot;&gt;Java OffHeap&lt;/a&gt;
(&lt;a href=&quot;http://www.twitter.com/offheap&quot;&gt;@offheap&lt;/a&gt;) while
attending &lt;a href=&quot;/blog/2017/04/19/goto-chicago-picks.html&quot;&gt;Goto Chicago 2017&lt;/a&gt;.  I am also
happy to announce that I am in talks with the OffHeap guys to have an
occasional guest segment on their program, tentatively called &quot;Mark and
Sweep&quot; where we will feature audio content from the existing interviews
from my book &lt;a href=&quot;http://ridingthecrest.com/purchase.html&quot;&gt;Secrets
of the Rockstar Programmers&lt;/a&gt; as well as new interviews with
additional thought leaders.&lt;/p&gt;

&lt;p&gt;The link to the episode
is &lt;code&gt;&amp;lt;&lt;a href=&quot;http://www.javaoffheap.com/2017/05/episode-24-nothing-like-sweet-home.html&quot;&gt;http://www.javaoffheap.com/2017/05/episode-24-nothing-like-sweet-home.html&lt;/a&gt;&amp;gt;&lt;/code&gt;,
  but this post is my summary and notes.&lt;/p&gt;

&lt;p&gt;Part II, with &lt;a href=&quot;https://twitter.com/javaFXpert&quot;&gt;Jim Weaver&lt;/a&gt;
and &lt;a href=&quot;https://twitter.com/deanwampler&quot;&gt;Dean Wampler&lt;/a&gt;, is
&lt;a href=&quot;/blog/2017/06/05/javaoffheap-goto-part2.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Part I: Georges Saab and I&lt;/h2&gt;

&lt;p&gt;02:58 I talk about the java.net sunset.  03:54 I mention that the
email lists were still not ready at the time of the recording
(now &lt;a href=&quot;https://javaee.groups.io/g/javaee&quot;&gt;now they are&lt;/a&gt;).  I
also mention the essential nature of the search archive for JCP mailing
lists.  This gives an insight into one of the challenges of evolving a
multi-year project over many releases.  04:37 I explain why we couldn't
use Google Groups. 05:25 I call for a moment of silence for the memory
of java.net.  05:58 I mention you can submit pull requests, but the
governance process is not yet in place for external commits.  06:19
Georges explains that openjdk was never running on java.net, and so is
not impacted.  06:58 Georges explains why they are not moving to GitHub
from Mercurial.  They have everything working well enough with
Mercurial, so there is no need to move it over to GitHub.  07:58 I
mention that we gave up using JIRA when moving to GitHub, and I asked if
anyone was using &lt;a href=&quot;http://waffle.io/&quot;&gt;waffle.io&lt;/a&gt; as an agile
  overlay on top of GitHub.  No one was.&lt;/p&gt;

&lt;p&gt;08:58 Bob asked about the transition to the &quot;train release&quot;.  Georges
mentioned that we work on things in OpenJDK, and then take it to JCP for
standardization.  We're not changing that way of doing things.  10:32
Georges tells the story of how there is a diversity of opinions
regarding release cadence.  11:42 Many of the things in 9 enable the
more rapid release model.  12:07 Freddy explains how this evolved across
the java releases.  12:48 Georges explains the &quot;medicine to candy
ratio&quot;.  9 has more medicine and not as much candy.  14:00 Georges
explains how this benefits the community as a whole.  It enables the
small things to get out more quickly without waiting for big blockbuster
releases.  15:00 He uses the 2016 delay of 9 as how it blocked things
like String compaction.  15:30 I mention the rapid sunset schedule for
Java 8 itself.  16:00 George observed September 2017 is end of public
updates for 8, but most of the criteria will not be met.  17:03 Bob
provides some insight on the corporate adoption angle.  18:27 Georges
pitches modularizaion's benefits.  It mitigates the need to
call &lt;code&gt;sun.misc.unsafe&lt;/code&gt;.  21:11 Freddy mentioned why people
use it: it makes it even &lt;b&gt;possible&lt;/b&gt; to consider Java.  It makes the
performance &lt;b&gt;acceptable&lt;/b&gt; compared to alternatives.  22:27 Freddy
mentioned that the current plan is to provide standard alternatives
before removing &lt;code&gt;sun.misc.unsafe&lt;/code&gt;.  22:38 Georges talks about
the support burden on unsafe and device driver control for
  Minecraft.&lt;/p&gt;

&lt;p&gt;26:24 Bob brings up the IBM and RedHat plan to vote no on Jigsaw, as
it relates to language development.  Georges provides some color.  27:55
Freddy asks what's the biggest complaint from IBM and RedHat.  28:59
Georges mentions the perils of scope creep.  29:46 Freddy asks what was
  the outcome?  30:42 Georges answers. &lt;/p&gt;

&lt;p&gt;32:30 Freddy asks, if you want to have faster startups, do you have
to use Jigsaw?  32:40 Georges answers use jlink and ahead of time
compilation.  By using jlink, you are telling the system what you are
actually using.  33:29 Bob points that JCP and jigsaw can conflict
because the releasing of Java subsets is prohibited according to legal
rules.  Georges answers: 8 introduced &quot;compact profiles&quot;.  Nobody has
complained about that.  Jlink is essentially a program doing that.
Jlink is for you to use to package the application.  35:20 Bob asks how
  small can it get?&lt;/p&gt;

&lt;p&gt;36:38 Ed tells the story of the acute need for a module system in EE.
The notion of having of modules would have influenced the design of EE.
37:35 Ed tells the story of the ALPN backport story.  Every decision
that is made has ripple effects down the pipeline.  38:57 Georges
elaborates more on the train idea.  &quot;Marbles stuck in the tube behind
the basketball&quot;.  The heart of the train release idea is that when
features are ready, they can be released.  To see what's coming, look at
the JEPs.  There is a minimum amount of time for JCP releases.  They are
looking at possibly shortening that minimum. &lt;code&gt;Ed personally notes:
    &lt;a href=&quot;https://martinfowler.com/bliki/Yagni.html&quot;&gt;YAGNI&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt;


&lt;p&gt;42:49 Project Valhalla: value types and data representation.  45:15
How this relates to the ends of the spectrum: micro services and really
big data.  45:42 Freddy likes value types, in particular its cache
  friendliness.&lt;/p&gt;

&lt;p&gt;46:00 Project Panama: JNI done right.  Generate ability to call into
java from header files.  47:35 this plus value types is pretty
  compelling.&lt;/p&gt;

&lt;p&gt;48:12 Status of JShell: it's in 9.  49:17 JShell removes all the
ceremony of getting started with Java.  We'll use things we learn from
  that to understand where we actually need the ceremony and don't.&lt;/p&gt;</content><summary type="html">I had the honor to be a guest
on Java OffHeap
(@offheap) while
attending Goto Chicago 2017.  I am also
happy to announce that I am in talks with the OffHeap guys to have an
occasional guest segment on their program, tentatively called &quot;Mark and
Sweep&quot; where we will feature audio content from the existing interviews
from my book Secrets
of the Rockstar Programmers as well as new interviews with
additional thought leaders.</summary></entry><entry><title type="html">So long, and thanks for all the commits</title><link href="/blog/2017/05/11/java-net-sunset.html" rel="alternate" type="text/html" title="So long, and thanks for all the commits" /><published>2017-05-11T20:00:00-04:00</published><updated>2017-05-11T20:00:00-04:00</updated><id>/blog/2017/05/11/java-net-sunset</id><content type="html" xml:base="/blog/2017/05/11/java-net-sunset.html">&lt;p&gt;&lt;code&gt;Updated: 2017-05-16 18:07Z Added more images.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20170512-sunset.jpg&quot; alt=&quot;Image of sunset with java.net coffe beans spilling&quot; /&gt;&lt;sub&gt;Image credit (CC) &lt;a href=&quot;https://magnusbråth.se/&quot;&gt;Magnus Bråth&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The long
awaited &lt;a href=&quot;https://community.oracle.com/community/java/javanet-forge-sunset&quot;&gt;java.net
forge sunset&lt;/a&gt; has finally come to pass.  Before there was github,
before there was google code, when sourceforge was a hot new thing,
there was java.net.  I always felt that java.net was the tip of Sun's
open source spear, whose shape was influenced in no small part by former
Sun CEO &lt;a href=&quot;https://jonathanischwartz.wordpress.com/&quot;&gt;Jonathan
Schwartz&lt;/a&gt;.  In fact the motto of java.net spoke of this role:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20170510-java-net-sunset-02.png&quot; alt=&quot;The source for Java Technolgy Collaboration&quot; /&gt;&lt;/p&gt;


&lt;p&gt;In fact the first &lt;a href=&quot;/blog/2004/06/28/welcome-javaserver-tm-faces-implementation-project.html&quot;&gt;blog
post I ever made&lt;/a&gt; was made to the java.net CMS, before there was such
a term as CMS.  Over the years, java.net hosted GlassFish, OpenJDK (for
a time), JSF, Facelets, JAX-RS, JMS, EJB, JavaMail, Jersey, Grizzly,
WebSocket, and many more.  I'd like to take this blog post to thank
those who ran java.net over the years, and more vitally, to thank those
who have played a role in migrating the Java EE content over to GitHub
and Groups.io.  I tried to not leave anyone out, but if I have, let me
know and I'll add them.  So, here's to you java.net and to all the
people who have helped keep it running and migrate its content to new
  homes.&lt;/p&gt;

&lt;h2&gt;Thanks to those who made the java.net migration a success&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Arindam Bandyopadhyay&lt;/li&gt;
&lt;li&gt;Sonya Barry&lt;/li&gt;
&lt;li&gt;Padmanabha Bhat&lt;/li&gt;
&lt;li&gt;Christina Brashear &lt;/li&gt;
&lt;li&gt;Bruno Borges&lt;/li&gt;
&lt;li&gt;Ed Bratt&lt;/li&gt;
&lt;li&gt;Padmanabhan C.V. &lt;/li&gt;
&lt;li&gt;Chris Carter &lt;/li&gt;
&lt;li&gt;Krishna Deepak&lt;/li&gt;
&lt;li&gt;David Delabassee&lt;/li&gt;
&lt;li&gt;Romain Grecourt&lt;/li&gt;
&lt;li&gt;Kokil Jain&lt;/li&gt;
&lt;li&gt;Yamini Kalyandurga&lt;/li&gt;
&lt;li&gt;Mike Kiehn&lt;/li&gt;
&lt;li&gt;Thomas Kurian&lt;/li&gt;
&lt;li&gt;Nalanda Mahajan&lt;/li&gt;
&lt;li&gt;Diksha Nagpal&lt;/li&gt;
&lt;li&gt;Brian Oliver&lt;/li&gt;
&lt;li&gt;Rob Orr&lt;/li&gt;
&lt;li&gt;Sameer Pandit&lt;/li&gt;
&lt;li&gt;Yolande Poirier&lt;/li&gt;
&lt;li&gt;Pranjal Sahay&lt;/li&gt;
&lt;li&gt;Bill Shannon&lt;/li&gt;
&lt;li&gt;Heather Vancura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/20170515-javanet-closed.png&quot; alt=&quot;Java.net closed message&quot; /&gt; &lt;img src=&quot;/blog/assets/20170516-eol.gif&quot; alt=&quot;END OF LINE&quot; /&gt;&lt;/p&gt;</content><summary type="html">Updated: 2017-05-16 18:07Z Added more images.</summary></entry><entry><title type="html">Goto Chicago 2017 Zhamak Dehghanil</title><link href="/blog/2017/05/02/goto-zhamak-dehghani.html" rel="alternate" type="text/html" title="Goto Chicago 2017 Zhamak Dehghanil" /><published>2017-05-02T17:30:00-04:00</published><updated>2017-05-02T17:30:00-04:00</updated><id>/blog/2017/05/02/goto-zhamak-dehghani</id><content type="html" xml:base="/blog/2017/05/02/goto-zhamak-dehghani.html">&lt;p&gt;Raw notes from &lt;a href=&quot;http://twitter.com/zhamakd&quot;&gt;Zhamak Dehghanil&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Getting to Microservices is a journey.  Looking for scale, get more
capabilities, experimenting with improvements to their core business,
  not just AB testing.&lt;/p&gt;

&lt;p&gt;Nice simple image of a journey down the hill through the valley, and
up the hill.&lt;/p&gt;

&lt;p&gt;Deconstruct the monolith, unlock business capabilities.&lt;/p&gt;

&lt;p&gt;Overview of microservices ecosystem.&lt;/p&gt;

&lt;p&gt;1. Monolithic, 2. intelligently integrated, 3. layered, web app,
  4. centrally integrated, 5. Microservices, 6. Microservices ecosystem
  on a platform.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;This timeline makes me think about step 7.  Perhaps when the microservices leave the enterprise and can be sold as standalone services?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Microservices around business capabilities.  API as a product, the
fabric of integration.  Independently releaseable.  Teams aligned with
  services.  Built on a self-served platform.&lt;/p&gt;

&lt;h2&gt;Monolith Evolution: The Battle&lt;/h2&gt;

&lt;h3&gt;1. Identify most constraining&lt;/h3&gt;

&lt;p&gt;Decouple the most constraining factor early.  The Knot.  Apply the
theory of constraints, as a chain is no stronger than its weakest
link.  For example.  A monolith that makes heavy use of session.  Need to find out what is the logical meaning of those things.  Use structural analysis tool.&lt;/p&gt;

&lt;h3&gt;2. Decouple capability, not code&lt;/h3&gt;

&lt;p&gt;The cost of reusing compared to its value is often underestimated.
  It might be worth re-writing.  Use toxcicity evaluation tool.&lt;/p&gt;

&lt;h3&gt;3. Decouple what matters&lt;/h3&gt;

&lt;p&gt;Decouple the capability that is lively, being used... use code
  analysis tool such as CodeScene for finding lively components.&lt;/p&gt;

&lt;h3&gt;4. Decouple vertically, release the data early&lt;/h3&gt;

&lt;p&gt;Apply the first principle of microservices: independence of build and
operation.  Because each microservice is self contained, including
  state, you need to extract full stack.&lt;/p&gt;

&lt;p&gt;the anti-patterns: only decouple facade, only decouple backend
  services, never decouple data.&lt;/p&gt;

&lt;h3&gt;5. Minimize dependency back to monolith&lt;/h3&gt;

&lt;p&gt;When you extract, don't go back to the monolith.  Tool: expose API
from monolith.  Use anti-corruption layer in service to use
monolith.&lt;/p&gt;

&lt;h3&gt;6. Go Macro first then go Micro&lt;/h3&gt;

&lt;p&gt;Recognize that operating a large number of small services requires
higher maturity.  Must walk before running.  Give yourself time to
acquire those skills.  Tool: use hyperlinks to logical resources within
or outside the physical service boundary.  HATEOAS: The apps can return
links that initially point back to oneself, but then can be changed to
point to other services, and the clients will not notice the
transition.&lt;/p&gt;

&lt;h3&gt;7. Migrate in atomic steps of architecture evolution, not devolution&lt;/h3&gt;

&lt;p&gt;Make sure that every step takes you closer to your goal.  Sometimes
  take a small step, sometimes take a large leap.  Tool: decouple,
  redirect, retire.&lt;/p&gt;

&lt;h2&gt;The climb&lt;/h2&gt;

&lt;p&gt;Start with a clear outcome in mind.  Define a fitness function.
  Experiment speed, security, throughput.  Radar chart.&lt;/p&gt;

&lt;p&gt;Hypothesize and measure.  Identify metrics.  For example, measure
number of applications built with the API, how quickly you can create
  new APIs.&lt;/p&gt;

&lt;p&gt;Enable with a self-service platform: Domain API, Data infrastructure,
  Delivery Infrastructure.&lt;/p&gt;

&lt;p&gt;Trade-offs instead of
solutions. &lt;a href=&quot;https://www.youtube.com/watch?v=3_EtIWmja-4&quot;&gt;&quot;There
are no solutions only tradeoffs&quot; &amp;mdash; Thomas Sowell&lt;/a&gt;.  See
also &lt;a href=&quot;http://www.quebecoislibre.org/younkins6.html&quot;&gt;Reality is
Not Optional: Thomas Sowell's Vision of Man and Society&lt;/a&gt;. Reuse
vs. Build vs. Buy vs. Re-write. &lt;/p&gt;

&lt;p&gt;Align organization: How is the funding.&lt;/p&gt;</content><summary type="html">Raw notes from Zhamak Dehghanil.</summary></entry><entry><title type="html">Goto Chicago 2017 Randy Shoup</title><link href="/blog/2017/05/02/goto-randy-shoup.html" rel="alternate" type="text/html" title="Goto Chicago 2017 Randy Shoup" /><published>2017-05-02T15:30:00-04:00</published><updated>2017-05-02T15:30:00-04:00</updated><id>/blog/2017/05/02/goto-randy-shoup</id><content type="html" xml:base="/blog/2017/05/02/goto-randy-shoup.html">&lt;p&gt;Raw notes from &lt;a href=&quot;http://twitter.com/randyshoup&quot;&gt;Randy Shoup&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;VP of engineering at Stitch Fix.  Did consulting in a &quot;CTO as a
service&quot;, before that was Director of Engineering at Google and chief
  engineer at eBay.&lt;/p&gt;

&lt;p&gt;About Stitch Fix.  Reverse of standard retail.  Fill out style
profile, get five handpicked items, keep what you like, return the
  rest.&lt;/p&gt;

&lt;p&gt;Behind the model is a lot of Art and Data Science.&lt;/p&gt;

&lt;p&gt;1:1 Ratio of engineering and data scientists&lt;/p&gt;

&lt;p&gt;Apply intelligence to &lt;b&gt;every&lt;/b&gt; part of the business&lt;/p&gt;

&lt;p&gt;Buying, inventory management, logistics, styling, demand prediction&lt;/p&gt;

&lt;p&gt;What is styling: personalized recommendations based on algorithmic
  recommendations with a human curation layer.&lt;/p&gt;

&lt;p&gt;Modern software dev: org, practices, culture, &lt;/p&gt;

&lt;p&gt;small teams, devops&lt;/p&gt;

&lt;p&gt;Small teams: aligned to domains, cross functional, depend on other
  teams for help as well.&lt;/p&gt;

&lt;p&gt;practices: TDD.  Motherhood and apple pie.  Continuous delivery: most
applications deployed multiple times per day.  Release smaller units of
  work, easier to roll back and role forward.  Better for AB testing.&lt;/p&gt;

&lt;p&gt;Culture: The amazon model: you build it, you run it.&lt;/p&gt;

&lt;h2&gt;Microservices&lt;/h2&gt;

&lt;p&gt;Architecture Evolution&lt;/p&gt;

&lt;p&gt;eBay: Monolithic Perl, Monolitic C++, Java, Microservices.&lt;/p&gt;

&lt;p&gt;Twitter and Amazon had a similar evolution.  It's ok to start out as
  a monolith.&lt;/p&gt;

&lt;p&gt;The micro of microservice is: single purpose, simple well defined
interface, isolated persistence (each one keeps its own state).  It's
  SOA done right.&lt;/p&gt;

&lt;p&gt;Approach 1: operate your own data store.  Store to your own Postgres, ie.&lt;/p&gt;

&lt;p&gt;Approach 2: Use a persistence service and store to your own tables,
  operated as a service on your behalf.  Slice is isolated.&lt;/p&gt;

&lt;h3&gt;Maintaining interface stability&lt;/h3&gt;

&lt;p&gt;backward/forward compatibility of interfaces.  Can never break your
  client's code.  Semantic versioning.  major.minor.patch&lt;/p&gt;

&lt;p&gt;Often maintaining multiple deployments and interface versions.  Need
an explicit deprecation policy.&lt;/p&gt;

&lt;p&gt;Went through procress from extracting services from the shared
  DB.&lt;/p&gt;

&lt;p&gt;Principle: single system of record.  There can be copies of that.&lt;/p&gt;

&lt;p&gt;Approach 2: Async event+local cache.  Customer service sends events.
  Order service listens to events.&lt;/p&gt;

&lt;p&gt;Approach 3: Shared metadata library.  Read only metadata, basically
  immutable.&lt;/p&gt;

&lt;p&gt;Events as first class construct.  This was from Martin's talk.  Event
  means: statement that something interesting has happened.&lt;/p&gt;

&lt;p&gt;Fourth fundamental building block.  Presentation, Application,
  Persistence, Events&lt;/p&gt;

&lt;p&gt;Events and Microservices go well together.&lt;/p&gt;

&lt;p&gt;Service interface includes: Synchronous request response.  Events the
  service produces/consumes.&lt;/p&gt;

&lt;p&gt;Joins: monolithic databases make joins very easily.  How to split it out?&lt;/p&gt;

&lt;p&gt;Approach 1: Service that materializes the view.  Service that
materializes the view.  &lt;/p&gt;

&lt;p&gt;Approach 2: Join in the client.&lt;/p&gt;

&lt;p&gt;Note that mashup style web apps do this.&lt;/p&gt;

&lt;h3&gt;Microservice Techniques: Workflows and Sagas&lt;/h3&gt;

&lt;p&gt;Problem: Monolithic apps make this trivially easy.  Splitting data
across services is hard.  So, transactions turn into Sagas: Model the
transaction as a series of steps coordinated by events.  It's like a
workflow.  Rolllback by applying compensating operations.  Many common
systems already do this.  For example payment processing and approval
  workflows (expense reports).&lt;/p&gt;

&lt;p&gt;Ideal use for functions as a service.  Very lightweight logic,
stateless, triggered by an event.  Healthy companies in the future will
  be doing some or all of this.&lt;/p&gt;</content><summary type="html">Raw notes from Randy Shoup.</summary></entry><entry><title type="html">Goto Chicago 2017 Chris Heilmann</title><link href="/blog/2017/05/02/goto-chris-heilmann.html" rel="alternate" type="text/html" title="Goto Chicago 2017 Chris Heilmann" /><published>2017-05-02T13:00:00-04:00</published><updated>2017-05-02T13:00:00-04:00</updated><id>/blog/2017/05/02/goto-chris-heilmann</id><content type="html" xml:base="/blog/2017/05/02/goto-chris-heilmann.html">&lt;p&gt;Chris Heilmann &lt;a href=&quot;https://twitter.com/codepo8&quot;&gt;codepo8&lt;/a&gt;  &lt;a href=&quot;https://www.christianheilmann.com/&quot;&gt;https://www.christianheilmann.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web is not doing that well right now.&lt;/p&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;Censorship
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Bullying
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Trolling
	  &lt;/p&gt;&lt;/li&gt;

          &lt;li&gt;&lt;p&gt;Malware
	  &lt;/p&gt;&lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;Bloat
	  &lt;/p&gt;&lt;/li&gt;
          

	&lt;/ul&gt;


&lt;p&gt;He thinks bloat is a big problem.  He liked the simplicity of the
  early web.&lt;/p&gt;

&lt;p&gt;Most of the new end users are on mobile devices.&lt;/p&gt;

&lt;p&gt;The web was not ready for the mobile form factor.  Initially the
  mobile web was a throw back to the early web.&lt;/p&gt;

&lt;h2&gt;The publisher's dilemma&lt;/h2&gt;

&lt;p&gt;On the web, users are in control.&lt;/p&gt;

&lt;p&gt;Users are contitioned to not pay for things but find ways around
  paying.&lt;/p&gt;

&lt;p&gt;Somehow you have to pay the bills&lt;/p&gt;

&lt;h2&gt;Publishers like apps&lt;/h2&gt;

&lt;p&gt;Control look and feel&lt;/p&gt;

&lt;p&gt;Revenue resource&lt;/p&gt;

&lt;p&gt;Built-in obsolescence&lt;/p&gt;

&lt;p&gt;Control the environment, iOS first, android maybe&lt;/p&gt;

&lt;h2&gt;Reality check for publishers&lt;/h2&gt;

&lt;p&gt;Pricing race to the bottom&lt;/p&gt;

&lt;p&gt;Lock-in to the marketplace&lt;/p&gt;

&lt;p&gt;Revenue share with marketplace/OS&lt;/p&gt;

&lt;p&gt;Updates are hard and may be delayed by marketplace rules.&lt;/p&gt;

&lt;p&gt;94% of app revenue comes from 1% of publishers&lt;/p&gt;

&lt;p&gt;80% of users who download an app fail to become active users.&lt;/p&gt;

&lt;p&gt;In-app purchases are where the money is.&lt;/p&gt;

&lt;p&gt;60% of the apps in the Google Play app store have never been
  downloaded.&lt;/p&gt;

&lt;h2&gt;Tips for making better mobile web apps: PWA Progressive Web Apps&lt;/h2&gt;

&lt;p&gt;Small initial payload&lt;/p&gt;

&lt;p&gt;Form factor supporting interfaces: big buttons&lt;/p&gt;

&lt;p&gt;High contrast&lt;/p&gt;

&lt;p&gt;Support offline/flaky connection&lt;/p&gt;

&lt;p&gt;Taking advantage of the power of the end user device&lt;/p&gt;

&lt;p&gt;Avoid interaction latency&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Chris let drop several pearls of wisdom during his talk about how
he interacts with the digital world that left me with the desire to
learn more about them.  For example: ad blocking and VPN location
spoofing, how to serve your site over https.  People need to know how to
do these things. &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;App Manifest, and Service Worker.&lt;/p&gt;

&lt;h2&gt;Progressive Enhancement&lt;/h2&gt;

&lt;p&gt;Great analogy: escalator&lt;/p&gt;

&lt;p&gt;The great thing here is that progressive web apps is that it brings
  back the power of the link.&lt;/p&gt;</content><summary type="html">Chris Heilmann codepo8  https://www.christianheilmann.com/</summary></entry><entry><title type="html">Goto Chicago 2017 Bryan Cantrill</title><link href="/blog/2017/05/02/goto-brian-cantrill.html" rel="alternate" type="text/html" title="Goto Chicago 2017 Bryan Cantrill" /><published>2017-05-02T10:00:00-04:00</published><updated>2017-05-02T10:00:00-04:00</updated><id>/blog/2017/05/02/goto-brian-cantrill</id><content type="html" xml:base="/blog/2017/05/02/goto-brian-cantrill.html">&lt;p&gt;Raw notes.&lt;/p&gt;

&lt;h2&gt;Recounting the story of a Joyent outage&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theregister.co.uk/2014/05/28/joyent_cloud_down/&quot;&gt;Here is the register piece on the outage.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How did we get here?&lt;/h2&gt;

&lt;p&gt;He points out the flip side of such higly sophisticated automation:
the stress upon the humans in the loop is amplified.  A human
fallibility in a semi-automated system is worse than a human fallibility
  in a non-automated system.&lt;/p&gt;

&lt;h2&gt;Human fallibility in semi-automated systems&lt;/h2&gt;

&lt;p&gt;Recounted the story of the Air Canada flight that ran out of fuel in
flight.  767-200 in 1983.  The fuel mishap was due to the process of
  converting from imperial to metric units at some place in the system.&lt;/p&gt;

&lt;p&gt;Amazon S3 outage.&lt;/p&gt;

&lt;h2&gt;Whither microservices?&lt;/h2&gt;

&lt;p&gt;Microservices suffer from the amplification problem mentioned
  above.&lt;/p&gt;

&lt;h2&gt;Some non-IT illustrations&lt;/h2&gt;

&lt;p&gt;1963 power outage in the northeast&lt;/p&gt;

&lt;p&gt;This illustrates the notion of the load has to go somewhere.&lt;/p&gt;

&lt;p&gt;Used the example of Three Mile Island.  When you have auxiliary
systems, those systems are not checked.  The more alarms and alerts you
  have, the more likely they will overload the operators.&lt;/p&gt;

&lt;p&gt;We are gleefully deploying these distributed systems and telling
  ourselves they will not fail.&lt;/p&gt;

&lt;h2&gt;Debugging in the abstract&lt;/h2&gt;

&lt;p&gt;Debugging is the process by which we understand pathological behavior
  in the system.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;I like how he acknowledges that we have it easy in the software
world, compared to the real world.  He is a very entertaining
    speaker, but I don't like how he is yelling at us.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Debugging is the ability to be able to ask the right questions.  He
  described the continually narrowing set of constraints.&lt;/p&gt;

&lt;h2&gt;The craft of debuggable software&lt;/h2&gt;

&lt;p&gt;One slide as a nod to what you need to do to make things
  debuggable.&lt;/p&gt;

&lt;h2&gt;A culture of debugging&lt;/h2&gt;

&lt;p&gt;We must have an organizational culture that supports taking the extra
time for building for debuggability.&lt;/p&gt;

&lt;p&gt;When you have an outage you need to harvest all the useful
information and learn for it.  Every outage presents an opportunity to
  advance understanding.&lt;/p&gt;</content><summary type="html">Raw notes.</summary></entry><entry><title type="html">Goto Chicago 2017 Jennifer Peepas</title><link href="/blog/2017/05/01/goto-jennifer-peepas.html" rel="alternate" type="text/html" title="Goto Chicago 2017 Jennifer Peepas" /><published>2017-05-01T13:00:00-04:00</published><updated>2017-05-01T13:00:00-04:00</updated><id>/blog/2017/05/01/goto-jennifer-peepas</id><content type="html" xml:base="/blog/2017/05/01/goto-jennifer-peepas.html">&lt;p&gt;Teaches people to collaborate to make art.&lt;/p&gt;

&lt;p&gt;We grew up labeled as smart which is good, but sometimes people
forget to teach us things because they assume you already know it or can
  look it up yourself.&lt;/p&gt;

&lt;p&gt;CaptainAwkward.com is about learning or re-learning stuff we think we
&quot;should&quot; know, no shame about it.&lt;/p&gt;

&lt;h2&gt;Anecdata&lt;/h2&gt;

&lt;p&gt;People tell me their work feedback woes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Managers&lt;/b&gt;: having to conform to HR feedback processes that are
  overly brittle.  Or, the converse, there is no process.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Creators/Developers&lt;/b&gt;: &quot;Looks good to me&quot;.  This means they
  haven't had time to look at the work.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Peer reviewers&lt;/b&gt;: some people can't take any criticism.  Some
  people are too nitpicky.  &lt;/p&gt;

&lt;h2&gt;Dealing with Feedback&lt;/h2&gt;

&lt;p&gt;How she does feedback with her students.  Listed the steps.&lt;/p&gt;

&lt;p&gt;Ask the creators why do feedback?  Make the work better.&lt;/p&gt;

&lt;p&gt;Actually, the secret is an emotional component.  Actually, there is
significant benefit to the reviewers in how they create their own
  work.&lt;/p&gt;

&lt;p&gt;You see your own work differently when you see how others respond to
  it.&lt;/p&gt;

&lt;h2&gt;How to do Feedback Better&lt;/h2&gt;

&lt;p&gt;Liz Lerman's Critical Response Process.&lt;/p&gt;

&lt;p&gt;1. View the work.  Work speaks for itself.&lt;/p&gt;

&lt;p&gt;2. Audience describe what you observe without assigning a value
  judgement.&lt;/p&gt;

&lt;p&gt;3. Audience talks about what's working&lt;/p&gt;

&lt;p&gt;4. Creator: ask advance prepared questions &lt;/p&gt;

&lt;p&gt;5. Audience: identify things that aren't working, with the author's
  consent.&lt;/p&gt;

&lt;p&gt;This process forces people to slow down the process and look at the
  big picture before diving into the details.&lt;/p&gt;

&lt;h2&gt;Good Practices&lt;/h2&gt;

&lt;p&gt;Critique sessions happen at regular intervals, with advance notice,
  and a firm start and end time.  It's not a pop quiz.&lt;/p&gt;

&lt;p&gt;Structure and ground rules are agreed-upon and transparent.&lt;/p&gt;

&lt;p&gt;Can be in-person meeting or online discussion.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;No multitasking during the review.  No hiding in your
    phone.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Have one person be responsible for facilitating the discussion.&lt;/p&gt;

&lt;p&gt;Creators my introduce the work but not apologize for it.  Nobody
  wants your shame spiral.&lt;/p&gt;

&lt;p&gt;After work is presented, facilitator can give participants a few
  minutes to write down/type up their thoughts before anyone speaks.&lt;/p&gt;

&lt;p&gt;If you're the creator, use those minutes when everyone is writing to
  generate and organize questions you have for the audience.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The goal of the session is to generate the todo list to carry the
    project forward.&lt;/b&gt;&lt;/p&gt;

&lt;h2&gt;If you are giving feedback...&lt;/h2&gt;

&lt;p&gt;If you could only five three notes, what would they be?&lt;/p&gt;

&lt;p&gt;Focus on the work, and not the person or their individual performance
  or abilities.&lt;/p&gt;

&lt;p&gt;Avoid, &quot;That won't work because...&quot;.  Instead, as them why they are
doing it that way.  Try to stay focused on the future, what needs to
  happen next.&lt;/p&gt;

&lt;p&gt;If you raise a problem, try to also propose a solution.&lt;/p&gt;

&lt;p&gt;Facilitators make it safe for people to say, &quot;I don't know&quot;.&lt;/p&gt;

&lt;p&gt;Is it true, is it necessary, is it kind.&lt;/p&gt;

&lt;h2&gt;What if it really stinks&lt;/h2&gt;

&lt;p&gt;Be brief, direct, and specific.&lt;/p&gt;

&lt;p&gt;Shame and blame are performance killers.&lt;/p&gt;

&lt;h2&gt;If you're receiving feedback&lt;/h2&gt;

&lt;p&gt;Write it all down.  Write it down even if you disagree.&lt;/p&gt;

&lt;p&gt;If you feel yourself getting flustered or defensive, cut yourself
  slack, but also, stop talking.&lt;/p&gt;

&lt;h2&gt;If you're the moderator&lt;/h2&gt;

&lt;p&gt;Keep the discussion on time.&lt;/p&gt;

&lt;p&gt;Amplifying the good quesions is a better strategy, than tamping down
  on the negative one.&lt;/p&gt;

&lt;p&gt;Aftercare for Creators&lt;/p&gt;

&lt;p&gt;After the session, take a break.  Then refine the comments.
  Prioritize the feedback, do the easy stuff first.&lt;/p&gt;

&lt;p&gt;If you need to discard the feedback item, you can make a better
  argument for doing so if you show you considered it.&lt;/p&gt;

&lt;p&gt;Good feeedback doesn't just happen.  It needs a structure.&lt;/p&gt;

&lt;p&gt;The best possible outcome from a response session is for the maker to
  want to back to work.  Liz Lerman&lt;/p&gt;

&lt;p&gt;Thorough feedback is a gift of time and attention.  It's an
investment in the projects you make and in your development as a
creator.&lt;/p&gt;</content><summary type="html">Teaches people to collaborate to make art.</summary></entry><entry><title type="html">Goto Chicago 2017 Martin Fowler</title><link href="/blog/2017/05/01/goto-martin-fowler.html" rel="alternate" type="text/html" title="Goto Chicago 2017 Martin Fowler" /><published>2017-05-01T10:00:00-04:00</published><updated>2017-05-01T10:00:00-04:00</updated><id>/blog/2017/05/01/goto-martin-fowler</id><content type="html" xml:base="/blog/2017/05/01/goto-martin-fowler.html">&lt;p&gt;Martin Fowler.&lt;/p&gt;

&lt;p&gt;Event Driven Architectures.  What do people mean by it?  Common
  theme: something called an event.  But really it's more open ended.&lt;/p&gt;

&lt;p&gt;Thoughtworks internal conference in Denver.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aweV9FLTZkU&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;I. Event Notification&lt;/h2&gt;

&lt;h3&gt;1. Event Notification: Dealing with subsystem coupling&lt;/h3&gt;

&lt;p&gt;Turns things inside out and allows systems to be decoupled.&lt;/p&gt;

&lt;p&gt;This pattern applies in at the macro (subsystems) and micro level
  (text fields).&lt;/p&gt;

&lt;h3&gt;2. Objectification of time: The event itself being a first class
thingamajig.&lt;/h3&gt;

&lt;p&gt;Encapsulates the time aspect nicely.  Objectifies the thing.&lt;/p&gt;

&lt;p&gt;Events and commands.  What's the difference?  The naming things.&lt;/p&gt;

&lt;p&gt;Events: something happened.  Commands: do something.&lt;/p&gt;

&lt;p&gt;If you don't separate these things conceptually, it leads to
  reasoning problems.&lt;/p&gt;

&lt;h3&gt;3. Scale: Allows adding new throughput boosters without changing the architecture&lt;/h3&gt;

&lt;p&gt;A downside: no statement of overall behavior.  Because it is not
  imperative, the only way to understand is to observe the running it.&lt;/p&gt;

&lt;h2&gt;II. Event-carried State Transfer&lt;/h2&gt;

&lt;p&gt;It's not always possible to keep everything inside the event.  Or,
deciding how much information to put in the event.  Can I put so much in
there so the systems don't need to communicate directly.  Events: cause
followon queries&lt;/p&gt;

&lt;p&gt;a. Each subsystem keeps its data local.  b. each event has enough to
  allow the local data to be updated and kept in sync.&lt;/p&gt;

&lt;p&gt;But now you have the consistency problem.&lt;/p&gt;

&lt;h2&gt;III. Event Sourcing&lt;/h2&gt;

&lt;p&gt;Bring in the logs.  Test: If at any time, you can blow away the
  current state, and replay the log, and you get back the same state.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did a poll, &quot;who uses this&quot; was alarmed at the result.  Resorted
    to observing that an SCM is an example of this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the banking world, an accounting ledger is the perfect example of
  this.&lt;/p&gt;

&lt;p&gt;It's a combination of every single change, plus snapshots.&lt;/p&gt;

&lt;p&gt;Some benefits: debugging is nicer.  You can make copies.  Can keep
your system itself entirely in memory.  Gave the famous lmax
  example.&lt;/p&gt;

&lt;h2&gt;Some downsides&lt;/h2&gt;

&lt;p&gt;Unfamiliar, External Systems, &lt;code&gt;Event schema&lt;/code&gt; (JSON to the
  rescue?), Identifiers&lt;/p&gt;

&lt;p&gt;Slip ups: trouble with event sourcing.  Felt he had to do twice as
much work.  People conflate asynchrony with event sourcing.  It doesn't
have to be.  It does add a lot of complexity.  (How do you do event
sourcing without adding asynchrony?  Locking?)  Trouble with versioning
events.  Easy refactoring: change the name of a function.  How do you
get all the callsites?  Advice: Don't have any business logic between
  your event and its storage.&lt;/p&gt;

&lt;h2&gt;IV. CQRS&lt;/h2&gt;

&lt;p&gt;Separate the components that read and write from your store.  You
only ever write using the command thing.  You only ever read from the
  query system.&lt;/p&gt;

&lt;p&gt;You have to be wary of this pattern.  People seem to get in trouble
with this pattern.  &quot;My sense is that it really has to be deep down in
the toolbag to pull this one out.&quot;  He's been talking about having
reporting databases for years; that's CQRS too.  Pure CQRS is the &quot;only
  ever write using the command thing.&quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/201701-event-driven.html&quot;&gt;original article.&lt;/a&gt;&lt;/p&gt;</content><summary type="html">Martin Fowler.</summary></entry><entry><title type="html">GOTO Chicago 2017 Picks</title><link href="/blog/2017/04/19/goto-chicago-picks.html" rel="alternate" type="text/html" title="GOTO Chicago 2017 Picks" /><published>2017-04-19T19:00:00-04:00</published><updated>2017-04-19T19:00:00-04:00</updated><id>/blog/2017/04/19/goto-chicago-picks</id><content type="html" xml:base="/blog/2017/04/19/goto-chicago-picks.html">&lt;p&gt;I am very blessed with the opportunity to be speaking at this
years &lt;a href=&quot;https://gotochgo.com/2017/schedule&quot;&gt;GOTO Chicago 2017&lt;/a&gt;
conference.  I will be dusting off the old Rockstar Programmers talk and
refreshing it up with some new interviews.  Ahead of the conference I want
  to share my conference picks.&lt;/p&gt;

&lt;h2&gt;Monday &amp;mdash; Conference Day One&lt;/h2&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;09:15  Zurich Ballroom &lt;a href=&quot;https://gotochgo.com/2017/sessions/47&quot;&gt;Software Design in the 21st Century&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;Martin Fowler is one of the enduring luminaries in our
            very quick changing field.  To stay as consistently
            influential as he has, for as long as he has is a great
            indicator that he is the real deal.  His abstract is
            sufficiently high level that he could pretty much go
            anywhere with it, so I'm curious to see the specific under
            the general.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;10:35 Zurich
	  EFG &lt;a href=&quot;https://gotochgo.com/2017/sessions/62&quot;&gt;Patterns
	  of Effective Teams&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;My talk is on the people track and I've long been a fan
            of &lt;a href=&quot;https://twitter.com/tastapod&quot;&gt;Dan North&lt;/a&gt;.  In
            fact, I quoted heavily, with attribution, from
            his &lt;a href=&quot;https://www.youtube.com/watch?v=Bw1dgUS27uE&quot;&gt;The
            Browser is Dead&lt;/a&gt; talk in some of my own talks.  Dan will
            be covering so character attributes of effective teams.
            That's right up my alley.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;11:40 Zurich AFG &lt;a href=&quot;https://gotochgo.com/2017/sessions/63&quot;&gt;Give and Take: Handling Constructive Criticism and Creative Conflict Like A Pro&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I'm so glad to see this topic being addressed.  While the
            notion of &quot;failing fast&quot; is now seen as a good thing, I find
            at the individual level people still have a hard time with
            the particular manifestation of failure known as
            constructive
            criticism.  &lt;a href=&quot;https://captainawkward.com/&quot;&gt;Jennifer
            Peepas&lt;/a&gt; has a very diverse background full of things not
            commonly seen at IT conferences.  This should be great.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;13:30 Zurich ABCD &lt;a href=&quot;https://gotochgo.com/2017/sessions/44&quot;&gt;Troubleshooting Tiered Tragedy: A Peek Into Failure&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;Say what you will about monoliths, at least your logs are
            all in one place and there is no need for complex
            aggregation systems.  Massively distributed systems are now
            much more widespread, so it's a good idea to understand how
            to not give up the failure fidelity at the same
            time.  &lt;a href=&quot;https://twitter.com/DarkAndNerdy&quot;&gt;Jeff
            Smith&lt;/a&gt; will literally break it down for us.&lt;/p&gt;

          &lt;/li&gt;
          
	  &lt;li&gt;&lt;p&gt;My session is in this slot, 14:35 in Zurich EFG.  I am
	  reprising my Secrets of the Rock Star Programmers talk based
	  on the book for which this website was built.  If I wasn't
	  giving the talk, I'd probably be
	  at &lt;a href=&quot;https://gotochgo.com/2017/sessions/51&quot;&gt;Brian Ray's
	  Cognitive from the Engineering perspective&lt;/a&gt;.  Deloitte is a
	  global consulting powerhouse, so I want to see what they are
	      doing with all this machine learning stuff.&lt;/p&gt; &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;16:45 Vevey 12 &lt;a href=&quot;https://gotochgo.com/2017/sessions/54&quot;&gt;Javaloution! (How I learned to stop worrying and play Jenga! with the entire software industry. What could possibly go wrong?”)&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;Naturally I need to check out my
            colleague &lt;a href=&quot;https://twitter.com/gsaab&quot;&gt;Georges
            Saab&lt;/a&gt;'s session about the experience of bringing Jigsaw
            to the world.  I've seen from the inside how hard it is to
            evolve a developer platform in my work
            on &lt;a href=&quot;https://twitter.com/jsf_spec&quot;&gt;JSF&lt;/a&gt;.  Doing it
            with all of Java is much more complicated.&lt;/p&gt;

          &lt;/li&gt;

	&lt;/ul&gt;

        &lt;h2&gt;Tuesday &amp;mdash; Conference Day Two&lt;/h2&gt;

	&lt;ul&gt;

	  &lt;li&gt;&lt;p&gt;09:15 Zurich Ballroom &lt;a href=&quot;https://gotochgo.com/2017/sessions/86&quot;&gt;Debugging under fire: Keeping your head when systems have lost their mind&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I never had the pleasure of working with Bryan Cantrill
            during our overlapping time at Sun, but I gather he can be a
            polarizing figure.  He's certainly had a wild ride of it
            with node.js and I'm sure he has some gripping stories to
            tell, which I look forward to hearing.&lt;/p&gt;

          &lt;/li&gt;


	  &lt;li&gt;&lt;p&gt;10:35 St. Galen 3 &lt;a href=&quot;https://gotochgo.com/2017/sessions/164&quot;&gt;Old Geeks Yell At Cloud&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I still use XEmacs to read my email, so I get the whole
            curmudgeon thing.  I've been
            following &lt;a href=&quot;https://twitter.com/bridgetkromhout&quot;&gt;Bridget
            Kromhout&lt;/a&gt; for a while so I look forward to seeing her
            sessions.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;11:40 Vevey 34 &lt;a href=&quot;https://gotochgo.com/2017/sessions/72&quot;&gt;We can’t have a progressive web without embracing it&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;https://twitter.com/codepo8&quot;&gt;Chris Heilmann&lt;/a&gt;
            has a few things in common with my old
            pal &lt;a href=&quot;https://twitter.com/cwilso&quot;&gt;Chris Wilson&lt;/a&gt;:
            they have similar twitter hairstyles, they are both named
            Chris, and the both had something to do with browsers at
            Microsoft.  Let's see what he has to say about the state of
            the web.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;13:30 Zurich EFG &lt;a href=&quot;https://gotochgo.com/2017/sessions/76&quot;&gt;Developers _are_ Researchers - Improve the work you love with Research Driven Development&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I love the premise of this talk.  It's so meta.  Let's
            apply research techniques to how we do our jobs.&lt;/p&gt;
          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;14:35 Zurich ABCD &lt;a href=&quot;https://gotochgo.com/2017/sessions/79&quot;&gt;Effective Microservices in a Data-Centric World&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;&lt;a href=&quot;https://twitter.com/randyshoup&quot;&gt;Randy Shoup&lt;/a&gt;
            is doing Microservices at StitchFix.  Knowing how things are
            going at GILT, I think this should be a fun talk.  Plus, I
            want to see how well dressed he is.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;15:40 Vevey 34 &lt;a href=&quot;https://gotochgo.com/2017/sessions/64&quot;&gt;Making the web frameworks titans feel tiny&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;Taking away deficiencies in web frameworks is something
            in which I have a keen interest.  Let's see
            what &lt;a href=&quot;https://twitter.com/Martndemus&quot;&gt;Marten
            Schilstra&lt;/a&gt; has to say.&lt;/p&gt;
            
          &lt;/li&gt;

          &lt;li&gt;&lt;p&gt;16:45 Zurich ABCD &lt;a href=&quot;https://gotochgo.com/2017/sessions/85&quot;&gt;One journey, many paths: A pragmatic guide for migrating to microservices&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I've been thinking a lot about monoliths and
            microservices lately.  It's always good to have a fresh
            perspective on this hot topic of our
            times.  &lt;a href=&quot;https://twitter.com/zhamakd&quot;&gt;Zhamak
            Dehghani&lt;/a&gt; is in a great position to offer it.&lt;/p&gt;

          &lt;/li&gt;

	  &lt;li&gt;&lt;p&gt;18:00 Zurich Ballroom &lt;a href=&quot;https://gotochgo.com/2017/sessions/32&quot;&gt;Closing Keynote: Meeting resistance and moving forward&lt;/a&gt;&lt;/p&gt;

            &lt;p&gt;I had the chance to meet Linda Rising at Jazoon 2007 or
            so and she is a fascinating person and engaging speaker.  A
            great way to close this conference.&lt;/p&gt;

          &lt;/li&gt;
          
	&lt;/ul&gt;</content><summary type="html">I am very blessed with the opportunity to be speaking at this
years GOTO Chicago 2017
conference.  I will be dusting off the old Rockstar Programmers talk and
refreshing it up with some new interviews.  Ahead of the conference I want
  to share my conference picks.</summary></entry></feed>
